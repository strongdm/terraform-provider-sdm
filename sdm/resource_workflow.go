// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceWorkflow() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceWorkflowCreate),
		ReadContext:   wrapCrudOperation(resourceWorkflowRead),
		UpdateContext: wrapCrudOperation(resourceWorkflowUpdate),
		DeleteContext: wrapCrudOperation(resourceWorkflowDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"access_rules": {
				Type:             schema.TypeString,
				Optional:         true,
				Computed:         true,
				DiffSuppressFunc: accessRulesDiffSuppress,
				Description:      "AccessRules is a list of access rules defining the resources this Workflow provides access to.",
			},
			"approval_flow_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Optional approval flow ID identifies an approval flow that linked to the workflow",
			},
			"auto_grant": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Optional auto grant setting to automatically approve requests or not, defaults to false.",
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Optional description of the Workflow.",
			},
			"enabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the Workflow.",
			},
			"weight": {
				Type:        schema.TypeInt,
				Optional:    true,
				Computed:    true,
				Description: "Optional weight for workflow to specify it's priority in matching a request.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertWorkflowToPlumbing(d *schema.ResourceData) *sdm.Workflow {
	return &sdm.Workflow{
		ID:             d.Id(),
		AccessRules:    convertAccessRulesToPlumbing(d.Get("access_rules")),
		ApprovalFlowID: convertStringToPlumbing(d.Get("approval_flow_id")),
		AutoGrant:      convertBoolToPlumbing(d.Get("auto_grant")),
		Description:    convertStringToPlumbing(d.Get("description")),
		Enabled:        convertBoolToPlumbing(d.Get("enabled")),
		Name:           convertStringToPlumbing(d.Get("name")),
		Weight:         convertInt64ToPlumbing(d.Get("weight")),
	}
}

func resourceWorkflowCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertWorkflowToPlumbing(d)
	resp, err := cc.Workflows().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create Workflow: %w", err)
	}
	d.SetId(resp.Workflow.ID)
	v := resp.Workflow
	d.Set("access_rules", convertAccessRulesToPorcelain(v.AccessRules))
	d.Set("approval_flow_id", (v.ApprovalFlowID))
	d.Set("auto_grant", (v.AutoGrant))
	d.Set("description", (v.Description))
	d.Set("enabled", (v.Enabled))
	d.Set("name", (v.Name))
	d.Set("weight", (v.Weight))
	return nil
}

func resourceWorkflowRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertWorkflowToPlumbing(d)
	_ = localVersion
	resp, err := cc.Workflows().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read Workflow %s: %w", d.Id(), err)
	}
	v := resp.Workflow
	d.Set("access_rules", convertAccessRulesToPorcelain(v.AccessRules))
	d.Set("approval_flow_id", (v.ApprovalFlowID))
	d.Set("auto_grant", (v.AutoGrant))
	d.Set("description", (v.Description))
	d.Set("enabled", (v.Enabled))
	d.Set("name", (v.Name))
	d.Set("weight", (v.Weight))
	return nil
}
func resourceWorkflowUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	resp, err := cc.Workflows().Update(ctx, convertWorkflowToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update Workflow %s: %w", d.Id(), err)
	}
	d.SetId(resp.Workflow.ID)
	return resourceWorkflowRead(ctx, d, cc)
}
func resourceWorkflowDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.Workflows().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
