// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApprovalWorkflowsClient is the client API for ApprovalWorkflows service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalWorkflowsClient interface {
	// Create creates a new approval workflow and requires a name and approval mode for the approval workflow.
	Create(ctx context.Context, in *ApprovalWorkflowCreateRequest, opts ...grpc.CallOption) (*ApprovalWorkflowCreateResponse, error)
	// Get reads one approval workflow by ID.
	Get(ctx context.Context, in *ApprovalWorkflowGetRequest, opts ...grpc.CallOption) (*ApprovalWorkflowGetResponse, error)
	// Delete deletes an existing approval workflow.
	Delete(ctx context.Context, in *ApprovalWorkflowDeleteRequest, opts ...grpc.CallOption) (*ApprovalWorkflowDeleteResponse, error)
	// Update updates an existing approval workflow.
	Update(ctx context.Context, in *ApprovalWorkflowUpdateRequest, opts ...grpc.CallOption) (*ApprovalWorkflowUpdateResponse, error)
	// Lists existing approval workflows.
	List(ctx context.Context, in *ApprovalWorkflowListRequest, opts ...grpc.CallOption) (*ApprovalWorkflowListResponse, error)
}

type approvalWorkflowsClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalWorkflowsClient(cc grpc.ClientConnInterface) ApprovalWorkflowsClient {
	return &approvalWorkflowsClient{cc}
}

func (c *approvalWorkflowsClient) Create(ctx context.Context, in *ApprovalWorkflowCreateRequest, opts ...grpc.CallOption) (*ApprovalWorkflowCreateResponse, error) {
	out := new(ApprovalWorkflowCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflows/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowsClient) Get(ctx context.Context, in *ApprovalWorkflowGetRequest, opts ...grpc.CallOption) (*ApprovalWorkflowGetResponse, error) {
	out := new(ApprovalWorkflowGetResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflows/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowsClient) Delete(ctx context.Context, in *ApprovalWorkflowDeleteRequest, opts ...grpc.CallOption) (*ApprovalWorkflowDeleteResponse, error) {
	out := new(ApprovalWorkflowDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflows/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowsClient) Update(ctx context.Context, in *ApprovalWorkflowUpdateRequest, opts ...grpc.CallOption) (*ApprovalWorkflowUpdateResponse, error) {
	out := new(ApprovalWorkflowUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflows/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowsClient) List(ctx context.Context, in *ApprovalWorkflowListRequest, opts ...grpc.CallOption) (*ApprovalWorkflowListResponse, error) {
	out := new(ApprovalWorkflowListResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflows/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalWorkflowsServer is the server API for ApprovalWorkflows service.
// All implementations must embed UnimplementedApprovalWorkflowsServer
// for forward compatibility
type ApprovalWorkflowsServer interface {
	// Create creates a new approval workflow and requires a name and approval mode for the approval workflow.
	Create(context.Context, *ApprovalWorkflowCreateRequest) (*ApprovalWorkflowCreateResponse, error)
	// Get reads one approval workflow by ID.
	Get(context.Context, *ApprovalWorkflowGetRequest) (*ApprovalWorkflowGetResponse, error)
	// Delete deletes an existing approval workflow.
	Delete(context.Context, *ApprovalWorkflowDeleteRequest) (*ApprovalWorkflowDeleteResponse, error)
	// Update updates an existing approval workflow.
	Update(context.Context, *ApprovalWorkflowUpdateRequest) (*ApprovalWorkflowUpdateResponse, error)
	// Lists existing approval workflows.
	List(context.Context, *ApprovalWorkflowListRequest) (*ApprovalWorkflowListResponse, error)
	mustEmbedUnimplementedApprovalWorkflowsServer()
}

// UnimplementedApprovalWorkflowsServer must be embedded to have forward compatible implementations.
type UnimplementedApprovalWorkflowsServer struct {
}

func (UnimplementedApprovalWorkflowsServer) Create(context.Context, *ApprovalWorkflowCreateRequest) (*ApprovalWorkflowCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApprovalWorkflowsServer) Get(context.Context, *ApprovalWorkflowGetRequest) (*ApprovalWorkflowGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApprovalWorkflowsServer) Delete(context.Context, *ApprovalWorkflowDeleteRequest) (*ApprovalWorkflowDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApprovalWorkflowsServer) Update(context.Context, *ApprovalWorkflowUpdateRequest) (*ApprovalWorkflowUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApprovalWorkflowsServer) List(context.Context, *ApprovalWorkflowListRequest) (*ApprovalWorkflowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApprovalWorkflowsServer) mustEmbedUnimplementedApprovalWorkflowsServer() {}

// UnsafeApprovalWorkflowsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalWorkflowsServer will
// result in compilation errors.
type UnsafeApprovalWorkflowsServer interface {
	mustEmbedUnimplementedApprovalWorkflowsServer()
}

func RegisterApprovalWorkflowsServer(s grpc.ServiceRegistrar, srv ApprovalWorkflowsServer) {
	s.RegisterService(&_ApprovalWorkflows_serviceDesc, srv)
}

func _ApprovalWorkflows_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflows/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowsServer).Create(ctx, req.(*ApprovalWorkflowCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflows_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflows/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowsServer).Get(ctx, req.(*ApprovalWorkflowGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflows_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflows/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowsServer).Delete(ctx, req.(*ApprovalWorkflowDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflows_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflows/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowsServer).Update(ctx, req.(*ApprovalWorkflowUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflows_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflows/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowsServer).List(ctx, req.(*ApprovalWorkflowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApprovalWorkflows_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ApprovalWorkflows",
	HandlerType: (*ApprovalWorkflowsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApprovalWorkflows_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApprovalWorkflows_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApprovalWorkflows_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApprovalWorkflows_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApprovalWorkflows_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "approval_workflows.proto",
}
