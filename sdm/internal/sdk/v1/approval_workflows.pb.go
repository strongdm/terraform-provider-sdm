// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: approval_workflows.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ApprovalWorkflowCreateRequest specifies the name and approval mode of a new approval workflow
// to be created.
type ApprovalWorkflowCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new ApprovalWorkflow.
	ApprovalWorkflow *ApprovalWorkflow `protobuf:"bytes,2,opt,name=approval_workflow,json=approvalWorkflow,proto3" json:"approval_workflow,omitempty"`
}

func (x *ApprovalWorkflowCreateRequest) Reset() {
	*x = ApprovalWorkflowCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowCreateRequest) ProtoMessage() {}

func (x *ApprovalWorkflowCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowCreateRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowCreateRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{0}
}

func (x *ApprovalWorkflowCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowCreateRequest) GetApprovalWorkflow() *ApprovalWorkflow {
	if x != nil {
		return x.ApprovalWorkflow
	}
	return nil
}

// ApprovalWorkflowCreateResponse reports how the ApprovalWorkflow was created in the system.
type ApprovalWorkflowCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created approval workflow.
	ApprovalWorkflow *ApprovalWorkflow `protobuf:"bytes,2,opt,name=approval_workflow,json=approvalWorkflow,proto3" json:"approval_workflow,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowCreateResponse) Reset() {
	*x = ApprovalWorkflowCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowCreateResponse) ProtoMessage() {}

func (x *ApprovalWorkflowCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowCreateResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowCreateResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{1}
}

func (x *ApprovalWorkflowCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowCreateResponse) GetApprovalWorkflow() *ApprovalWorkflow {
	if x != nil {
		return x.ApprovalWorkflow
	}
	return nil
}

func (x *ApprovalWorkflowCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowGetRequest specifies which ApprovalWorkflow to retrieve.
type ApprovalWorkflowGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the ApprovalWorkflow to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApprovalWorkflowGetRequest) Reset() {
	*x = ApprovalWorkflowGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowGetRequest) ProtoMessage() {}

func (x *ApprovalWorkflowGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowGetRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowGetRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{2}
}

func (x *ApprovalWorkflowGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ApprovalWorkflowGetResponse returns a requested ApprovalWorkflow.
type ApprovalWorkflowGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested ApprovalWorkflow.
	ApprovalWorkflow *ApprovalWorkflow `protobuf:"bytes,2,opt,name=approval_workflow,json=approvalWorkflow,proto3" json:"approval_workflow,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowGetResponse) Reset() {
	*x = ApprovalWorkflowGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowGetResponse) ProtoMessage() {}

func (x *ApprovalWorkflowGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowGetResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowGetResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{3}
}

func (x *ApprovalWorkflowGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowGetResponse) GetApprovalWorkflow() *ApprovalWorkflow {
	if x != nil {
		return x.ApprovalWorkflow
	}
	return nil
}

func (x *ApprovalWorkflowGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowUpdateRequest identifies an ApprovalWorkflow by ID and provides fields to update on
// that ApprovalWorkflow record.
type ApprovalWorkflowUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The approval workflow to be updated.
	ApprovalWorkflow *ApprovalWorkflow `protobuf:"bytes,2,opt,name=approval_workflow,json=approvalWorkflow,proto3" json:"approval_workflow,omitempty"`
}

func (x *ApprovalWorkflowUpdateRequest) Reset() {
	*x = ApprovalWorkflowUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowUpdateRequest) ProtoMessage() {}

func (x *ApprovalWorkflowUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowUpdateRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowUpdateRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{4}
}

func (x *ApprovalWorkflowUpdateRequest) GetMeta() *UpdateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowUpdateRequest) GetApprovalWorkflow() *ApprovalWorkflow {
	if x != nil {
		return x.ApprovalWorkflow
	}
	return nil
}

// ApprovalWorkflowUpdateResponse returns the fields of an ApprovalWorkflow after it has been updated by
// an ApprovalWorkflowUpdateRequest.
type ApprovalWorkflowUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The updated approval workflow.
	ApprovalWorkflow *ApprovalWorkflow `protobuf:"bytes,2,opt,name=approval_workflow,json=approvalWorkflow,proto3" json:"approval_workflow,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowUpdateResponse) Reset() {
	*x = ApprovalWorkflowUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowUpdateResponse) ProtoMessage() {}

func (x *ApprovalWorkflowUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowUpdateResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowUpdateResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{5}
}

func (x *ApprovalWorkflowUpdateResponse) GetMeta() *UpdateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowUpdateResponse) GetApprovalWorkflow() *ApprovalWorkflow {
	if x != nil {
		return x.ApprovalWorkflow
	}
	return nil
}

func (x *ApprovalWorkflowUpdateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowDeleteRequest specifies the id of an approval workflow to be deleted.
type ApprovalWorkflowDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Id of the ApprovalWorkflow to be deleted.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApprovalWorkflowDeleteRequest) Reset() {
	*x = ApprovalWorkflowDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowDeleteRequest) ProtoMessage() {}

func (x *ApprovalWorkflowDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowDeleteRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{6}
}

func (x *ApprovalWorkflowDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ApprovalWorkflowDeleteResponse returns information about an ApprovalWorkflow that was deleted.
type ApprovalWorkflowDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The deleted approval workflow id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowDeleteResponse) Reset() {
	*x = ApprovalWorkflowDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowDeleteResponse) ProtoMessage() {}

func (x *ApprovalWorkflowDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowDeleteResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowDeleteResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{7}
}

func (x *ApprovalWorkflowDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalWorkflowDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowListRequest specifies criteria for retrieving a list of
// ApprovalWorkflow records
type ApprovalWorkflowListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ApprovalWorkflowListRequest) Reset() {
	*x = ApprovalWorkflowListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowListRequest) ProtoMessage() {}

func (x *ApprovalWorkflowListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowListRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowListRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{8}
}

func (x *ApprovalWorkflowListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ApprovalWorkflowListResponse returns a list of ApprovalWorkflow records that meet
// the criteria of an ApprovalWorkflowListRequest.
type ApprovalWorkflowListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The matching approval workflows.
	ApprovalWorkflows []*ApprovalWorkflow `protobuf:"bytes,2,rep,name=approval_workflows,json=approvalWorkflows,proto3" json:"approval_workflows,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowListResponse) Reset() {
	*x = ApprovalWorkflowListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowListResponse) ProtoMessage() {}

func (x *ApprovalWorkflowListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowListResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowListResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{9}
}

func (x *ApprovalWorkflowListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowListResponse) GetApprovalWorkflows() []*ApprovalWorkflow {
	if x != nil {
		return x.ApprovalWorkflows
	}
	return nil
}

func (x *ApprovalWorkflowListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflows are the mechanism by which requests for access can be viewed by authorized
// approvers and be approved or denied.
type ApprovalWorkflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the ApprovalWorkflow.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the ApprovalWorkflow.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Approval mode of the ApprovalWorkflow
	ApprovalMode string `protobuf:"bytes,3,opt,name=approval_mode,json=approvalMode,proto3" json:"approval_mode,omitempty"`
	// Optional description of the ApprovalWorkflow.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The approval steps of this approval workflow
	ApprovalWorkflowSteps []*ApprovalFlowStep `protobuf:"bytes,5,rep,name=approval_workflow_steps,json=approvalWorkflowSteps,proto3" json:"approval_workflow_steps,omitempty"`
}

func (x *ApprovalWorkflow) Reset() {
	*x = ApprovalWorkflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflow) ProtoMessage() {}

func (x *ApprovalWorkflow) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflow.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflow) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{10}
}

func (x *ApprovalWorkflow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalWorkflow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApprovalWorkflow) GetApprovalMode() string {
	if x != nil {
		return x.ApprovalMode
	}
	return ""
}

func (x *ApprovalWorkflow) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApprovalWorkflow) GetApprovalWorkflowSteps() []*ApprovalFlowStep {
	if x != nil {
		return x.ApprovalWorkflowSteps
	}
	return nil
}

// An approval step for an approval workflow. Specifies approvers and conditions for approval to be granted.
type ApprovalFlowStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether "any" or "all" approvers must approve for this approval step to pass. Optional, defaults to "any".
	Quantifier string `protobuf:"bytes,1,opt,name=quantifier,proto3" json:"quantifier,omitempty"`
	// Duration after which this approval step will be skipped if no approval is given. Optional, if not provided an approver must approve before the step passes.
	SkipAfter *durationpb.Duration `protobuf:"bytes,2,opt,name=skip_after,json=skipAfter,proto3" json:"skip_after,omitempty"`
	// The approvers for this approval step
	Approvers []*ApprovalFlowApprover `protobuf:"bytes,3,rep,name=approvers,proto3" json:"approvers,omitempty"`
}

func (x *ApprovalFlowStep) Reset() {
	*x = ApprovalFlowStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalFlowStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalFlowStep) ProtoMessage() {}

func (x *ApprovalFlowStep) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalFlowStep.ProtoReflect.Descriptor instead.
func (*ApprovalFlowStep) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{11}
}

func (x *ApprovalFlowStep) GetQuantifier() string {
	if x != nil {
		return x.Quantifier
	}
	return ""
}

func (x *ApprovalFlowStep) GetSkipAfter() *durationpb.Duration {
	if x != nil {
		return x.SkipAfter
	}
	return nil
}

func (x *ApprovalFlowStep) GetApprovers() []*ApprovalFlowApprover {
	if x != nil {
		return x.Approvers
	}
	return nil
}

// An approver for an approval workflow step. Specifies either an account_id or an role_id (not both)
type ApprovalFlowApprover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The approver account id.
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The approver role id
	RoleId string `protobuf:"bytes,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// A reference to an approver: "" or "manager-of-requester" or "manager-of-manager-of-requester"
	// If set, the account_id and role_id must be empty.
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ApprovalFlowApprover) Reset() {
	*x = ApprovalFlowApprover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflows_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalFlowApprover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalFlowApprover) ProtoMessage() {}

func (x *ApprovalFlowApprover) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflows_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalFlowApprover.ProtoReflect.Descriptor instead.
func (*ApprovalFlowApprover) Descriptor() ([]byte, []int) {
	return file_approval_workflows_proto_rawDescGZIP(), []int{12}
}

func (x *ApprovalFlowApprover) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ApprovalFlowApprover) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ApprovalFlowApprover) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

var File_approval_workflows_proto protoreflect.FileDescriptor

var file_approval_workflows_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x8f, 0x02, 0x0a, 0x1e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x0a, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3,
	0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x64, 0x0a, 0x1a, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x95, 0x02, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12,
	0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x8f, 0x02, 0x0a, 0x1e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x62, 0x0a, 0x0a, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3,
	0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a,
	0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6a, 0x0a, 0x1d, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3,
	0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3,
	0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6e, 0x0a, 0x1b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8d, 0x02, 0x0a, 0x1c, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb8, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x11, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3,
	0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3,
	0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xc6, 0x03, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x94, 0x01, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x42, 0x46, 0xf2, 0xf8, 0xb3, 0x07, 0x41, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x28, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x12,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x65,
	0x70, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xb2, 0xf4, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69,
	0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x73, 0x3a, 0x76, 0xfa, 0xf8, 0xb3, 0x07, 0x71, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0xc2, 0xf3, 0xb3, 0x07, 0x61, 0xa2, 0xf3, 0xb3, 0x07, 0x2a, 0x74, 0x66, 0x5f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x74, 0x78, 0x74, 0xaa, 0xf3, 0xb3, 0x07, 0x2d, 0x74, 0x66, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x78, 0x74, 0xd2, 0xf3, 0xb3, 0x07, 0x01, 0x2a, 0x22,
	0xd5, 0x02, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x2a, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x44, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x73, 0x6b, 0x69,
	0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x42, 0x37, 0xf2, 0xf8, 0xb3, 0x07, 0x32, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x12,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x3a, 0x5e, 0xfa, 0xf8, 0xb3, 0x07, 0x59, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x40, 0xf2, 0xf3, 0xb3, 0x07, 0x1e, 0x0a, 0x12, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0xfa, 0xf3, 0xb3, 0x07, 0x18,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70,
	0x45, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0xd2, 0xf3, 0xb3, 0x07, 0x01, 0x2a, 0xd2, 0xf3,
	0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x22, 0x83, 0x02, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x19, 0xf2, 0xf8, 0xb3, 0x07, 0x14, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xb2,
	0xf4, 0xb3, 0x07, 0x0a, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x62, 0xfa, 0xf8, 0xb3, 0x07, 0x5d,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x44, 0xf2, 0xf3, 0xb3, 0x07, 0x1e, 0x0a,
	0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0xfa, 0xf3, 0xb3,
	0x07, 0x1c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0xd2, 0xf3,
	0xb3, 0x07, 0x01, 0x2a, 0xd2, 0xf3, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x32, 0xcb, 0x05,
	0x0a, 0x11, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x12, 0x7f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xf9, 0xb3, 0x07, 0x09, 0xa2, 0xf3, 0xb3, 0x07, 0x04,
	0x70, 0x6f, 0x73, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x73, 0x12, 0x79, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xf9,
	0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1f,
	0xaa, 0xf3, 0xb3, 0x07, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x81, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xf9, 0xb3, 0x07, 0x0b, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x12, 0x7e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03,
	0x70, 0x75, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x12, 0x78, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3,
	0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x1a, 0x3c, 0xca,
	0xf9, 0xb3, 0x07, 0x15, 0xc2, 0xf9, 0xb3, 0x07, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0xca, 0xf9, 0xb3, 0x07, 0x08, 0xd2, 0xf9,
	0xb3, 0x07, 0x03, 0x61, 0x66, 0x2d, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xe8, 0xf9, 0xb3, 0x07, 0x01,
	0xca, 0xf9, 0xb3, 0x07, 0x06, 0xca, 0xf9, 0xb3, 0x07, 0x01, 0x2a, 0x42, 0x6d, 0x0a, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62,
	0x69, 0x6e, 0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64,
	0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_approval_workflows_proto_rawDescOnce sync.Once
	file_approval_workflows_proto_rawDescData = file_approval_workflows_proto_rawDesc
)

func file_approval_workflows_proto_rawDescGZIP() []byte {
	file_approval_workflows_proto_rawDescOnce.Do(func() {
		file_approval_workflows_proto_rawDescData = protoimpl.X.CompressGZIP(file_approval_workflows_proto_rawDescData)
	})
	return file_approval_workflows_proto_rawDescData
}

var file_approval_workflows_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_approval_workflows_proto_goTypes = []interface{}{
	(*ApprovalWorkflowCreateRequest)(nil),  // 0: v1.ApprovalWorkflowCreateRequest
	(*ApprovalWorkflowCreateResponse)(nil), // 1: v1.ApprovalWorkflowCreateResponse
	(*ApprovalWorkflowGetRequest)(nil),     // 2: v1.ApprovalWorkflowGetRequest
	(*ApprovalWorkflowGetResponse)(nil),    // 3: v1.ApprovalWorkflowGetResponse
	(*ApprovalWorkflowUpdateRequest)(nil),  // 4: v1.ApprovalWorkflowUpdateRequest
	(*ApprovalWorkflowUpdateResponse)(nil), // 5: v1.ApprovalWorkflowUpdateResponse
	(*ApprovalWorkflowDeleteRequest)(nil),  // 6: v1.ApprovalWorkflowDeleteRequest
	(*ApprovalWorkflowDeleteResponse)(nil), // 7: v1.ApprovalWorkflowDeleteResponse
	(*ApprovalWorkflowListRequest)(nil),    // 8: v1.ApprovalWorkflowListRequest
	(*ApprovalWorkflowListResponse)(nil),   // 9: v1.ApprovalWorkflowListResponse
	(*ApprovalWorkflow)(nil),               // 10: v1.ApprovalWorkflow
	(*ApprovalFlowStep)(nil),               // 11: v1.ApprovalFlowStep
	(*ApprovalFlowApprover)(nil),           // 12: v1.ApprovalFlowApprover
	(*CreateRequestMetadata)(nil),          // 13: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),         // 14: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),              // 15: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),             // 16: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),            // 17: v1.GetResponseMetadata
	(*UpdateRequestMetadata)(nil),          // 18: v1.UpdateRequestMetadata
	(*UpdateResponseMetadata)(nil),         // 19: v1.UpdateResponseMetadata
	(*DeleteRequestMetadata)(nil),          // 20: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),         // 21: v1.DeleteResponseMetadata
	(*ListRequestMetadata)(nil),            // 22: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),           // 23: v1.ListResponseMetadata
	(*durationpb.Duration)(nil),            // 24: google.protobuf.Duration
}
var file_approval_workflows_proto_depIdxs = []int32{
	13, // 0: v1.ApprovalWorkflowCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	10, // 1: v1.ApprovalWorkflowCreateRequest.approval_workflow:type_name -> v1.ApprovalWorkflow
	14, // 2: v1.ApprovalWorkflowCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	10, // 3: v1.ApprovalWorkflowCreateResponse.approval_workflow:type_name -> v1.ApprovalWorkflow
	15, // 4: v1.ApprovalWorkflowCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	16, // 5: v1.ApprovalWorkflowGetRequest.meta:type_name -> v1.GetRequestMetadata
	17, // 6: v1.ApprovalWorkflowGetResponse.meta:type_name -> v1.GetResponseMetadata
	10, // 7: v1.ApprovalWorkflowGetResponse.approval_workflow:type_name -> v1.ApprovalWorkflow
	15, // 8: v1.ApprovalWorkflowGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	18, // 9: v1.ApprovalWorkflowUpdateRequest.meta:type_name -> v1.UpdateRequestMetadata
	10, // 10: v1.ApprovalWorkflowUpdateRequest.approval_workflow:type_name -> v1.ApprovalWorkflow
	19, // 11: v1.ApprovalWorkflowUpdateResponse.meta:type_name -> v1.UpdateResponseMetadata
	10, // 12: v1.ApprovalWorkflowUpdateResponse.approval_workflow:type_name -> v1.ApprovalWorkflow
	15, // 13: v1.ApprovalWorkflowUpdateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	20, // 14: v1.ApprovalWorkflowDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	21, // 15: v1.ApprovalWorkflowDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	15, // 16: v1.ApprovalWorkflowDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	22, // 17: v1.ApprovalWorkflowListRequest.meta:type_name -> v1.ListRequestMetadata
	23, // 18: v1.ApprovalWorkflowListResponse.meta:type_name -> v1.ListResponseMetadata
	10, // 19: v1.ApprovalWorkflowListResponse.approval_workflows:type_name -> v1.ApprovalWorkflow
	15, // 20: v1.ApprovalWorkflowListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	11, // 21: v1.ApprovalWorkflow.approval_workflow_steps:type_name -> v1.ApprovalFlowStep
	24, // 22: v1.ApprovalFlowStep.skip_after:type_name -> google.protobuf.Duration
	12, // 23: v1.ApprovalFlowStep.approvers:type_name -> v1.ApprovalFlowApprover
	0,  // 24: v1.ApprovalWorkflows.Create:input_type -> v1.ApprovalWorkflowCreateRequest
	2,  // 25: v1.ApprovalWorkflows.Get:input_type -> v1.ApprovalWorkflowGetRequest
	6,  // 26: v1.ApprovalWorkflows.Delete:input_type -> v1.ApprovalWorkflowDeleteRequest
	4,  // 27: v1.ApprovalWorkflows.Update:input_type -> v1.ApprovalWorkflowUpdateRequest
	8,  // 28: v1.ApprovalWorkflows.List:input_type -> v1.ApprovalWorkflowListRequest
	1,  // 29: v1.ApprovalWorkflows.Create:output_type -> v1.ApprovalWorkflowCreateResponse
	3,  // 30: v1.ApprovalWorkflows.Get:output_type -> v1.ApprovalWorkflowGetResponse
	7,  // 31: v1.ApprovalWorkflows.Delete:output_type -> v1.ApprovalWorkflowDeleteResponse
	5,  // 32: v1.ApprovalWorkflows.Update:output_type -> v1.ApprovalWorkflowUpdateResponse
	9,  // 33: v1.ApprovalWorkflows.List:output_type -> v1.ApprovalWorkflowListResponse
	29, // [29:34] is the sub-list for method output_type
	24, // [24:29] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_approval_workflows_proto_init() }
func file_approval_workflows_proto_init() {
	if File_approval_workflows_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_approval_workflows_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalFlowStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflows_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalFlowApprover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_approval_workflows_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_approval_workflows_proto_goTypes,
		DependencyIndexes: file_approval_workflows_proto_depIdxs,
		MessageInfos:      file_approval_workflows_proto_msgTypes,
	}.Build()
	File_approval_workflows_proto = out.File
	file_approval_workflows_proto_rawDesc = nil
	file_approval_workflows_proto_goTypes = nil
	file_approval_workflows_proto_depIdxs = nil
}
