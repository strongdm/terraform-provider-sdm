// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: secret_store_types.proto

// Code generated by protogen. DO NOT EDIT.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A SecretStore is a server where resource secrets (passwords, keys) are stored.
// Coming soon support for HashiCorp Vault and AWS Secret Store.
type SecretStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SecretStore:
	//
	//	*SecretStore_Aws
	//	*SecretStore_AwsCertX_509
	//	*SecretStore_ActiveDirectory
	//	*SecretStore_Azure
	//	*SecretStore_CyberarkConjur
	//	*SecretStore_CyberarkPam
	//	*SecretStore_CyberarkPamExperimental
	//	*SecretStore_Delinea
	//	*SecretStore_Gcp
	//	*SecretStore_GcpCertX_509
	//	*SecretStore_KeyfactorSsh
	//	*SecretStore_KeyfactorX_509
	//	*SecretStore_VaultAwsec_2
	//	*SecretStore_VaultAwsiam
	//	*SecretStore_VaultAppRole
	//	*SecretStore_VaultAppRoleCertSsh
	//	*SecretStore_VaultAppRoleCertX_509
	//	*SecretStore_VaultTls
	//	*SecretStore_VaultTlsCertSsh
	//	*SecretStore_VaultTlsCertX_509
	//	*SecretStore_VaultToken
	//	*SecretStore_VaultTokenCertSsh
	//	*SecretStore_VaultTokenCertX_509
	SecretStore isSecretStore_SecretStore `protobuf_oneof:"secret_store"`
}

func (x *SecretStore) Reset() {
	*x = SecretStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretStore) ProtoMessage() {}

func (x *SecretStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretStore.ProtoReflect.Descriptor instead.
func (*SecretStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{0}
}

func (m *SecretStore) GetSecretStore() isSecretStore_SecretStore {
	if m != nil {
		return m.SecretStore
	}
	return nil
}

func (x *SecretStore) GetAws() *AWSStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Aws); ok {
		return x.Aws
	}
	return nil
}

func (x *SecretStore) GetAwsCertX_509() *AWSCertX509Store {
	if x, ok := x.GetSecretStore().(*SecretStore_AwsCertX_509); ok {
		return x.AwsCertX_509
	}
	return nil
}

func (x *SecretStore) GetActiveDirectory() *ActiveDirectoryStore {
	if x, ok := x.GetSecretStore().(*SecretStore_ActiveDirectory); ok {
		return x.ActiveDirectory
	}
	return nil
}

func (x *SecretStore) GetAzure() *AzureStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Azure); ok {
		return x.Azure
	}
	return nil
}

func (x *SecretStore) GetCyberarkConjur() *CyberarkConjurStore {
	if x, ok := x.GetSecretStore().(*SecretStore_CyberarkConjur); ok {
		return x.CyberarkConjur
	}
	return nil
}

func (x *SecretStore) GetCyberarkPam() *CyberarkPAMStore {
	if x, ok := x.GetSecretStore().(*SecretStore_CyberarkPam); ok {
		return x.CyberarkPam
	}
	return nil
}

func (x *SecretStore) GetCyberarkPamExperimental() *CyberarkPAMExperimentalStore {
	if x, ok := x.GetSecretStore().(*SecretStore_CyberarkPamExperimental); ok {
		return x.CyberarkPamExperimental
	}
	return nil
}

func (x *SecretStore) GetDelinea() *DelineaStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Delinea); ok {
		return x.Delinea
	}
	return nil
}

func (x *SecretStore) GetGcp() *GCPStore {
	if x, ok := x.GetSecretStore().(*SecretStore_Gcp); ok {
		return x.Gcp
	}
	return nil
}

func (x *SecretStore) GetGcpCertX_509() *GCPCertX509Store {
	if x, ok := x.GetSecretStore().(*SecretStore_GcpCertX_509); ok {
		return x.GcpCertX_509
	}
	return nil
}

func (x *SecretStore) GetKeyfactorSsh() *KeyfactorSSHStore {
	if x, ok := x.GetSecretStore().(*SecretStore_KeyfactorSsh); ok {
		return x.KeyfactorSsh
	}
	return nil
}

func (x *SecretStore) GetKeyfactorX_509() *KeyfactorX509Store {
	if x, ok := x.GetSecretStore().(*SecretStore_KeyfactorX_509); ok {
		return x.KeyfactorX_509
	}
	return nil
}

func (x *SecretStore) GetVaultAwsec_2() *VaultAWSEC2Store {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultAwsec_2); ok {
		return x.VaultAwsec_2
	}
	return nil
}

func (x *SecretStore) GetVaultAwsiam() *VaultAWSIAMStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultAwsiam); ok {
		return x.VaultAwsiam
	}
	return nil
}

func (x *SecretStore) GetVaultAppRole() *VaultAppRoleStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultAppRole); ok {
		return x.VaultAppRole
	}
	return nil
}

func (x *SecretStore) GetVaultAppRoleCertSsh() *VaultAppRoleCertSSHStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultAppRoleCertSsh); ok {
		return x.VaultAppRoleCertSsh
	}
	return nil
}

func (x *SecretStore) GetVaultAppRoleCertX_509() *VaultAppRoleCertX509Store {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultAppRoleCertX_509); ok {
		return x.VaultAppRoleCertX_509
	}
	return nil
}

func (x *SecretStore) GetVaultTls() *VaultTLSStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTls); ok {
		return x.VaultTls
	}
	return nil
}

func (x *SecretStore) GetVaultTlsCertSsh() *VaultTLSCertSSHStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTlsCertSsh); ok {
		return x.VaultTlsCertSsh
	}
	return nil
}

func (x *SecretStore) GetVaultTlsCertX_509() *VaultTLSCertX509Store {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTlsCertX_509); ok {
		return x.VaultTlsCertX_509
	}
	return nil
}

func (x *SecretStore) GetVaultToken() *VaultTokenStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultToken); ok {
		return x.VaultToken
	}
	return nil
}

func (x *SecretStore) GetVaultTokenCertSsh() *VaultTokenCertSSHStore {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTokenCertSsh); ok {
		return x.VaultTokenCertSsh
	}
	return nil
}

func (x *SecretStore) GetVaultTokenCertX_509() *VaultTokenCertX509Store {
	if x, ok := x.GetSecretStore().(*SecretStore_VaultTokenCertX_509); ok {
		return x.VaultTokenCertX_509
	}
	return nil
}

type isSecretStore_SecretStore interface {
	isSecretStore_SecretStore()
}

type SecretStore_Aws struct {
	Aws *AWSStore `protobuf:"bytes,3,opt,name=aws,proto3,oneof"`
}

type SecretStore_AwsCertX_509 struct {
	AwsCertX_509 *AWSCertX509Store `protobuf:"bytes,30,opt,name=aws_cert_x_509,json=awsCertX509,proto3,oneof"`
}

type SecretStore_ActiveDirectory struct {
	ActiveDirectory *ActiveDirectoryStore `protobuf:"bytes,666,opt,name=active_directory,json=activeDirectory,proto3,oneof"`
}

type SecretStore_Azure struct {
	Azure *AzureStore `protobuf:"bytes,101,opt,name=azure,proto3,oneof"`
}

type SecretStore_CyberarkConjur struct {
	CyberarkConjur *CyberarkConjurStore `protobuf:"bytes,301,opt,name=cyberark_conjur,json=cyberarkConjur,proto3,oneof"`
}

type SecretStore_CyberarkPam struct {
	CyberarkPam *CyberarkPAMStore `protobuf:"bytes,303,opt,name=cyberark_pam,json=cyberarkPam,proto3,oneof"`
}

type SecretStore_CyberarkPamExperimental struct {
	CyberarkPamExperimental *CyberarkPAMExperimentalStore `protobuf:"bytes,302,opt,name=cyberark_pam_experimental,json=cyberarkPamExperimental,proto3,oneof"`
}

type SecretStore_Delinea struct {
	Delinea *DelineaStore `protobuf:"bytes,2900,opt,name=delinea,proto3,oneof"`
}

type SecretStore_Gcp struct {
	Gcp *GCPStore `protobuf:"bytes,201,opt,name=gcp,proto3,oneof"`
}

type SecretStore_GcpCertX_509 struct {
	GcpCertX_509 *GCPCertX509Store `protobuf:"bytes,202,opt,name=gcp_cert_x_509,json=gcpCertX509,proto3,oneof"`
}

type SecretStore_KeyfactorSsh struct {
	KeyfactorSsh *KeyfactorSSHStore `protobuf:"bytes,210,opt,name=keyfactor_ssh,json=keyfactorSsh,proto3,oneof"`
}

type SecretStore_KeyfactorX_509 struct {
	KeyfactorX_509 *KeyfactorX509Store `protobuf:"bytes,200,opt,name=keyfactor_x_509,json=keyfactorX509,proto3,oneof"`
}

type SecretStore_VaultAwsec_2 struct {
	VaultAwsec_2 *VaultAWSEC2Store `protobuf:"bytes,97,opt,name=vault_awsec_2,json=vaultAwsec2,proto3,oneof"`
}

type SecretStore_VaultAwsiam struct {
	VaultAwsiam *VaultAWSIAMStore `protobuf:"bytes,96,opt,name=vault_awsiam,json=vaultAwsiam,proto3,oneof"`
}

type SecretStore_VaultAppRole struct {
	VaultAppRole *VaultAppRoleStore `protobuf:"bytes,4,opt,name=vault_app_role,json=vaultAppRole,proto3,oneof"`
}

type SecretStore_VaultAppRoleCertSsh struct {
	VaultAppRoleCertSsh *VaultAppRoleCertSSHStore `protobuf:"bytes,94,opt,name=vault_app_role_cert_ssh,json=vaultAppRoleCertSsh,proto3,oneof"`
}

type SecretStore_VaultAppRoleCertX_509 struct {
	VaultAppRoleCertX_509 *VaultAppRoleCertX509Store `protobuf:"bytes,95,opt,name=vault_app_role_cert_x_509,json=vaultAppRoleCertX509,proto3,oneof"`
}

type SecretStore_VaultTls struct {
	VaultTls *VaultTLSStore `protobuf:"bytes,1,opt,name=vault_tls,json=vaultTls,proto3,oneof"`
}

type SecretStore_VaultTlsCertSsh struct {
	VaultTlsCertSsh *VaultTLSCertSSHStore `protobuf:"bytes,92,opt,name=vault_tls_cert_ssh,json=vaultTlsCertSsh,proto3,oneof"`
}

type SecretStore_VaultTlsCertX_509 struct {
	VaultTlsCertX_509 *VaultTLSCertX509Store `protobuf:"bytes,93,opt,name=vault_tls_cert_x_509,json=vaultTlsCertX509,proto3,oneof"`
}

type SecretStore_VaultToken struct {
	VaultToken *VaultTokenStore `protobuf:"bytes,2,opt,name=vault_token,json=vaultToken,proto3,oneof"`
}

type SecretStore_VaultTokenCertSsh struct {
	VaultTokenCertSsh *VaultTokenCertSSHStore `protobuf:"bytes,90,opt,name=vault_token_cert_ssh,json=vaultTokenCertSsh,proto3,oneof"`
}

type SecretStore_VaultTokenCertX_509 struct {
	VaultTokenCertX_509 *VaultTokenCertX509Store `protobuf:"bytes,91,opt,name=vault_token_cert_x_509,json=vaultTokenCertX509,proto3,oneof"`
}

func (*SecretStore_Aws) isSecretStore_SecretStore() {}

func (*SecretStore_AwsCertX_509) isSecretStore_SecretStore() {}

func (*SecretStore_ActiveDirectory) isSecretStore_SecretStore() {}

func (*SecretStore_Azure) isSecretStore_SecretStore() {}

func (*SecretStore_CyberarkConjur) isSecretStore_SecretStore() {}

func (*SecretStore_CyberarkPam) isSecretStore_SecretStore() {}

func (*SecretStore_CyberarkPamExperimental) isSecretStore_SecretStore() {}

func (*SecretStore_Delinea) isSecretStore_SecretStore() {}

func (*SecretStore_Gcp) isSecretStore_SecretStore() {}

func (*SecretStore_GcpCertX_509) isSecretStore_SecretStore() {}

func (*SecretStore_KeyfactorSsh) isSecretStore_SecretStore() {}

func (*SecretStore_KeyfactorX_509) isSecretStore_SecretStore() {}

func (*SecretStore_VaultAwsec_2) isSecretStore_SecretStore() {}

func (*SecretStore_VaultAwsiam) isSecretStore_SecretStore() {}

func (*SecretStore_VaultAppRole) isSecretStore_SecretStore() {}

func (*SecretStore_VaultAppRoleCertSsh) isSecretStore_SecretStore() {}

func (*SecretStore_VaultAppRoleCertX_509) isSecretStore_SecretStore() {}

func (*SecretStore_VaultTls) isSecretStore_SecretStore() {}

func (*SecretStore_VaultTlsCertSsh) isSecretStore_SecretStore() {}

func (*SecretStore_VaultTlsCertX_509) isSecretStore_SecretStore() {}

func (*SecretStore_VaultToken) isSecretStore_SecretStore() {}

func (*SecretStore_VaultTokenCertSsh) isSecretStore_SecretStore() {}

func (*SecretStore_VaultTokenCertX_509) isSecretStore_SecretStore() {}

type AWSStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The AWS region to target e.g. us-east-1
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AWSStore) Reset() {
	*x = AWSStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSStore) ProtoMessage() {}

func (x *AWSStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSStore.ProtoReflect.Descriptor instead.
func (*AWSStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{1}
}

func (x *AWSStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSStore) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AWSCertX509Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The ARN of the CA in AWS Private CA
	CaArn string `protobuf:"bytes,5,opt,name=caArn,proto3" json:"caArn,omitempty"`
	// The ARN of the AWS certificate template for requested certificates. Must allow SAN, key usage, and ext key usage passthrough from CSR
	CertificateTemplateArn string `protobuf:"bytes,7,opt,name=certificateTemplateArn,proto3" json:"certificateTemplateArn,omitempty"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTTLMinutes int32 `protobuf:"varint,8,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The AWS region to target e.g. us-east-1
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key. e.g. SHA256WITHRSA
	SigningAlgo string `protobuf:"bytes,6,opt,name=signingAlgo,proto3" json:"signingAlgo,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AWSCertX509Store) Reset() {
	*x = AWSCertX509Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSCertX509Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSCertX509Store) ProtoMessage() {}

func (x *AWSCertX509Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSCertX509Store.ProtoReflect.Descriptor instead.
func (*AWSCertX509Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{2}
}

func (x *AWSCertX509Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AWSCertX509Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AWSCertX509Store) GetCaArn() string {
	if x != nil {
		return x.CaArn
	}
	return ""
}

func (x *AWSCertX509Store) GetCertificateTemplateArn() string {
	if x != nil {
		return x.CertificateTemplateArn
	}
	return ""
}

func (x *AWSCertX509Store) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *AWSCertX509Store) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AWSCertX509Store) GetSigningAlgo() string {
	if x != nil {
		return x.SigningAlgo
	}
	return ""
}

func (x *AWSCertX509Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type ActiveDirectoryStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Hostname of server that is hosting NDES (Network Device Enrollment Services).
	// Often this is the same host as Active Directory Certificate Services
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ActiveDirectoryStore) Reset() {
	*x = ActiveDirectoryStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveDirectoryStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveDirectoryStore) ProtoMessage() {}

func (x *ActiveDirectoryStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveDirectoryStore.ProtoReflect.Descriptor instead.
func (*ActiveDirectoryStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{3}
}

func (x *ActiveDirectoryStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveDirectoryStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActiveDirectoryStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *ActiveDirectoryStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AzureStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The URI of the key vault to target e.g. https://myvault.vault.azure.net
	VaultUri string `protobuf:"bytes,3,opt,name=vault_uri,json=vaultUri,proto3" json:"vault_uri,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AzureStore) Reset() {
	*x = AzureStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureStore) ProtoMessage() {}

func (x *AzureStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureStore.ProtoReflect.Descriptor instead.
func (*AzureStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{4}
}

func (x *AzureStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AzureStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AzureStore) GetVaultUri() string {
	if x != nil {
		return x.VaultUri
	}
	return ""
}

func (x *AzureStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CyberarkConjurStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The URL of the Cyberark instance
	AppURL string `protobuf:"bytes,3,opt,name=appURL,proto3" json:"appURL,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CyberarkConjurStore) Reset() {
	*x = CyberarkConjurStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyberarkConjurStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyberarkConjurStore) ProtoMessage() {}

func (x *CyberarkConjurStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyberarkConjurStore.ProtoReflect.Descriptor instead.
func (*CyberarkConjurStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{5}
}

func (x *CyberarkConjurStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyberarkConjurStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CyberarkConjurStore) GetAppURL() string {
	if x != nil {
		return x.AppURL
	}
	return ""
}

func (x *CyberarkConjurStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CyberarkPAMStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The URL of the Cyberark instance
	AppURL string `protobuf:"bytes,3,opt,name=appURL,proto3" json:"appURL,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CyberarkPAMStore) Reset() {
	*x = CyberarkPAMStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyberarkPAMStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyberarkPAMStore) ProtoMessage() {}

func (x *CyberarkPAMStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyberarkPAMStore.ProtoReflect.Descriptor instead.
func (*CyberarkPAMStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{6}
}

func (x *CyberarkPAMStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyberarkPAMStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CyberarkPAMStore) GetAppURL() string {
	if x != nil {
		return x.AppURL
	}
	return ""
}

func (x *CyberarkPAMStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CyberarkPAMExperimentalStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The URL of the Cyberark instance
	AppURL string `protobuf:"bytes,3,opt,name=appURL,proto3" json:"appURL,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CyberarkPAMExperimentalStore) Reset() {
	*x = CyberarkPAMExperimentalStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CyberarkPAMExperimentalStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CyberarkPAMExperimentalStore) ProtoMessage() {}

func (x *CyberarkPAMExperimentalStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CyberarkPAMExperimentalStore.ProtoReflect.Descriptor instead.
func (*CyberarkPAMExperimentalStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{7}
}

func (x *CyberarkPAMExperimentalStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CyberarkPAMExperimentalStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CyberarkPAMExperimentalStore) GetAppURL() string {
	if x != nil {
		return x.AppURL
	}
	return ""
}

func (x *CyberarkPAMExperimentalStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type DelineaStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The URL of the Delinea instance
	ServerUrl string `protobuf:"bytes,3,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	// The tenant name to target
	TenantName string `protobuf:"bytes,4,opt,name=tenant_name,json=tenantName,proto3" json:"tenant_name,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DelineaStore) Reset() {
	*x = DelineaStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelineaStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelineaStore) ProtoMessage() {}

func (x *DelineaStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelineaStore.ProtoReflect.Descriptor instead.
func (*DelineaStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{8}
}

func (x *DelineaStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DelineaStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DelineaStore) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *DelineaStore) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

func (x *DelineaStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GCPStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The GCP project ID to target.
	ProjectID string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GCPStore) Reset() {
	*x = GCPStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPStore) ProtoMessage() {}

func (x *GCPStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPStore.ProtoReflect.Descriptor instead.
func (*GCPStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{9}
}

func (x *GCPStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GCPStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GCPStore) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GCPStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GCPCertX509Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the target CA
	CaID string `protobuf:"bytes,6,opt,name=caID,proto3" json:"caID,omitempty"`
	// The ID of the target CA pool
	CaPoolID string `protobuf:"bytes,5,opt,name=caPoolID,proto3" json:"caPoolID,omitempty"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTTLMinutes int32 `protobuf:"varint,7,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The Region for the CA in GCP format e.g. us-west1
	Location string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// The GCP project ID to target.
	ProjectID string `protobuf:"bytes,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GCPCertX509Store) Reset() {
	*x = GCPCertX509Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCPCertX509Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCPCertX509Store) ProtoMessage() {}

func (x *GCPCertX509Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCPCertX509Store.ProtoReflect.Descriptor instead.
func (*GCPCertX509Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{10}
}

func (x *GCPCertX509Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GCPCertX509Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GCPCertX509Store) GetCaID() string {
	if x != nil {
		return x.CaID
	}
	return ""
}

func (x *GCPCertX509Store) GetCaPoolID() string {
	if x != nil {
		return x.CaPoolID
	}
	return ""
}

func (x *GCPCertX509Store) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *GCPCertX509Store) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GCPCertX509Store) GetProjectID() string {
	if x != nil {
		return x.ProjectID
	}
	return ""
}

func (x *GCPCertX509Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type KeyfactorSSHStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection.
	// This is not required if the CA is trusted by the host operating system. This should be a PEM
	// formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath string `protobuf:"bytes,6,opt,name=ca_file_path,json=caFilePath,proto3" json:"ca_file_path,omitempty"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that
	// is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private
	// key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath string `protobuf:"bytes,4,opt,name=certificate_file_path,json=certificateFilePath,proto3" json:"certificate_file_path,omitempty"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName string `protobuf:"bytes,10,opt,name=default_certificate_authority_name,json=defaultCertificateAuthorityName,proto3" json:"default_certificate_authority_name,omitempty"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName string `protobuf:"bytes,8,opt,name=default_certificate_profile_name,json=defaultCertificateProfileName,proto3" json:"default_certificate_profile_name,omitempty"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName string `protobuf:"bytes,9,opt,name=default_end_entity_profile_name,json=defaultEndEntityProfileName,proto3" json:"default_end_entity_profile_name,omitempty"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar string `protobuf:"bytes,12,opt,name=enrollment_code_env_var,json=enrollmentCodeEnvVar,proto3" json:"enrollment_code_env_var,omitempty"`
	// username that used by the EJBCA during enrollment. This can be left out.
	// If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar string `protobuf:"bytes,11,opt,name=enrollment_username_env_var,json=enrollmentUsernameEnvVar,proto3" json:"enrollment_username_env_var,omitempty"`
	// Path to private key in PEM format. This file should contain the private key associated with the
	// client certificate configured in CertificateFile.
	KeyFilePath string `protobuf:"bytes,5,opt,name=key_file_path,json=keyFilePath,proto3" json:"key_file_path,omitempty"`
	// the host of the Key Factor CA
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *KeyfactorSSHStore) Reset() {
	*x = KeyfactorSSHStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyfactorSSHStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyfactorSSHStore) ProtoMessage() {}

func (x *KeyfactorSSHStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyfactorSSHStore.ProtoReflect.Descriptor instead.
func (*KeyfactorSSHStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{11}
}

func (x *KeyfactorSSHStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyfactorSSHStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyfactorSSHStore) GetCaFilePath() string {
	if x != nil {
		return x.CaFilePath
	}
	return ""
}

func (x *KeyfactorSSHStore) GetCertificateFilePath() string {
	if x != nil {
		return x.CertificateFilePath
	}
	return ""
}

func (x *KeyfactorSSHStore) GetDefaultCertificateAuthorityName() string {
	if x != nil {
		return x.DefaultCertificateAuthorityName
	}
	return ""
}

func (x *KeyfactorSSHStore) GetDefaultCertificateProfileName() string {
	if x != nil {
		return x.DefaultCertificateProfileName
	}
	return ""
}

func (x *KeyfactorSSHStore) GetDefaultEndEntityProfileName() string {
	if x != nil {
		return x.DefaultEndEntityProfileName
	}
	return ""
}

func (x *KeyfactorSSHStore) GetEnrollmentCodeEnvVar() string {
	if x != nil {
		return x.EnrollmentCodeEnvVar
	}
	return ""
}

func (x *KeyfactorSSHStore) GetEnrollmentUsernameEnvVar() string {
	if x != nil {
		return x.EnrollmentUsernameEnvVar
	}
	return ""
}

func (x *KeyfactorSSHStore) GetKeyFilePath() string {
	if x != nil {
		return x.KeyFilePath
	}
	return ""
}

func (x *KeyfactorSSHStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *KeyfactorSSHStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type KeyfactorX509Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Path to the root CA that signed the certificate passed to the client for HTTPS connection.
	// This is not required if the CA is trusted by the host operating system. This should be a PEM
	// formatted certificate, and doesn't necessarily have to be the CA that signed CertificateFile.
	CaFilePath string `protobuf:"bytes,6,opt,name=ca_file_path,json=caFilePath,proto3" json:"ca_file_path,omitempty"`
	// Path to client certificate in PEM format. This certificate must contain a client certificate that
	// is recognized by the EJBCA instance represented by Hostname. This PEM file may also contain the private
	// key associated with the certificate, but KeyFile can also be set to configure the private key.
	CertificateFilePath string `protobuf:"bytes,4,opt,name=certificate_file_path,json=certificateFilePath,proto3" json:"certificate_file_path,omitempty"`
	// Name of EJBCA certificate authority that will enroll CSR.
	DefaultCertificateAuthorityName string `protobuf:"bytes,10,opt,name=default_certificate_authority_name,json=defaultCertificateAuthorityName,proto3" json:"default_certificate_authority_name,omitempty"`
	// Certificate profile name that EJBCA will enroll the CSR with.
	DefaultCertificateProfileName string `protobuf:"bytes,8,opt,name=default_certificate_profile_name,json=defaultCertificateProfileName,proto3" json:"default_certificate_profile_name,omitempty"`
	// End entity profile that EJBCA will enroll the CSR with.
	DefaultEndEntityProfileName string `protobuf:"bytes,9,opt,name=default_end_entity_profile_name,json=defaultEndEntityProfileName,proto3" json:"default_end_entity_profile_name,omitempty"`
	// code used by EJBCA during enrollment. May be left blank if no code is required.
	EnrollmentCodeEnvVar string `protobuf:"bytes,12,opt,name=enrollment_code_env_var,json=enrollmentCodeEnvVar,proto3" json:"enrollment_code_env_var,omitempty"`
	// username that used by the EJBCA during enrollment. This can be left out.
	// If so, the username must be auto-generated on the Keyfactor side.
	EnrollmentUsernameEnvVar string `protobuf:"bytes,11,opt,name=enrollment_username_env_var,json=enrollmentUsernameEnvVar,proto3" json:"enrollment_username_env_var,omitempty"`
	// Path to private key in PEM format. This file should contain the private key associated with the
	// client certificate configured in CertificateFile.
	KeyFilePath string `protobuf:"bytes,5,opt,name=key_file_path,json=keyFilePath,proto3" json:"key_file_path,omitempty"`
	// the host of the Key Factor CA
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,32771,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *KeyfactorX509Store) Reset() {
	*x = KeyfactorX509Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyfactorX509Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyfactorX509Store) ProtoMessage() {}

func (x *KeyfactorX509Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyfactorX509Store.ProtoReflect.Descriptor instead.
func (*KeyfactorX509Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{12}
}

func (x *KeyfactorX509Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyfactorX509Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyfactorX509Store) GetCaFilePath() string {
	if x != nil {
		return x.CaFilePath
	}
	return ""
}

func (x *KeyfactorX509Store) GetCertificateFilePath() string {
	if x != nil {
		return x.CertificateFilePath
	}
	return ""
}

func (x *KeyfactorX509Store) GetDefaultCertificateAuthorityName() string {
	if x != nil {
		return x.DefaultCertificateAuthorityName
	}
	return ""
}

func (x *KeyfactorX509Store) GetDefaultCertificateProfileName() string {
	if x != nil {
		return x.DefaultCertificateProfileName
	}
	return ""
}

func (x *KeyfactorX509Store) GetDefaultEndEntityProfileName() string {
	if x != nil {
		return x.DefaultEndEntityProfileName
	}
	return ""
}

func (x *KeyfactorX509Store) GetEnrollmentCodeEnvVar() string {
	if x != nil {
		return x.EnrollmentCodeEnvVar
	}
	return ""
}

func (x *KeyfactorX509Store) GetEnrollmentUsernameEnvVar() string {
	if x != nil {
		return x.EnrollmentUsernameEnvVar
	}
	return ""
}

func (x *KeyfactorX509Store) GetKeyFilePath() string {
	if x != nil {
		return x.KeyFilePath
	}
	return ""
}

func (x *KeyfactorX509Store) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *KeyfactorX509Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultAWSEC2Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultAWSEC2Store) Reset() {
	*x = VaultAWSEC2Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultAWSEC2Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultAWSEC2Store) ProtoMessage() {}

func (x *VaultAWSEC2Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultAWSEC2Store.ProtoReflect.Descriptor instead.
func (*VaultAWSEC2Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{13}
}

func (x *VaultAWSEC2Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultAWSEC2Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultAWSEC2Store) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultAWSEC2Store) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultAWSEC2Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultAWSIAMStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultAWSIAMStore) Reset() {
	*x = VaultAWSIAMStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultAWSIAMStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultAWSIAMStore) ProtoMessage() {}

func (x *VaultAWSIAMStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultAWSIAMStore.ProtoReflect.Descriptor instead.
func (*VaultAWSIAMStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{14}
}

func (x *VaultAWSIAMStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultAWSIAMStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultAWSIAMStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultAWSIAMStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultAWSIAMStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultAppRoleStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultAppRoleStore) Reset() {
	*x = VaultAppRoleStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultAppRoleStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultAppRoleStore) ProtoMessage() {}

func (x *VaultAppRoleStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultAppRoleStore.ProtoReflect.Descriptor instead.
func (*VaultAppRoleStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{15}
}

func (x *VaultAppRoleStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultAppRoleStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultAppRoleStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultAppRoleStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultAppRoleStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultAppRoleCertSSHStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTTLMinutes int32 `protobuf:"varint,9,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// The signing role to be used for signing certificates
	SigningRole string `protobuf:"bytes,7,opt,name=signing_role,json=signingRole,proto3" json:"signing_role,omitempty"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint string `protobuf:"bytes,6,opt,name=ssh_mount_point,json=sshMountPoint,proto3" json:"ssh_mount_point,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultAppRoleCertSSHStore) Reset() {
	*x = VaultAppRoleCertSSHStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultAppRoleCertSSHStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultAppRoleCertSSHStore) ProtoMessage() {}

func (x *VaultAppRoleCertSSHStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultAppRoleCertSSHStore.ProtoReflect.Descriptor instead.
func (*VaultAppRoleCertSSHStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{16}
}

func (x *VaultAppRoleCertSSHStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultAppRoleCertSSHStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultAppRoleCertSSHStore) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *VaultAppRoleCertSSHStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultAppRoleCertSSHStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultAppRoleCertSSHStore) GetSigningRole() string {
	if x != nil {
		return x.SigningRole
	}
	return ""
}

func (x *VaultAppRoleCertSSHStore) GetSshMountPoint() string {
	if x != nil {
		return x.SshMountPoint
	}
	return ""
}

func (x *VaultAppRoleCertSSHStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultAppRoleCertX509Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The lifetime of certificates issued by this CA in minutes. Recommended value is 5.
	IssuedCertTTLMinutes int32 `protobuf:"varint,9,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint string `protobuf:"bytes,6,opt,name=pki_mount_point,json=pkiMountPoint,proto3" json:"pki_mount_point,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// The signing role to be used for signing certificates
	SigningRole string `protobuf:"bytes,7,opt,name=signing_role,json=signingRole,proto3" json:"signing_role,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultAppRoleCertX509Store) Reset() {
	*x = VaultAppRoleCertX509Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultAppRoleCertX509Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultAppRoleCertX509Store) ProtoMessage() {}

func (x *VaultAppRoleCertX509Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultAppRoleCertX509Store.ProtoReflect.Descriptor instead.
func (*VaultAppRoleCertX509Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{17}
}

func (x *VaultAppRoleCertX509Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultAppRoleCertX509Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultAppRoleCertX509Store) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *VaultAppRoleCertX509Store) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultAppRoleCertX509Store) GetPkiMountPoint() string {
	if x != nil {
		return x.PkiMountPoint
	}
	return ""
}

func (x *VaultAppRoleCertX509Store) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultAppRoleCertX509Store) GetSigningRole() string {
	if x != nil {
		return x.SigningRole
	}
	return ""
}

func (x *VaultAppRoleCertX509Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTLSStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A path to a CA file accessible by a Node
	CACertPath string `protobuf:"bytes,4,opt,name=CA_cert_path,json=CACertPath,proto3" json:"CA_cert_path,omitempty"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath string `protobuf:"bytes,5,opt,name=client_cert_path,json=clientCertPath,proto3" json:"client_cert_path,omitempty"`
	// A path to a client key file accessible by a Node
	ClientKeyPath string `protobuf:"bytes,6,opt,name=client_key_path,json=clientKeyPath,proto3" json:"client_key_path,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTLSStore) Reset() {
	*x = VaultTLSStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTLSStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTLSStore) ProtoMessage() {}

func (x *VaultTLSStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTLSStore.ProtoReflect.Descriptor instead.
func (*VaultTLSStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{18}
}

func (x *VaultTLSStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTLSStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTLSStore) GetCACertPath() string {
	if x != nil {
		return x.CACertPath
	}
	return ""
}

func (x *VaultTLSStore) GetClientCertPath() string {
	if x != nil {
		return x.ClientCertPath
	}
	return ""
}

func (x *VaultTLSStore) GetClientKeyPath() string {
	if x != nil {
		return x.ClientKeyPath
	}
	return ""
}

func (x *VaultTLSStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTLSStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTLSStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTLSCertSSHStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A path to a CA file accessible by a Node
	CACertPath string `protobuf:"bytes,4,opt,name=CA_cert_path,json=CACertPath,proto3" json:"CA_cert_path,omitempty"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath string `protobuf:"bytes,5,opt,name=client_cert_path,json=clientCertPath,proto3" json:"client_cert_path,omitempty"`
	// A path to a client key file accessible by a Node
	ClientKeyPath string `protobuf:"bytes,6,opt,name=client_key_path,json=clientKeyPath,proto3" json:"client_key_path,omitempty"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTTLMinutes int32 `protobuf:"varint,11,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// The signing role to be used for signing certificates
	SigningRole string `protobuf:"bytes,10,opt,name=signing_role,json=signingRole,proto3" json:"signing_role,omitempty"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint string `protobuf:"bytes,9,opt,name=ssh_mount_point,json=sshMountPoint,proto3" json:"ssh_mount_point,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTLSCertSSHStore) Reset() {
	*x = VaultTLSCertSSHStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTLSCertSSHStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTLSCertSSHStore) ProtoMessage() {}

func (x *VaultTLSCertSSHStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTLSCertSSHStore.ProtoReflect.Descriptor instead.
func (*VaultTLSCertSSHStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{19}
}

func (x *VaultTLSCertSSHStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetCACertPath() string {
	if x != nil {
		return x.CACertPath
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetClientCertPath() string {
	if x != nil {
		return x.ClientCertPath
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetClientKeyPath() string {
	if x != nil {
		return x.ClientKeyPath
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *VaultTLSCertSSHStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetSigningRole() string {
	if x != nil {
		return x.SigningRole
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetSshMountPoint() string {
	if x != nil {
		return x.SshMountPoint
	}
	return ""
}

func (x *VaultTLSCertSSHStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTLSCertX509Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A path to a CA file accessible by a Node
	CACertPath string `protobuf:"bytes,4,opt,name=CA_cert_path,json=CACertPath,proto3" json:"CA_cert_path,omitempty"`
	// A path to a client certificate file accessible by a Node
	ClientCertPath string `protobuf:"bytes,5,opt,name=client_cert_path,json=clientCertPath,proto3" json:"client_cert_path,omitempty"`
	// A path to a client key file accessible by a Node
	ClientKeyPath string `protobuf:"bytes,6,opt,name=client_key_path,json=clientKeyPath,proto3" json:"client_key_path,omitempty"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTTLMinutes int32 `protobuf:"varint,11,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,8,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint string `protobuf:"bytes,9,opt,name=pki_mount_point,json=pkiMountPoint,proto3" json:"pki_mount_point,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// The signing role to be used for signing certificates
	SigningRole string `protobuf:"bytes,10,opt,name=signing_role,json=signingRole,proto3" json:"signing_role,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTLSCertX509Store) Reset() {
	*x = VaultTLSCertX509Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTLSCertX509Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTLSCertX509Store) ProtoMessage() {}

func (x *VaultTLSCertX509Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTLSCertX509Store.ProtoReflect.Descriptor instead.
func (*VaultTLSCertX509Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{20}
}

func (x *VaultTLSCertX509Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetCACertPath() string {
	if x != nil {
		return x.CACertPath
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetClientCertPath() string {
	if x != nil {
		return x.ClientCertPath
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetClientKeyPath() string {
	if x != nil {
		return x.ClientKeyPath
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *VaultTLSCertX509Store) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetPkiMountPoint() string {
	if x != nil {
		return x.PkiMountPoint
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetSigningRole() string {
	if x != nil {
		return x.SigningRole
	}
	return ""
}

func (x *VaultTLSCertX509Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTokenStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTokenStore) Reset() {
	*x = VaultTokenStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTokenStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTokenStore) ProtoMessage() {}

func (x *VaultTokenStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTokenStore.ProtoReflect.Descriptor instead.
func (*VaultTokenStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{21}
}

func (x *VaultTokenStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTokenStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTokenStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTokenStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTokenStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTokenCertSSHStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The lifetime of certificates issued by this CA in minutes. Recommended value is 5.
	IssuedCertTTLMinutes int32 `protobuf:"varint,9,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// The signing role to be used for signing certificates
	SigningRole string `protobuf:"bytes,7,opt,name=signing_role,json=signingRole,proto3" json:"signing_role,omitempty"`
	// The mount point of the SSH engine configured with the desired CA
	SshMountPoint string `protobuf:"bytes,6,opt,name=ssh_mount_point,json=sshMountPoint,proto3" json:"ssh_mount_point,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTokenCertSSHStore) Reset() {
	*x = VaultTokenCertSSHStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTokenCertSSHStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTokenCertSSHStore) ProtoMessage() {}

func (x *VaultTokenCertSSHStore) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTokenCertSSHStore.ProtoReflect.Descriptor instead.
func (*VaultTokenCertSSHStore) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{22}
}

func (x *VaultTokenCertSSHStore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTokenCertSSHStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTokenCertSSHStore) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *VaultTokenCertSSHStore) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTokenCertSSHStore) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTokenCertSSHStore) GetSigningRole() string {
	if x != nil {
		return x.SigningRole
	}
	return ""
}

func (x *VaultTokenCertSSHStore) GetSshMountPoint() string {
	if x != nil {
		return x.SshMountPoint
	}
	return ""
}

func (x *VaultTokenCertSSHStore) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type VaultTokenCertX509Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the SecretStore.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the SecretStore.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The lifetime of certificates issued by this CA represented in minutes.
	IssuedCertTTLMinutes int32 `protobuf:"varint,8,opt,name=issuedCertTTLMinutes,proto3" json:"issuedCertTTLMinutes,omitempty"`
	// The namespace to make requests within
	Namespace string `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The mount point of the PKI engine configured with the desired CA
	PkiMountPoint string `protobuf:"bytes,6,opt,name=pki_mount_point,json=pkiMountPoint,proto3" json:"pki_mount_point,omitempty"`
	// The URL of the Vault to target
	ServerAddress string `protobuf:"bytes,3,opt,name=server_address,json=serverAddress,proto3" json:"server_address,omitempty"`
	// The signing role to be used for signing certificates
	SigningRole string `protobuf:"bytes,7,opt,name=signing_role,json=signingRole,proto3" json:"signing_role,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *VaultTokenCertX509Store) Reset() {
	*x = VaultTokenCertX509Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_store_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultTokenCertX509Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultTokenCertX509Store) ProtoMessage() {}

func (x *VaultTokenCertX509Store) ProtoReflect() protoreflect.Message {
	mi := &file_secret_store_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VaultTokenCertX509Store.ProtoReflect.Descriptor instead.
func (*VaultTokenCertX509Store) Descriptor() ([]byte, []int) {
	return file_secret_store_types_proto_rawDescGZIP(), []int{23}
}

func (x *VaultTokenCertX509Store) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VaultTokenCertX509Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VaultTokenCertX509Store) GetIssuedCertTTLMinutes() int32 {
	if x != nil {
		return x.IssuedCertTTLMinutes
	}
	return 0
}

func (x *VaultTokenCertX509Store) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *VaultTokenCertX509Store) GetPkiMountPoint() string {
	if x != nil {
		return x.PkiMountPoint
	}
	return ""
}

func (x *VaultTokenCertX509Store) GetServerAddress() string {
	if x != nil {
		return x.ServerAddress
	}
	return ""
}

func (x *VaultTokenCertX509Store) GetSigningRole() string {
	if x != nil {
		return x.SigningRole
	}
	return ""
}

func (x *VaultTokenCertX509Store) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_secret_store_types_proto protoreflect.FileDescriptor

var file_secret_store_types_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74,
	0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x16, 0x0a, 0x0b, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x61, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x1d, 0xca, 0xf3, 0xb3, 0x07, 0x18,
	0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x03, 0x61, 0x77, 0x73, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x48, 0x00, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12, 0x71, 0x0a, 0x0e, 0x61, 0x77, 0x73,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x5f, 0x35, 0x30, 0x39, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x25, 0xca, 0xf3,
	0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x61, 0x77, 0x73, 0x43, 0x65, 0x72, 0x74, 0x58,
	0x35, 0x30, 0x39, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x77, 0x73, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x12, 0x80, 0x01, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x9a, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x38, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xca, 0xf3, 0xb3, 0x07, 0x24, 0xc2, 0xf4,
	0xb3, 0x07, 0x1f, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x56, 0x0a, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x2e,
	0xf2, 0xf8, 0xb3, 0x07, 0x1f, 0xca, 0xf3, 0xb3, 0x07, 0x1a, 0xc2, 0xf4, 0xb3, 0x07, 0x15, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x05, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00,
	0x52, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x12, 0x7c, 0x0a, 0x0f, 0x63, 0x79, 0x62, 0x65, 0x72,
	0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x37, 0xf2, 0xf8, 0xb3, 0x07,
	0x28, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x63, 0x79, 0x62, 0x65, 0x72,
	0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x12, 0x70, 0x0a, 0x0c, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72,
	0x6b, 0x5f, 0x70, 0x61, 0x6d, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x25, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4,
	0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x0b, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6d, 0x12, 0xa1, 0x01, 0x0a, 0x19, 0x63, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x40,
	0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xca, 0xf3, 0xb3, 0x07, 0x2c, 0xc2, 0xf4, 0xb3, 0x07, 0x27, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x17, 0x63,
	0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x48, 0x00, 0x52, 0x17, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x6d, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x07, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x18, 0xd4, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x30, 0xf2, 0xf8, 0xb3, 0x07, 0x21, 0xca, 0xf3, 0xb3, 0x07, 0x1c, 0xc2, 0xf4, 0xb3, 0x07, 0x17,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x07,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x12, 0x4f, 0x0a, 0x03,
	0x67, 0x63, 0x70, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x43, 0x50, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x1d, 0xca,
	0xf3, 0xb3, 0x07, 0x18, 0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x03, 0x67, 0x63, 0x70, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x03, 0x67, 0x63, 0x70, 0x12, 0x72, 0x0a,
	0x0e, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x5f, 0x35, 0x30, 0x39, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x43, 0x50, 0x43,
	0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x34, 0xf2, 0xf8,
	0xb3, 0x07, 0x25, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x67, 0x63, 0x70,
	0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x63, 0x70, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30,
	0x39, 0x12, 0x74, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x73, 0x68, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x53, 0x48, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x35, 0xf2, 0xf8, 0xb3, 0x07, 0x26, 0xca, 0xf3, 0xb3, 0x07, 0x21, 0xc2, 0xf4, 0xb3, 0x07,
	0x1c, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0c, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x53, 0x48, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x73, 0x68, 0x12, 0x79, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x78, 0x5f, 0x35, 0x30, 0x39, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x58, 0x35, 0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x27,
	0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x58, 0x35, 0x30, 0x39, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x48, 0x00, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x58, 0x35,
	0x30, 0x39, 0x12, 0x70, 0x0a, 0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x77, 0x73, 0x65,
	0x63, 0x5f, 0x32, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x57, 0x53, 0x45, 0x43, 0x32, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42,
	0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x25, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x57, 0x53, 0x45, 0x43, 0x32, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x77,
	0x73, 0x65, 0x63, 0x32, 0x12, 0x6f, 0x0a, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x77,
	0x73, 0x69, 0x61, 0x6d, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x57, 0x53, 0x49, 0x41, 0x4d, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x25, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07,
	0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x57, 0x53, 0x49, 0x41, 0x4d, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x77, 0x73, 0x69, 0x61, 0x6d, 0x12, 0x74, 0x0a, 0x0e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x35, 0xf2, 0xf8, 0xb3, 0x07, 0x26, 0xca, 0xf3, 0xb3, 0x07, 0x21,
	0xc2, 0xf4, 0xb3, 0x07, 0x1c, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x17,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x3c, 0xf2, 0xf8, 0xb3,
	0x07, 0x2d, 0xca, 0xf3, 0xb3, 0x07, 0x28, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x13, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x53, 0x73, 0x68,
	0x12, 0x97, 0x01, 0x0a, 0x19, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x5f, 0x35, 0x30, 0x39, 0x18, 0x5f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07, 0x2e, 0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2,
	0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x48, 0x00, 0x52, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x12, 0x63, 0x0a, 0x09, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x42, 0x31, 0xf2, 0xf8, 0xb3, 0x07, 0x22, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3, 0x07,
	0x18, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6c, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x73, 0x73, 0x68, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53,
	0x48, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x38, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xca, 0xf3, 0xb3,
	0x07, 0x24, 0xc2, 0xf4, 0xb3, 0x07, 0x1f, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x48, 0x00, 0x52, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74,
	0x53, 0x73, 0x68, 0x12, 0x86, 0x01, 0x0a, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x5f, 0x35, 0x30, 0x39, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53,
	0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x39, 0xf2,
	0xf8, 0xb3, 0x07, 0x2a, 0xca, 0xf3, 0xb3, 0x07, 0x25, 0xc2, 0xf4, 0xb3, 0x07, 0x20, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x10, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x12, 0x6b, 0x0a, 0x0b,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x33, 0xf2, 0xf8, 0xb3, 0x07, 0x24, 0xca, 0xf3, 0xb3,
	0x07, 0x1f, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73,
	0x73, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x42, 0x3a, 0xf2, 0xf8, 0xb3, 0x07, 0x2b, 0xca, 0xf3, 0xb3, 0x07, 0x26,
	0xc2, 0xf4, 0xb3, 0x07, 0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x48, 0x00, 0x52, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x53, 0x73, 0x68, 0x12, 0x8e, 0x01, 0x0a, 0x16, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x5f, 0x35, 0x30, 0x39,
	0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x42, 0x3b, 0xf2, 0xf8, 0xb3, 0x07, 0x2c, 0xca, 0xf3, 0xb3, 0x07, 0x27, 0xc2,
	0xf4, 0xb3, 0x07, 0x22, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x48, 0x00, 0x52, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65,
	0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0x42, 0x2c, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0xaa, 0xf8, 0xb3, 0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x74, 0x61,
	0x67, 0x73, 0xaa, 0xf8, 0xb3, 0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x94, 0x02, 0x0a, 0x08, 0x41, 0x57, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x3a, 0x54, 0xfa, 0xf8, 0xb3, 0x07, 0x4f, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x45, 0xc2, 0xf4, 0xb3, 0x07, 0x0a, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x03, 0x61, 0x77,
	0x73, 0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x03, 0x61, 0x77, 0x73, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x12,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x03, 0x61, 0x77, 0x73, 0x22, 0xc0, 0x05, 0x0a, 0x10, 0x41, 0x57, 0x53, 0x43,
	0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x63, 0x61, 0x41, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xf2, 0xf8,
	0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x1a, 0xc2, 0xf4, 0xb3, 0x07, 0x15, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x05, 0x63, 0x61, 0x41, 0x72, 0x6e, 0x52, 0x05, 0x63, 0x61,
	0x41, 0x72, 0x6e, 0x12, 0x77, 0x0a, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3f, 0xf2, 0xf8, 0xb3, 0x07, 0x3a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x2b, 0xc2, 0xf4, 0xb3, 0x07, 0x26, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x6e, 0x52, 0x16, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x71, 0x0a, 0x14,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07,
	0x38, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29,
	0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54,
	0x74, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x47, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xf2,
	0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x67, 0x6f, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x6e, 0xfa, 0xf8, 0xb3, 0x07,
	0x69, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x5f, 0xc2, 0xf4, 0xb3, 0x07, 0x12,
	0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0b, 0x61, 0x77, 0x73, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35,
	0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x61, 0x77, 0x73, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35,
	0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x61, 0x77, 0x73,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2,
	0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8,
	0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a,
	0x4e, 0xfa, 0xf8, 0xb3, 0x07, 0x49, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x3f,
	0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0xc2, 0xf4, 0xb3, 0x07, 0x1f,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22,
	0x85, 0x02, 0x0a, 0x0a, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4e, 0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xf2, 0xf8, 0xb3, 0x07, 0x2c, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x55, 0x72, 0x69, 0x52, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x72, 0x69, 0x12,
	0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x3a, 0xfa, 0xf8, 0xb3,
	0x07, 0x35, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x2b, 0xc2, 0xf4, 0xb3, 0x07,
	0x0c, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0xc2, 0xf4, 0xb3,
	0x07, 0x15, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x05, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x13, 0x43, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72,
	0x6c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x76, 0xfa, 0xf8, 0xb3, 0x07, 0x71, 0xa8, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x67, 0xc2, 0xf4, 0xb3, 0x07, 0x15, 0x0a, 0x03, 0x63, 0x6c, 0x69,
	0x12, 0x0e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x6a, 0x75, 0x72,
	0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x0e, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x6a, 0x75, 0x72, 0xc2, 0xf4, 0xb3, 0x07, 0x25, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x63, 0x79,
	0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6a, 0x75, 0x72, 0x22, 0xb7, 0x02,
	0x0a, 0x10, 0x43, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8,
	0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x06, 0x61, 0x70,
	0x70, 0x55, 0x72, 0x6c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x6d, 0xfa, 0xf8, 0xb3, 0x07, 0x68, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x5e, 0xc2, 0xf4, 0xb3, 0x07, 0x12, 0x0a, 0x03,
	0x63, 0x6c, 0x69, 0x12, 0x0b, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d,
	0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x0b, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d,
	0xc2, 0xf4, 0xb3, 0x07, 0x22, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0c, 0x63, 0x79, 0x62, 0x65, 0x72,
	0x61, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x6d, 0x22, 0xf0, 0x02, 0x0a, 0x1c, 0x43, 0x79, 0x62, 0x65,
	0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2,
	0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55,
	0x52, 0x4c, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x99,
	0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x93, 0x01, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x88, 0x01, 0x88, 0xf4, 0xb3, 0x07, 0x01, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x03, 0x63, 0x6c,
	0x69, 0x12, 0x17, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0xc2, 0xf4, 0xb3, 0x07, 0x27, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x17, 0x63,
	0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x50, 0x41, 0x4d, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0xc2, 0xf4, 0xb3, 0x07, 0x2f, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x63, 0x79, 0x62, 0x65, 0x72, 0x61, 0x72, 0x6b, 0x5f, 0x70, 0x61, 0x6d, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x22, 0xda, 0x02, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x4f, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1f,
	0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x3e, 0xfa, 0xf8, 0xb3, 0x07, 0x39, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x2f, 0xc2, 0xf4, 0xb3, 0x07, 0x0e, 0x0a, 0x03, 0x63,
	0x6c, 0x69, 0x12, 0x07, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0xc2, 0xf4, 0xb3, 0x07, 0x17,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x07,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x22, 0x81, 0x02, 0x0a, 0x08, 0x47, 0x43, 0x50, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xf2, 0xf8, 0xb3, 0x07, 0x2d, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4,
	0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x3a, 0x36, 0xfa, 0xf8, 0xb3, 0x07, 0x31, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x27, 0xc2, 0xf4, 0xb3, 0x07, 0x0a, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x03,
	0x67, 0x63, 0x70, 0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x03, 0x67, 0x63, 0x70, 0x22, 0xe8, 0x04, 0x0a, 0x10,
	0x47, 0x43, 0x50, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07,
	0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x61, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xf2, 0xf8, 0xb3, 0x07, 0x23, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x19,
	0xc2, 0xf4, 0xb3, 0x07, 0x14, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x04, 0x63, 0x61, 0x49, 0x64, 0x52, 0x04, 0x63, 0x61, 0x49, 0x44, 0x12,
	0x4d, 0x0a, 0x08, 0x63, 0x61, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xf2, 0xf8, 0xb3, 0x07, 0x2c, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08, 0x63, 0x61, 0x50, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x52, 0x08, 0x63, 0x61, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x71,
	0x0a, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2, 0xf8,
	0xb3, 0x07, 0x38, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x29, 0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x74, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xf2, 0xf8, 0xb3, 0x07, 0x2c, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x32, 0xf2, 0xf8, 0xb3, 0x07, 0x2d, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x46,
	0xfa, 0xf8, 0xb3, 0x07, 0x41, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x37, 0xc2,
	0xf4, 0xb3, 0x07, 0x12, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0b, 0x67, 0x63, 0x70, 0x43, 0x65,
	0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x67, 0x63, 0x70, 0x43, 0x65,
	0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x22, 0xe7, 0x09, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x53, 0x48, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x0c, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x1f, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0a, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x0a, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x70, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0xf2, 0xf8, 0xb3, 0x07, 0x37, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x28, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x13, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x95, 0x01, 0x0a, 0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0xf2, 0xf8, 0xb3, 0x07, 0x43, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x34, 0xc2, 0xf4, 0xb3, 0x07, 0x2f, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xf2, 0xf8, 0xb3, 0x07, 0x41, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x32, 0xc2, 0xf4, 0xb3, 0x07, 0x2d, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x1d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xf2, 0xf8, 0xb3, 0x07, 0x3f, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x30, 0xc2, 0xf4, 0xb3, 0x07, 0x2b,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x1b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x17, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f,
	0x76, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xf2, 0xf8, 0xb3, 0x07, 0x33,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x52, 0x14, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x7b, 0x0a, 0x1b, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0xf2, 0xf8, 0xb3, 0x07, 0x37, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x2d, 0xc2,
	0xf4, 0xb3, 0x07, 0x28, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x18, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x18, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x53, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2,
	0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4,
	0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x0b, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b,
	0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x83, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x48, 0xfa, 0xf8, 0xb3, 0x07, 0x43, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x03, 0x63, 0x6c,
	0x69, 0x12, 0x0c, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x53, 0x48, 0xc2,
	0xf4, 0xb3, 0x07, 0x1c, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x0c, 0x6b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x53, 0x48,
	0x22, 0xea, 0x09, 0x0a, 0x12, 0x4b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x63, 0x61, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1f, 0xc2,
	0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x0a, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a,
	0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x70, 0x0a, 0x15, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xf2, 0xf8, 0xb3, 0x07, 0x37,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x28, 0xc2,
	0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x95, 0x01, 0x0a,
	0x22, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48, 0xf2, 0xf8, 0xb3, 0x07, 0x43,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x34, 0xc2,
	0xf4, 0xb3, 0x07, 0x2f, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x46, 0xf2, 0xf8, 0xb3, 0x07, 0x41, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0xca, 0xf3, 0xb3, 0x07, 0x32, 0xc2, 0xf4, 0xb3, 0x07, 0x2d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x44, 0xf2, 0xf8, 0xb3, 0x07, 0x3f, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x30, 0xc2, 0xf4, 0xb3, 0x07, 0x2b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45,
	0x6e, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x17, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xf2, 0xf8, 0xb3, 0x07, 0x33, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x14,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e,
	0x76, 0x56, 0x61, 0x72, 0x12, 0x7b, 0x0a, 0x1b, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f,
	0x76, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xf2, 0xf8, 0xb3, 0x07, 0x37,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x2d, 0xc2, 0xf4, 0xb3, 0x07, 0x28, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x18, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x18, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x12, 0x53, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x6b, 0x65,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x83, 0x80,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x3a, 0x4a, 0xfa, 0xf8, 0xb3, 0x07, 0x45, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x3b, 0xc2, 0xf4, 0xb3, 0x07, 0x14, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0d, 0x6b, 0x65,
	0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x1d,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d,
	0x6b, 0x65, 0x79, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x58, 0x35, 0x30, 0x39, 0x22, 0x9e, 0x03,
	0x0a, 0x10, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x57, 0x53, 0x45, 0x43, 0x32, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8,
	0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4,
	0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x73, 0xfa, 0xf8, 0xb3, 0x07, 0x6e,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x64, 0x88, 0xf4, 0xb3, 0x07, 0x01, 0xc2,
	0xf4, 0xb3, 0x07, 0x12, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x57, 0x53, 0x45, 0x43, 0x32, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x57, 0x53, 0x45, 0x43, 0x32, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x22, 0x9e,
	0x03, 0x0a, 0x10, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x57, 0x53, 0x49, 0x41, 0x4d, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2,
	0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2,
	0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x73, 0xfa, 0xf8, 0xb3, 0x07,
	0x6e, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x64, 0x88, 0xf4, 0xb3, 0x07, 0x01,
	0xc2, 0xf4, 0xb3, 0x07, 0x12, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0b, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x57, 0x53, 0x49, 0x41, 0x4d, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x57, 0x53, 0x49, 0x41, 0x4d, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x12, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x69, 0x61, 0x6d, 0x22,
	0x9c, 0x03, 0x0a, 0x11, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3,
	0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x70, 0xfa, 0xf8,
	0xb3, 0x07, 0x6b, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x61, 0xc2, 0xf4, 0xb3,
	0x07, 0x13, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x1c, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0c, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x0d, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xe8,
	0x05, 0x0a, 0x18, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x14,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07,
	0x38, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29,
	0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54,
	0x74, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2,
	0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x73, 0x68, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x88,
	0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x82, 0x01, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x78, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x13, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48,
	0xc2, 0xf4, 0xb3, 0x07, 0x23, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xc2, 0xf4, 0xb3, 0x07, 0x2c, 0x0a, 0x12, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x73, 0x68, 0x22, 0xec, 0x05, 0x0a, 0x19, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35,
	0x30, 0x39, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07, 0x38, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2, 0xf4, 0xb3, 0x07,
	0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x74, 0x6c, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2,
	0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6b, 0x69, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x70, 0x6b, 0x69, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x6b, 0x69, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xf2,
	0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x8b, 0x01, 0xfa, 0xf8, 0xb3,
	0x07, 0x85, 0x01, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x7b, 0xc2, 0xf4, 0xb3,
	0x07, 0x1b, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3,
	0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x65,
	0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x2d, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x17, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x22, 0xa1, 0x05, 0x0a, 0x0d, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x4c, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43,
	0x41, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2e, 0xf2, 0xf8, 0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x1f, 0xc2, 0xf4, 0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0a, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x61, 0x0a,
	0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0xf2, 0xf8, 0xb3, 0x07, 0x32, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3,
	0x07, 0x1e, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2,
	0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca,
	0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x64, 0xfa, 0xf8, 0xb3, 0x07, 0x5f, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x55, 0xc2, 0xf4, 0xb3, 0x07, 0x0f, 0x0a, 0x03, 0x63, 0x6c,
	0x69, 0x12, 0x08, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0xc2, 0xf4, 0xb3, 0x07, 0x18,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0xc2, 0xf4, 0xb3, 0x07, 0x1f, 0x0a, 0x12, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x22, 0xeb, 0x07, 0x0a,
	0x14, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x41, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xf2, 0xf8,
	0xb3, 0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1f, 0xc2, 0xf4, 0xb3,
	0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x43, 0x41,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0xf2, 0xf8, 0xb3, 0x07, 0x32, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x71, 0x0a, 0x14, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07, 0x38,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2,
	0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x74,
	0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64,
	0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4b,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8,
	0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x73, 0x68, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x7b, 0xfa,
	0xf8, 0xb3, 0x07, 0x76, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x6c, 0xc2, 0xf4,
	0xb3, 0x07, 0x16, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x0f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xc2, 0xf4, 0xb3, 0x07, 0x1f, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0f, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xc2, 0xf4, 0xb3,
	0x07, 0x28, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x73, 0x68, 0x22, 0xef, 0x07, 0x0a, 0x15, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x43, 0x41, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xf2, 0xf8, 0xb3,
	0x07, 0x29, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1f, 0xc2, 0xf4, 0xb3, 0x07,
	0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0a, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0a, 0x43, 0x41, 0x43,
	0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x61, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x37, 0xf2, 0xf8, 0xb3, 0x07, 0x32, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x71, 0x0a, 0x14, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07, 0x38, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2, 0xf4,
	0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x74, 0x6c,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43,
	0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6b,
	0x69, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x70, 0x6b,
	0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x6b, 0x69,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x7e, 0xfa, 0xf8,
	0xb3, 0x07, 0x79, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x6f, 0xc2, 0xf4, 0xb3,
	0x07, 0x17, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x10, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x4c,
	0x53, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x20, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4,
	0xb3, 0x07, 0x29, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x13, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x22, 0x94, 0x03, 0x0a,
	0x0f, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07,
	0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07,
	0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x6a, 0xfa, 0xf8, 0xb3, 0x07, 0x65, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x5b, 0xc2, 0xf4, 0xb3, 0x07, 0x11, 0x0a, 0x03, 0x63,
	0x6c, 0x69, 0x12, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xc2, 0xf4,
	0xb3, 0x07, 0x1a, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0xc2, 0xf4, 0xb3,
	0x07, 0x21, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xdf, 0x05, 0x0a, 0x16, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x71, 0x0a, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3d, 0xf2,
	0xf8, 0xb3, 0x07, 0x38, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x29, 0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x54, 0x74, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52, 0x14, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3,
	0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x57,
	0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x73, 0x73, 0x68, 0x5f, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x73, 0x68, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x73, 0x73, 0x68, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x3a, 0x81, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x7c, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3,
	0xb3, 0x07, 0x72, 0xc2, 0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x11, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x53, 0x53, 0x48,
	0xc2, 0xf4, 0xb3, 0x07, 0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x11, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x65, 0x72, 0x74, 0x53, 0x53, 0x48, 0xc2, 0xf4, 0xb3, 0x07, 0x2a, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x73, 0x73, 0x68, 0x22, 0xe3, 0x05, 0x0a, 0x17, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3,
	0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x71, 0x0a, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x54, 0x54, 0x4c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x3d, 0xf2, 0xf8, 0xb3, 0x07, 0x38, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x29, 0xc2, 0xf4, 0xb3, 0x07, 0x24, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x74, 0x6c, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x52,
	0x14, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x54, 0x54, 0x4c, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6b, 0x69, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3,
	0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x22, 0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x0d, 0x70, 0x6b, 0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0d, 0x70, 0x6b, 0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07,
	0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x22,
	0xc2, 0xf4, 0xb3, 0x07, 0x1d, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xf2, 0xf8, 0xb3, 0x07, 0x2f, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3,
	0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x3a, 0x84, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x7f, 0xa8, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x75, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x03, 0x63, 0x6c, 0x69,
	0x12, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74,
	0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x22, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x65, 0x72, 0x74, 0x58, 0x35, 0x30, 0x39, 0xc2, 0xf4, 0xb3, 0x07, 0x2b,
	0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x15, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x78, 0x35, 0x30, 0x39, 0x42, 0x6d, 0x0a, 0x19, 0x63,
	0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62,
	0x69, 0x6e, 0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64,
	0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_secret_store_types_proto_rawDescOnce sync.Once
	file_secret_store_types_proto_rawDescData = file_secret_store_types_proto_rawDesc
)

func file_secret_store_types_proto_rawDescGZIP() []byte {
	file_secret_store_types_proto_rawDescOnce.Do(func() {
		file_secret_store_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_secret_store_types_proto_rawDescData)
	})
	return file_secret_store_types_proto_rawDescData
}

var file_secret_store_types_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_secret_store_types_proto_goTypes = []interface{}{
	(*SecretStore)(nil),                  // 0: v1.SecretStore
	(*AWSStore)(nil),                     // 1: v1.AWSStore
	(*AWSCertX509Store)(nil),             // 2: v1.AWSCertX509Store
	(*ActiveDirectoryStore)(nil),         // 3: v1.ActiveDirectoryStore
	(*AzureStore)(nil),                   // 4: v1.AzureStore
	(*CyberarkConjurStore)(nil),          // 5: v1.CyberarkConjurStore
	(*CyberarkPAMStore)(nil),             // 6: v1.CyberarkPAMStore
	(*CyberarkPAMExperimentalStore)(nil), // 7: v1.CyberarkPAMExperimentalStore
	(*DelineaStore)(nil),                 // 8: v1.DelineaStore
	(*GCPStore)(nil),                     // 9: v1.GCPStore
	(*GCPCertX509Store)(nil),             // 10: v1.GCPCertX509Store
	(*KeyfactorSSHStore)(nil),            // 11: v1.KeyfactorSSHStore
	(*KeyfactorX509Store)(nil),           // 12: v1.KeyfactorX509Store
	(*VaultAWSEC2Store)(nil),             // 13: v1.VaultAWSEC2Store
	(*VaultAWSIAMStore)(nil),             // 14: v1.VaultAWSIAMStore
	(*VaultAppRoleStore)(nil),            // 15: v1.VaultAppRoleStore
	(*VaultAppRoleCertSSHStore)(nil),     // 16: v1.VaultAppRoleCertSSHStore
	(*VaultAppRoleCertX509Store)(nil),    // 17: v1.VaultAppRoleCertX509Store
	(*VaultTLSStore)(nil),                // 18: v1.VaultTLSStore
	(*VaultTLSCertSSHStore)(nil),         // 19: v1.VaultTLSCertSSHStore
	(*VaultTLSCertX509Store)(nil),        // 20: v1.VaultTLSCertX509Store
	(*VaultTokenStore)(nil),              // 21: v1.VaultTokenStore
	(*VaultTokenCertSSHStore)(nil),       // 22: v1.VaultTokenCertSSHStore
	(*VaultTokenCertX509Store)(nil),      // 23: v1.VaultTokenCertX509Store
	(*Tags)(nil),                         // 24: v1.Tags
}
var file_secret_store_types_proto_depIdxs = []int32{
	1,  // 0: v1.SecretStore.aws:type_name -> v1.AWSStore
	2,  // 1: v1.SecretStore.aws_cert_x_509:type_name -> v1.AWSCertX509Store
	3,  // 2: v1.SecretStore.active_directory:type_name -> v1.ActiveDirectoryStore
	4,  // 3: v1.SecretStore.azure:type_name -> v1.AzureStore
	5,  // 4: v1.SecretStore.cyberark_conjur:type_name -> v1.CyberarkConjurStore
	6,  // 5: v1.SecretStore.cyberark_pam:type_name -> v1.CyberarkPAMStore
	7,  // 6: v1.SecretStore.cyberark_pam_experimental:type_name -> v1.CyberarkPAMExperimentalStore
	8,  // 7: v1.SecretStore.delinea:type_name -> v1.DelineaStore
	9,  // 8: v1.SecretStore.gcp:type_name -> v1.GCPStore
	10, // 9: v1.SecretStore.gcp_cert_x_509:type_name -> v1.GCPCertX509Store
	11, // 10: v1.SecretStore.keyfactor_ssh:type_name -> v1.KeyfactorSSHStore
	12, // 11: v1.SecretStore.keyfactor_x_509:type_name -> v1.KeyfactorX509Store
	13, // 12: v1.SecretStore.vault_awsec_2:type_name -> v1.VaultAWSEC2Store
	14, // 13: v1.SecretStore.vault_awsiam:type_name -> v1.VaultAWSIAMStore
	15, // 14: v1.SecretStore.vault_app_role:type_name -> v1.VaultAppRoleStore
	16, // 15: v1.SecretStore.vault_app_role_cert_ssh:type_name -> v1.VaultAppRoleCertSSHStore
	17, // 16: v1.SecretStore.vault_app_role_cert_x_509:type_name -> v1.VaultAppRoleCertX509Store
	18, // 17: v1.SecretStore.vault_tls:type_name -> v1.VaultTLSStore
	19, // 18: v1.SecretStore.vault_tls_cert_ssh:type_name -> v1.VaultTLSCertSSHStore
	20, // 19: v1.SecretStore.vault_tls_cert_x_509:type_name -> v1.VaultTLSCertX509Store
	21, // 20: v1.SecretStore.vault_token:type_name -> v1.VaultTokenStore
	22, // 21: v1.SecretStore.vault_token_cert_ssh:type_name -> v1.VaultTokenCertSSHStore
	23, // 22: v1.SecretStore.vault_token_cert_x_509:type_name -> v1.VaultTokenCertX509Store
	24, // 23: v1.AWSStore.tags:type_name -> v1.Tags
	24, // 24: v1.AWSCertX509Store.tags:type_name -> v1.Tags
	24, // 25: v1.ActiveDirectoryStore.tags:type_name -> v1.Tags
	24, // 26: v1.AzureStore.tags:type_name -> v1.Tags
	24, // 27: v1.CyberarkConjurStore.tags:type_name -> v1.Tags
	24, // 28: v1.CyberarkPAMStore.tags:type_name -> v1.Tags
	24, // 29: v1.CyberarkPAMExperimentalStore.tags:type_name -> v1.Tags
	24, // 30: v1.DelineaStore.tags:type_name -> v1.Tags
	24, // 31: v1.GCPStore.tags:type_name -> v1.Tags
	24, // 32: v1.GCPCertX509Store.tags:type_name -> v1.Tags
	24, // 33: v1.KeyfactorSSHStore.tags:type_name -> v1.Tags
	24, // 34: v1.KeyfactorX509Store.tags:type_name -> v1.Tags
	24, // 35: v1.VaultAWSEC2Store.tags:type_name -> v1.Tags
	24, // 36: v1.VaultAWSIAMStore.tags:type_name -> v1.Tags
	24, // 37: v1.VaultAppRoleStore.tags:type_name -> v1.Tags
	24, // 38: v1.VaultAppRoleCertSSHStore.tags:type_name -> v1.Tags
	24, // 39: v1.VaultAppRoleCertX509Store.tags:type_name -> v1.Tags
	24, // 40: v1.VaultTLSStore.tags:type_name -> v1.Tags
	24, // 41: v1.VaultTLSCertSSHStore.tags:type_name -> v1.Tags
	24, // 42: v1.VaultTLSCertX509Store.tags:type_name -> v1.Tags
	24, // 43: v1.VaultTokenStore.tags:type_name -> v1.Tags
	24, // 44: v1.VaultTokenCertSSHStore.tags:type_name -> v1.Tags
	24, // 45: v1.VaultTokenCertX509Store.tags:type_name -> v1.Tags
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_secret_store_types_proto_init() }
func file_secret_store_types_proto_init() {
	if File_secret_store_types_proto != nil {
		return
	}
	file_options_proto_init()
	file_tags_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_secret_store_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSCertX509Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveDirectoryStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyberarkConjurStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyberarkPAMStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CyberarkPAMExperimentalStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelineaStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCPCertX509Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyfactorSSHStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyfactorX509Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultAWSEC2Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultAWSIAMStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultAppRoleStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultAppRoleCertSSHStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultAppRoleCertX509Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTLSStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTLSCertSSHStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTLSCertX509Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTokenStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTokenCertSSHStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_store_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultTokenCertX509Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_secret_store_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SecretStore_Aws)(nil),
		(*SecretStore_AwsCertX_509)(nil),
		(*SecretStore_ActiveDirectory)(nil),
		(*SecretStore_Azure)(nil),
		(*SecretStore_CyberarkConjur)(nil),
		(*SecretStore_CyberarkPam)(nil),
		(*SecretStore_CyberarkPamExperimental)(nil),
		(*SecretStore_Delinea)(nil),
		(*SecretStore_Gcp)(nil),
		(*SecretStore_GcpCertX_509)(nil),
		(*SecretStore_KeyfactorSsh)(nil),
		(*SecretStore_KeyfactorX_509)(nil),
		(*SecretStore_VaultAwsec_2)(nil),
		(*SecretStore_VaultAwsiam)(nil),
		(*SecretStore_VaultAppRole)(nil),
		(*SecretStore_VaultAppRoleCertSsh)(nil),
		(*SecretStore_VaultAppRoleCertX_509)(nil),
		(*SecretStore_VaultTls)(nil),
		(*SecretStore_VaultTlsCertSsh)(nil),
		(*SecretStore_VaultTlsCertX_509)(nil),
		(*SecretStore_VaultToken)(nil),
		(*SecretStore_VaultTokenCertSsh)(nil),
		(*SecretStore_VaultTokenCertX_509)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_secret_store_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_secret_store_types_proto_goTypes,
		DependencyIndexes: file_secret_store_types_proto_depIdxs,
		MessageInfos:      file_secret_store_types_proto_msgTypes,
	}.Build()
	File_secret_store_types_proto = out.File
	file_secret_store_types_proto_rawDesc = nil
	file_secret_store_types_proto_goTypes = nil
	file_secret_store_types_proto_depIdxs = nil
}
