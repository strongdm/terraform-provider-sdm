// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: workflow_approvers.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkflowApproversCreateRequest specifies the workflowID and approverID of a new
// workflow approver to be created.
type WorkflowApproversCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new WorkflowApprover.
	WorkflowApprover *WorkflowApprover `protobuf:"bytes,2,opt,name=workflow_approver,json=workflowApprover,proto3" json:"workflow_approver,omitempty"`
}

func (x *WorkflowApproversCreateRequest) Reset() {
	*x = WorkflowApproversCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproversCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproversCreateRequest) ProtoMessage() {}

func (x *WorkflowApproversCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproversCreateRequest.ProtoReflect.Descriptor instead.
func (*WorkflowApproversCreateRequest) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{0}
}

func (x *WorkflowApproversCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproversCreateRequest) GetWorkflowApprover() *WorkflowApprover {
	if x != nil {
		return x.WorkflowApprover
	}
	return nil
}

// WorkflowApproversCreateResponse reports how the WorkflowApprover was created in the system.
type WorkflowApproversCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created workflow approver.
	WorkflowApprover *WorkflowApprover `protobuf:"bytes,2,opt,name=workflow_approver,json=workflowApprover,proto3" json:"workflow_approver,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *WorkflowApproversCreateResponse) Reset() {
	*x = WorkflowApproversCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproversCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproversCreateResponse) ProtoMessage() {}

func (x *WorkflowApproversCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproversCreateResponse.ProtoReflect.Descriptor instead.
func (*WorkflowApproversCreateResponse) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{1}
}

func (x *WorkflowApproversCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproversCreateResponse) GetWorkflowApprover() *WorkflowApprover {
	if x != nil {
		return x.WorkflowApprover
	}
	return nil
}

func (x *WorkflowApproversCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// WorkflowApproverGetRequest specifies which WorkflowApprover to retrieve.
type WorkflowApproverGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the WorkflowApprover to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WorkflowApproverGetRequest) Reset() {
	*x = WorkflowApproverGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproverGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproverGetRequest) ProtoMessage() {}

func (x *WorkflowApproverGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproverGetRequest.ProtoReflect.Descriptor instead.
func (*WorkflowApproverGetRequest) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{2}
}

func (x *WorkflowApproverGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproverGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// WorkflowApproverGetResponse returns a requested WorkflowApprover.
type WorkflowApproverGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested WorkflowApprover.
	WorkflowApprover *WorkflowApprover `protobuf:"bytes,2,opt,name=workflow_approver,json=workflowApprover,proto3" json:"workflow_approver,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *WorkflowApproverGetResponse) Reset() {
	*x = WorkflowApproverGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproverGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproverGetResponse) ProtoMessage() {}

func (x *WorkflowApproverGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproverGetResponse.ProtoReflect.Descriptor instead.
func (*WorkflowApproverGetResponse) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{3}
}

func (x *WorkflowApproverGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproverGetResponse) GetWorkflowApprover() *WorkflowApprover {
	if x != nil {
		return x.WorkflowApprover
	}
	return nil
}

func (x *WorkflowApproverGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// WorkflowApproversDeleteRequest specifies the ID of a WorkflowApprover to be deleted.
type WorkflowApproversDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the WorkflowApprover to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WorkflowApproversDeleteRequest) Reset() {
	*x = WorkflowApproversDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproversDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproversDeleteRequest) ProtoMessage() {}

func (x *WorkflowApproversDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproversDeleteRequest.ProtoReflect.Descriptor instead.
func (*WorkflowApproversDeleteRequest) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{4}
}

func (x *WorkflowApproversDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproversDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// WorkflowApproversDeleteResponse reports how the WorkflowApprover was deleted in the system.
type WorkflowApproversDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,2,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *WorkflowApproversDeleteResponse) Reset() {
	*x = WorkflowApproversDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproversDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproversDeleteResponse) ProtoMessage() {}

func (x *WorkflowApproversDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproversDeleteResponse.ProtoReflect.Descriptor instead.
func (*WorkflowApproversDeleteResponse) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{5}
}

func (x *WorkflowApproversDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproversDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// WorkflowApproversListRequest specifies criteria for retrieving a list of
// WorkflowApprover records
type WorkflowApproversListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *WorkflowApproversListRequest) Reset() {
	*x = WorkflowApproversListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproversListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproversListRequest) ProtoMessage() {}

func (x *WorkflowApproversListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproversListRequest.ProtoReflect.Descriptor instead.
func (*WorkflowApproversListRequest) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{6}
}

func (x *WorkflowApproversListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproversListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// WorkflowApproversListResponse returns a list of WorkflowApprover records that meet
// the criteria of a WorkflowApproversListRequest.
type WorkflowApproversListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The matching workflow approvers.
	WorkflowApprovers []*WorkflowApprover `protobuf:"bytes,2,rep,name=workflow_approvers,json=workflowApprovers,proto3" json:"workflow_approvers,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *WorkflowApproversListResponse) Reset() {
	*x = WorkflowApproversListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApproversListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApproversListResponse) ProtoMessage() {}

func (x *WorkflowApproversListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApproversListResponse.ProtoReflect.Descriptor instead.
func (*WorkflowApproversListResponse) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{7}
}

func (x *WorkflowApproversListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *WorkflowApproversListResponse) GetWorkflowApprovers() []*WorkflowApprover {
	if x != nil {
		return x.WorkflowApprovers
	}
	return nil
}

func (x *WorkflowApproversListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// WorkflowApprover is an account or a role with the ability to approve requests bound to a workflow.
//
// Deprecated: Do not use.
type WorkflowApprover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the WorkflowApprover.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The workflow id.
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// The approver account id.
	AccountId string `protobuf:"bytes,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The approver role id
	RoleId string `protobuf:"bytes,4,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *WorkflowApprover) Reset() {
	*x = WorkflowApprover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_workflow_approvers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowApprover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowApprover) ProtoMessage() {}

func (x *WorkflowApprover) ProtoReflect() protoreflect.Message {
	mi := &file_workflow_approvers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowApprover.ProtoReflect.Descriptor instead.
func (*WorkflowApprover) Descriptor() ([]byte, []int) {
	return file_workflow_approvers_proto_rawDescGZIP(), []int{8}
}

func (x *WorkflowApprover) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowApprover) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowApprover) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *WorkflowApprover) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

var File_workflow_approvers_proto protoreflect.FileDescriptor

var file_workflow_approvers_proto_rawDesc = []byte{
	0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73,
	0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x1e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x90, 0x02, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12,
	0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x64, 0x0a, 0x1a, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x95, 0x02, 0x0a, 0x1b, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8,
	0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4,
	0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3,
	0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x77, 0x0a, 0x1e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01,
	0x22, 0xc1, 0x01, 0x0a, 0x1f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06,
	0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d,
	0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x10, 0xfa, 0xf8, 0xb3, 0x07, 0x0b, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0xd2, 0xf3, 0xb3, 0x07, 0x01, 0x2a, 0x22, 0x94, 0x02, 0x0a, 0x1d, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb8, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12,
	0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x10, 0xfa,
	0xf8, 0xb3, 0x07, 0x0b, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xd2, 0xf3, 0xb3, 0x07, 0x01, 0x2a, 0x22,
	0xc4, 0x01, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x3a, 0x12, 0x18, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x0b, 0xa8, 0xf3, 0xb3, 0x07, 0x01,
	0xd2, 0xf3, 0xb3, 0x07, 0x01, 0x2a, 0x32, 0xc7, 0x04, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2e, 0x82, 0xf9, 0xb3, 0x07, 0x09, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x70, 0x6f, 0x73, 0x74,
	0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x79, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2,
	0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1f, 0xaa, 0xf3, 0xb3, 0x07,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x82, 0xf9, 0xb3, 0x07, 0x0b, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x82, 0xf9, 0xb3, 0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x7a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3,
	0x07, 0x1b, 0xaa, 0xf3, 0xb3, 0x07, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x31, 0xca,
	0xf9, 0xb3, 0x07, 0x15, 0xc2, 0xf9, 0xb3, 0x07, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0xca, 0xf9, 0xb3, 0x07, 0x08, 0xd2, 0xf9,
	0xb3, 0x07, 0x03, 0x6e, 0x74, 0x2d, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xe8, 0xf9, 0xb3, 0x07, 0x01,
	0x42, 0x6d, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73,
	0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_workflow_approvers_proto_rawDescOnce sync.Once
	file_workflow_approvers_proto_rawDescData = file_workflow_approvers_proto_rawDesc
)

func file_workflow_approvers_proto_rawDescGZIP() []byte {
	file_workflow_approvers_proto_rawDescOnce.Do(func() {
		file_workflow_approvers_proto_rawDescData = protoimpl.X.CompressGZIP(file_workflow_approvers_proto_rawDescData)
	})
	return file_workflow_approvers_proto_rawDescData
}

var file_workflow_approvers_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_workflow_approvers_proto_goTypes = []interface{}{
	(*WorkflowApproversCreateRequest)(nil),  // 0: v1.WorkflowApproversCreateRequest
	(*WorkflowApproversCreateResponse)(nil), // 1: v1.WorkflowApproversCreateResponse
	(*WorkflowApproverGetRequest)(nil),      // 2: v1.WorkflowApproverGetRequest
	(*WorkflowApproverGetResponse)(nil),     // 3: v1.WorkflowApproverGetResponse
	(*WorkflowApproversDeleteRequest)(nil),  // 4: v1.WorkflowApproversDeleteRequest
	(*WorkflowApproversDeleteResponse)(nil), // 5: v1.WorkflowApproversDeleteResponse
	(*WorkflowApproversListRequest)(nil),    // 6: v1.WorkflowApproversListRequest
	(*WorkflowApproversListResponse)(nil),   // 7: v1.WorkflowApproversListResponse
	(*WorkflowApprover)(nil),                // 8: v1.WorkflowApprover
	(*CreateRequestMetadata)(nil),           // 9: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),          // 10: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),               // 11: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),              // 12: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),             // 13: v1.GetResponseMetadata
	(*DeleteRequestMetadata)(nil),           // 14: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),          // 15: v1.DeleteResponseMetadata
	(*ListRequestMetadata)(nil),             // 16: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),            // 17: v1.ListResponseMetadata
}
var file_workflow_approvers_proto_depIdxs = []int32{
	9,  // 0: v1.WorkflowApproversCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	8,  // 1: v1.WorkflowApproversCreateRequest.workflow_approver:type_name -> v1.WorkflowApprover
	10, // 2: v1.WorkflowApproversCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	8,  // 3: v1.WorkflowApproversCreateResponse.workflow_approver:type_name -> v1.WorkflowApprover
	11, // 4: v1.WorkflowApproversCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 5: v1.WorkflowApproverGetRequest.meta:type_name -> v1.GetRequestMetadata
	13, // 6: v1.WorkflowApproverGetResponse.meta:type_name -> v1.GetResponseMetadata
	8,  // 7: v1.WorkflowApproverGetResponse.workflow_approver:type_name -> v1.WorkflowApprover
	11, // 8: v1.WorkflowApproverGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 9: v1.WorkflowApproversDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	15, // 10: v1.WorkflowApproversDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	11, // 11: v1.WorkflowApproversDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	16, // 12: v1.WorkflowApproversListRequest.meta:type_name -> v1.ListRequestMetadata
	17, // 13: v1.WorkflowApproversListResponse.meta:type_name -> v1.ListResponseMetadata
	8,  // 14: v1.WorkflowApproversListResponse.workflow_approvers:type_name -> v1.WorkflowApprover
	11, // 15: v1.WorkflowApproversListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	0,  // 16: v1.WorkflowApprovers.Create:input_type -> v1.WorkflowApproversCreateRequest
	2,  // 17: v1.WorkflowApprovers.Get:input_type -> v1.WorkflowApproverGetRequest
	4,  // 18: v1.WorkflowApprovers.Delete:input_type -> v1.WorkflowApproversDeleteRequest
	6,  // 19: v1.WorkflowApprovers.List:input_type -> v1.WorkflowApproversListRequest
	1,  // 20: v1.WorkflowApprovers.Create:output_type -> v1.WorkflowApproversCreateResponse
	3,  // 21: v1.WorkflowApprovers.Get:output_type -> v1.WorkflowApproverGetResponse
	5,  // 22: v1.WorkflowApprovers.Delete:output_type -> v1.WorkflowApproversDeleteResponse
	7,  // 23: v1.WorkflowApprovers.List:output_type -> v1.WorkflowApproversListResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_workflow_approvers_proto_init() }
func file_workflow_approvers_proto_init() {
	if File_workflow_approvers_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_workflow_approvers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproversCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproversCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproverGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproverGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproversDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproversDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproversListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApproversListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_workflow_approvers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowApprover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_workflow_approvers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_workflow_approvers_proto_goTypes,
		DependencyIndexes: file_workflow_approvers_proto_depIdxs,
		MessageInfos:      file_workflow_approvers_proto_msgTypes,
	}.Build()
	File_workflow_approvers_proto = out.File
	file_workflow_approvers_proto_rawDesc = nil
	file_workflow_approvers_proto_goTypes = nil
	file_workflow_approvers_proto_depIdxs = nil
}
