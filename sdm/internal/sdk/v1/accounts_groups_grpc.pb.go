// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccountsGroupsClient is the client API for AccountsGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsGroupsClient interface {
	// Create create a new AccountGroup.
	Create(ctx context.Context, in *AccountGroupCreateRequest, opts ...grpc.CallOption) (*AccountGroupCreateResponse, error)
	// Get reads one AccountGroup by ID.
	Get(ctx context.Context, in *AccountGroupGetRequest, opts ...grpc.CallOption) (*AccountGroupGetResponse, error)
	// Delete removes an AccountGroup by ID.
	Delete(ctx context.Context, in *AccountGroupDeleteRequest, opts ...grpc.CallOption) (*AccountGroupDeleteResponse, error)
	// List gets a list of AccountGroups matching a given set of criteria.
	List(ctx context.Context, in *AccountGroupListRequest, opts ...grpc.CallOption) (*AccountGroupListResponse, error)
}

type accountsGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsGroupsClient(cc grpc.ClientConnInterface) AccountsGroupsClient {
	return &accountsGroupsClient{cc}
}

func (c *accountsGroupsClient) Create(ctx context.Context, in *AccountGroupCreateRequest, opts ...grpc.CallOption) (*AccountGroupCreateResponse, error) {
	out := new(AccountGroupCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountsGroups/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsGroupsClient) Get(ctx context.Context, in *AccountGroupGetRequest, opts ...grpc.CallOption) (*AccountGroupGetResponse, error) {
	out := new(AccountGroupGetResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountsGroups/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsGroupsClient) Delete(ctx context.Context, in *AccountGroupDeleteRequest, opts ...grpc.CallOption) (*AccountGroupDeleteResponse, error) {
	out := new(AccountGroupDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountsGroups/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsGroupsClient) List(ctx context.Context, in *AccountGroupListRequest, opts ...grpc.CallOption) (*AccountGroupListResponse, error) {
	out := new(AccountGroupListResponse)
	err := c.cc.Invoke(ctx, "/v1.AccountsGroups/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsGroupsServer is the server API for AccountsGroups service.
// All implementations must embed UnimplementedAccountsGroupsServer
// for forward compatibility
type AccountsGroupsServer interface {
	// Create create a new AccountGroup.
	Create(context.Context, *AccountGroupCreateRequest) (*AccountGroupCreateResponse, error)
	// Get reads one AccountGroup by ID.
	Get(context.Context, *AccountGroupGetRequest) (*AccountGroupGetResponse, error)
	// Delete removes an AccountGroup by ID.
	Delete(context.Context, *AccountGroupDeleteRequest) (*AccountGroupDeleteResponse, error)
	// List gets a list of AccountGroups matching a given set of criteria.
	List(context.Context, *AccountGroupListRequest) (*AccountGroupListResponse, error)
	mustEmbedUnimplementedAccountsGroupsServer()
}

// UnimplementedAccountsGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsGroupsServer struct {
}

func (UnimplementedAccountsGroupsServer) Create(context.Context, *AccountGroupCreateRequest) (*AccountGroupCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountsGroupsServer) Get(context.Context, *AccountGroupGetRequest) (*AccountGroupGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccountsGroupsServer) Delete(context.Context, *AccountGroupDeleteRequest) (*AccountGroupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccountsGroupsServer) List(context.Context, *AccountGroupListRequest) (*AccountGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountsGroupsServer) mustEmbedUnimplementedAccountsGroupsServer() {}

// UnsafeAccountsGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsGroupsServer will
// result in compilation errors.
type UnsafeAccountsGroupsServer interface {
	mustEmbedUnimplementedAccountsGroupsServer()
}

func RegisterAccountsGroupsServer(s grpc.ServiceRegistrar, srv AccountsGroupsServer) {
	s.RegisterService(&_AccountsGroups_serviceDesc, srv)
}

func _AccountsGroups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGroupCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsGroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountsGroups/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsGroupsServer).Create(ctx, req.(*AccountGroupCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsGroups_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGroupGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsGroupsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountsGroups/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsGroupsServer).Get(ctx, req.(*AccountGroupGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsGroups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsGroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountsGroups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsGroupsServer).Delete(ctx, req.(*AccountGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountsGroups_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsGroupsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AccountsGroups/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsGroupsServer).List(ctx, req.(*AccountGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountsGroups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AccountsGroups",
	HandlerType: (*AccountsGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccountsGroups_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccountsGroups_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccountsGroups_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccountsGroups_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounts_groups.proto",
}
