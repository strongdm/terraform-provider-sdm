// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowRolesClient is the client API for WorkflowRoles service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowRolesClient interface {
	// Create creates a new workflow role
	Create(ctx context.Context, in *WorkflowRolesCreateRequest, opts ...grpc.CallOption) (*WorkflowRolesCreateResponse, error)
	// Get reads one workflow role by ID.
	Get(ctx context.Context, in *WorkflowRoleGetRequest, opts ...grpc.CallOption) (*WorkflowRoleGetResponse, error)
	// Delete deletes a workflow role
	Delete(ctx context.Context, in *WorkflowRolesDeleteRequest, opts ...grpc.CallOption) (*WorkflowRolesDeleteResponse, error)
	// Lists existing workflow roles.
	List(ctx context.Context, in *WorkflowRolesListRequest, opts ...grpc.CallOption) (*WorkflowRolesListResponse, error)
}

type workflowRolesClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowRolesClient(cc grpc.ClientConnInterface) WorkflowRolesClient {
	return &workflowRolesClient{cc}
}

func (c *workflowRolesClient) Create(ctx context.Context, in *WorkflowRolesCreateRequest, opts ...grpc.CallOption) (*WorkflowRolesCreateResponse, error) {
	out := new(WorkflowRolesCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowRoles/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowRolesClient) Get(ctx context.Context, in *WorkflowRoleGetRequest, opts ...grpc.CallOption) (*WorkflowRoleGetResponse, error) {
	out := new(WorkflowRoleGetResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowRoles/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowRolesClient) Delete(ctx context.Context, in *WorkflowRolesDeleteRequest, opts ...grpc.CallOption) (*WorkflowRolesDeleteResponse, error) {
	out := new(WorkflowRolesDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowRoles/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowRolesClient) List(ctx context.Context, in *WorkflowRolesListRequest, opts ...grpc.CallOption) (*WorkflowRolesListResponse, error) {
	out := new(WorkflowRolesListResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowRoles/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowRolesServer is the server API for WorkflowRoles service.
// All implementations must embed UnimplementedWorkflowRolesServer
// for forward compatibility
type WorkflowRolesServer interface {
	// Create creates a new workflow role
	Create(context.Context, *WorkflowRolesCreateRequest) (*WorkflowRolesCreateResponse, error)
	// Get reads one workflow role by ID.
	Get(context.Context, *WorkflowRoleGetRequest) (*WorkflowRoleGetResponse, error)
	// Delete deletes a workflow role
	Delete(context.Context, *WorkflowRolesDeleteRequest) (*WorkflowRolesDeleteResponse, error)
	// Lists existing workflow roles.
	List(context.Context, *WorkflowRolesListRequest) (*WorkflowRolesListResponse, error)
	mustEmbedUnimplementedWorkflowRolesServer()
}

// UnimplementedWorkflowRolesServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowRolesServer struct {
}

func (UnimplementedWorkflowRolesServer) Create(context.Context, *WorkflowRolesCreateRequest) (*WorkflowRolesCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkflowRolesServer) Get(context.Context, *WorkflowRoleGetRequest) (*WorkflowRoleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkflowRolesServer) Delete(context.Context, *WorkflowRolesDeleteRequest) (*WorkflowRolesDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkflowRolesServer) List(context.Context, *WorkflowRolesListRequest) (*WorkflowRolesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkflowRolesServer) mustEmbedUnimplementedWorkflowRolesServer() {}

// UnsafeWorkflowRolesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowRolesServer will
// result in compilation errors.
type UnsafeWorkflowRolesServer interface {
	mustEmbedUnimplementedWorkflowRolesServer()
}

func RegisterWorkflowRolesServer(s grpc.ServiceRegistrar, srv WorkflowRolesServer) {
	s.RegisterService(&_WorkflowRoles_serviceDesc, srv)
}

func _WorkflowRoles_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRolesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowRolesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowRoles/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowRolesServer).Create(ctx, req.(*WorkflowRolesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowRoles_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRoleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowRolesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowRoles/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowRolesServer).Get(ctx, req.(*WorkflowRoleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowRoles_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRolesDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowRolesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowRoles/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowRolesServer).Delete(ctx, req.(*WorkflowRolesDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowRoles_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRolesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowRolesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowRoles/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowRolesServer).List(ctx, req.(*WorkflowRolesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowRoles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WorkflowRoles",
	HandlerType: (*WorkflowRolesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WorkflowRoles_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkflowRoles_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WorkflowRoles_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkflowRoles_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow_roles.proto",
}
