// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IdentityAliasesHistoryClient is the client API for IdentityAliasesHistory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityAliasesHistoryClient interface {
	// List gets a list of IdentityAliasHistory records matching a given set of criteria.
	List(ctx context.Context, in *IdentityAliasHistoryListRequest, opts ...grpc.CallOption) (*IdentityAliasHistoryListResponse, error)
}

type identityAliasesHistoryClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityAliasesHistoryClient(cc grpc.ClientConnInterface) IdentityAliasesHistoryClient {
	return &identityAliasesHistoryClient{cc}
}

func (c *identityAliasesHistoryClient) List(ctx context.Context, in *IdentityAliasHistoryListRequest, opts ...grpc.CallOption) (*IdentityAliasHistoryListResponse, error) {
	out := new(IdentityAliasHistoryListResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentityAliasesHistory/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityAliasesHistoryServer is the server API for IdentityAliasesHistory service.
// All implementations must embed UnimplementedIdentityAliasesHistoryServer
// for forward compatibility
type IdentityAliasesHistoryServer interface {
	// List gets a list of IdentityAliasHistory records matching a given set of criteria.
	List(context.Context, *IdentityAliasHistoryListRequest) (*IdentityAliasHistoryListResponse, error)
	mustEmbedUnimplementedIdentityAliasesHistoryServer()
}

// UnimplementedIdentityAliasesHistoryServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityAliasesHistoryServer struct {
}

func (UnimplementedIdentityAliasesHistoryServer) List(context.Context, *IdentityAliasHistoryListRequest) (*IdentityAliasHistoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIdentityAliasesHistoryServer) mustEmbedUnimplementedIdentityAliasesHistoryServer() {
}

// UnsafeIdentityAliasesHistoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityAliasesHistoryServer will
// result in compilation errors.
type UnsafeIdentityAliasesHistoryServer interface {
	mustEmbedUnimplementedIdentityAliasesHistoryServer()
}

func RegisterIdentityAliasesHistoryServer(s grpc.ServiceRegistrar, srv IdentityAliasesHistoryServer) {
	s.RegisterService(&_IdentityAliasesHistory_serviceDesc, srv)
}

func _IdentityAliasesHistory_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAliasHistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAliasesHistoryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentityAliasesHistory/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAliasesHistoryServer).List(ctx, req.(*IdentityAliasHistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityAliasesHistory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IdentityAliasesHistory",
	HandlerType: (*IdentityAliasesHistoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _IdentityAliasesHistory_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_aliases_history.proto",
}
