// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IdentitySetsClient is the client API for IdentitySets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentitySetsClient interface {
	// Get reads one IdentitySet by ID.
	Get(ctx context.Context, in *IdentitySetGetRequest, opts ...grpc.CallOption) (*IdentitySetGetResponse, error)
	// List gets a list of IdentitySets matching a given set of criteria.
	List(ctx context.Context, in *IdentitySetListRequest, opts ...grpc.CallOption) (*IdentitySetListResponse, error)
}

type identitySetsClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentitySetsClient(cc grpc.ClientConnInterface) IdentitySetsClient {
	return &identitySetsClient{cc}
}

func (c *identitySetsClient) Get(ctx context.Context, in *IdentitySetGetRequest, opts ...grpc.CallOption) (*IdentitySetGetResponse, error) {
	out := new(IdentitySetGetResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentitySets/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identitySetsClient) List(ctx context.Context, in *IdentitySetListRequest, opts ...grpc.CallOption) (*IdentitySetListResponse, error) {
	out := new(IdentitySetListResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentitySets/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentitySetsServer is the server API for IdentitySets service.
// All implementations must embed UnimplementedIdentitySetsServer
// for forward compatibility
type IdentitySetsServer interface {
	// Get reads one IdentitySet by ID.
	Get(context.Context, *IdentitySetGetRequest) (*IdentitySetGetResponse, error)
	// List gets a list of IdentitySets matching a given set of criteria.
	List(context.Context, *IdentitySetListRequest) (*IdentitySetListResponse, error)
	mustEmbedUnimplementedIdentitySetsServer()
}

// UnimplementedIdentitySetsServer must be embedded to have forward compatible implementations.
type UnimplementedIdentitySetsServer struct {
}

func (UnimplementedIdentitySetsServer) Get(context.Context, *IdentitySetGetRequest) (*IdentitySetGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIdentitySetsServer) List(context.Context, *IdentitySetListRequest) (*IdentitySetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIdentitySetsServer) mustEmbedUnimplementedIdentitySetsServer() {}

// UnsafeIdentitySetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentitySetsServer will
// result in compilation errors.
type UnsafeIdentitySetsServer interface {
	mustEmbedUnimplementedIdentitySetsServer()
}

func RegisterIdentitySetsServer(s grpc.ServiceRegistrar, srv IdentitySetsServer) {
	s.RegisterService(&_IdentitySets_serviceDesc, srv)
}

func _IdentitySets_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentitySetGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitySetsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentitySets/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitySetsServer).Get(ctx, req.(*IdentitySetGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentitySets_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentitySetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentitySetsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentitySets/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentitySetsServer).List(ctx, req.(*IdentitySetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentitySets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IdentitySets",
	HandlerType: (*IdentitySetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _IdentitySets_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IdentitySets_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_sets.proto",
}
