// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ControlPanelClient is the client API for ControlPanel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPanelClient interface {
	// GetSSHCAPublicKey retrieves the SSH CA public key.
	GetSSHCAPublicKey(ctx context.Context, in *ControlPanelGetSSHCAPublicKeyRequest, opts ...grpc.CallOption) (*ControlPanelGetSSHCAPublicKeyResponse, error)
	// GetRDPCAPublicKey retrieves the RDP CA public key.
	GetRDPCAPublicKey(ctx context.Context, in *ControlPanelGetRDPCAPublicKeyRequest, opts ...grpc.CallOption) (*ControlPanelGetRDPCAPublicKeyResponse, error)
	// VerifyJWT reports whether the given JWT token (x-sdm-token) is valid.
	VerifyJWT(ctx context.Context, in *ControlPanelVerifyJWTRequest, opts ...grpc.CallOption) (*ControlPanelVerifyJWTResponse, error)
}

type controlPanelClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPanelClient(cc grpc.ClientConnInterface) ControlPanelClient {
	return &controlPanelClient{cc}
}

func (c *controlPanelClient) GetSSHCAPublicKey(ctx context.Context, in *ControlPanelGetSSHCAPublicKeyRequest, opts ...grpc.CallOption) (*ControlPanelGetSSHCAPublicKeyResponse, error) {
	out := new(ControlPanelGetSSHCAPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/v1.ControlPanel/GetSSHCAPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPanelClient) GetRDPCAPublicKey(ctx context.Context, in *ControlPanelGetRDPCAPublicKeyRequest, opts ...grpc.CallOption) (*ControlPanelGetRDPCAPublicKeyResponse, error) {
	out := new(ControlPanelGetRDPCAPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/v1.ControlPanel/GetRDPCAPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPanelClient) VerifyJWT(ctx context.Context, in *ControlPanelVerifyJWTRequest, opts ...grpc.CallOption) (*ControlPanelVerifyJWTResponse, error) {
	out := new(ControlPanelVerifyJWTResponse)
	err := c.cc.Invoke(ctx, "/v1.ControlPanel/VerifyJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPanelServer is the server API for ControlPanel service.
// All implementations must embed UnimplementedControlPanelServer
// for forward compatibility
type ControlPanelServer interface {
	// GetSSHCAPublicKey retrieves the SSH CA public key.
	GetSSHCAPublicKey(context.Context, *ControlPanelGetSSHCAPublicKeyRequest) (*ControlPanelGetSSHCAPublicKeyResponse, error)
	// GetRDPCAPublicKey retrieves the RDP CA public key.
	GetRDPCAPublicKey(context.Context, *ControlPanelGetRDPCAPublicKeyRequest) (*ControlPanelGetRDPCAPublicKeyResponse, error)
	// VerifyJWT reports whether the given JWT token (x-sdm-token) is valid.
	VerifyJWT(context.Context, *ControlPanelVerifyJWTRequest) (*ControlPanelVerifyJWTResponse, error)
	mustEmbedUnimplementedControlPanelServer()
}

// UnimplementedControlPanelServer must be embedded to have forward compatible implementations.
type UnimplementedControlPanelServer struct {
}

func (UnimplementedControlPanelServer) GetSSHCAPublicKey(context.Context, *ControlPanelGetSSHCAPublicKeyRequest) (*ControlPanelGetSSHCAPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSSHCAPublicKey not implemented")
}
func (UnimplementedControlPanelServer) GetRDPCAPublicKey(context.Context, *ControlPanelGetRDPCAPublicKeyRequest) (*ControlPanelGetRDPCAPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRDPCAPublicKey not implemented")
}
func (UnimplementedControlPanelServer) VerifyJWT(context.Context, *ControlPanelVerifyJWTRequest) (*ControlPanelVerifyJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyJWT not implemented")
}
func (UnimplementedControlPanelServer) mustEmbedUnimplementedControlPanelServer() {}

// UnsafeControlPanelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPanelServer will
// result in compilation errors.
type UnsafeControlPanelServer interface {
	mustEmbedUnimplementedControlPanelServer()
}

func RegisterControlPanelServer(s grpc.ServiceRegistrar, srv ControlPanelServer) {
	s.RegisterService(&_ControlPanel_serviceDesc, srv)
}

func _ControlPanel_GetSSHCAPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlPanelGetSSHCAPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPanelServer).GetSSHCAPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ControlPanel/GetSSHCAPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPanelServer).GetSSHCAPublicKey(ctx, req.(*ControlPanelGetSSHCAPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPanel_GetRDPCAPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlPanelGetRDPCAPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPanelServer).GetRDPCAPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ControlPanel/GetRDPCAPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPanelServer).GetRDPCAPublicKey(ctx, req.(*ControlPanelGetRDPCAPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPanel_VerifyJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlPanelVerifyJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPanelServer).VerifyJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ControlPanel/VerifyJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPanelServer).VerifyJWT(ctx, req.(*ControlPanelVerifyJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlPanel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ControlPanel",
	HandlerType: (*ControlPanelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSSHCAPublicKey",
			Handler:    _ControlPanel_GetSSHCAPublicKey_Handler,
		},
		{
			MethodName: "GetRDPCAPublicKey",
			Handler:    _ControlPanel_GetRDPCAPublicKey_Handler,
		},
		{
			MethodName: "VerifyJWT",
			Handler:    _ControlPanel_VerifyJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_panel.proto",
}
