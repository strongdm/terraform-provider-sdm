// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: managed_secrets.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ManagedSecretLogsRequest specifies criteria for retrieving a log of Managed
// Secrets actions.
type ManagedSecretLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ManagedSecretLogsRequest) Reset() {
	*x = ManagedSecretLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretLogsRequest) ProtoMessage() {}

func (x *ManagedSecretLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretLogsRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretLogsRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{0}
}

func (x *ManagedSecretLogsRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ManagedSecretLogsResponse contains a list of requested Managed Secrets
type ManagedSecretLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A list of Managed Secret Logs.
	ManagedSecretLogs []*ManagedSecretLog `protobuf:"bytes,2,rep,name=managed_secret_logs,json=managedSecretLogs,proto3" json:"managed_secret_logs,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretLogsResponse) Reset() {
	*x = ManagedSecretLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretLogsResponse) ProtoMessage() {}

func (x *ManagedSecretLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretLogsResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretLogsResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{1}
}

func (x *ManagedSecretLogsResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretLogsResponse) GetManagedSecretLogs() []*ManagedSecretLog {
	if x != nil {
		return x.ManagedSecretLogs
	}
	return nil
}

func (x *ManagedSecretLogsResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretListRequest specifies criteria for retrieving a list of Managed
// Secrets.
type ManagedSecretListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ManagedSecretListRequest) Reset() {
	*x = ManagedSecretListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretListRequest) ProtoMessage() {}

func (x *ManagedSecretListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretListRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretListRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{2}
}

func (x *ManagedSecretListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ManagedSecretListResponse contains a list of requested Managed Secrets
type ManagedSecretListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A list of Managed Secrets.
	ManagedSecrets []*ManagedSecret `protobuf:"bytes,2,rep,name=managed_secrets,json=managedSecrets,proto3" json:"managed_secrets,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretListResponse) Reset() {
	*x = ManagedSecretListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretListResponse) ProtoMessage() {}

func (x *ManagedSecretListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretListResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretListResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{3}
}

func (x *ManagedSecretListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretListResponse) GetManagedSecrets() []*ManagedSecret {
	if x != nil {
		return x.ManagedSecrets
	}
	return nil
}

func (x *ManagedSecretListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretRetrieveRequest specifies which Managed Secret to retrieve
type ManagedSecretRetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the Managed Secret to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Public key to encrypt a sensitive value with
	PublicKey []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *ManagedSecretRetrieveRequest) Reset() {
	*x = ManagedSecretRetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretRetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretRetrieveRequest) ProtoMessage() {}

func (x *ManagedSecretRetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretRetrieveRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretRetrieveRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{4}
}

func (x *ManagedSecretRetrieveRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretRetrieveRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagedSecretRetrieveRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// ManagedSecretRetrieveResponse contains information about requested Managed
// Secret
type ManagedSecretRetrieveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested Managed Secret.
	ManagedSecret *ManagedSecret `protobuf:"bytes,2,opt,name=managed_secret,json=managedSecret,proto3" json:"managed_secret,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretRetrieveResponse) Reset() {
	*x = ManagedSecretRetrieveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretRetrieveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretRetrieveResponse) ProtoMessage() {}

func (x *ManagedSecretRetrieveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretRetrieveResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretRetrieveResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{5}
}

func (x *ManagedSecretRetrieveResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretRetrieveResponse) GetManagedSecret() *ManagedSecret {
	if x != nil {
		return x.ManagedSecret
	}
	return nil
}

func (x *ManagedSecretRetrieveResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretValidateRequest specifies which Managed Secret to validate
type ManagedSecretValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the Managed Secret to validate.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManagedSecretValidateRequest) Reset() {
	*x = ManagedSecretValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretValidateRequest) ProtoMessage() {}

func (x *ManagedSecretValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretValidateRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretValidateRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{6}
}

func (x *ManagedSecretValidateRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretValidateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ManagedSecretValidateResponse contains validity of requested Managed
// Secret
type ManagedSecretValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Whether the secret is valid
	Valid bool `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	// Information about why secret is invalid
	InvalidInfo string `protobuf:"bytes,4,opt,name=invalid_info,json=invalidInfo,proto3" json:"invalid_info,omitempty"`
}

func (x *ManagedSecretValidateResponse) Reset() {
	*x = ManagedSecretValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretValidateResponse) ProtoMessage() {}

func (x *ManagedSecretValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretValidateResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretValidateResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{7}
}

func (x *ManagedSecretValidateResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretValidateResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ManagedSecretValidateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *ManagedSecretValidateResponse) GetInvalidInfo() string {
	if x != nil {
		return x.InvalidInfo
	}
	return ""
}

// ManagedSecretGetRequest specifies which Managed Secret to retrieve
type ManagedSecretGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the Managed Secret to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManagedSecretGetRequest) Reset() {
	*x = ManagedSecretGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretGetRequest) ProtoMessage() {}

func (x *ManagedSecretGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretGetRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretGetRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{8}
}

func (x *ManagedSecretGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ManagedSecretGetResponse contains information about requested Managed Secret
type ManagedSecretGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested Managed Secret.
	ManagedSecret *ManagedSecret `protobuf:"bytes,2,opt,name=managed_secret,json=managedSecret,proto3" json:"managed_secret,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretGetResponse) Reset() {
	*x = ManagedSecretGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretGetResponse) ProtoMessage() {}

func (x *ManagedSecretGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretGetResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretGetResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{9}
}

func (x *ManagedSecretGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretGetResponse) GetManagedSecret() *ManagedSecret {
	if x != nil {
		return x.ManagedSecret
	}
	return nil
}

func (x *ManagedSecretGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretCreateRequest specifies a Managed Secret to create.
type ManagedSecretCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new Managed Secret.
	ManagedSecret *ManagedSecret `protobuf:"bytes,2,opt,name=managed_secret,json=managedSecret,proto3" json:"managed_secret,omitempty"`
}

func (x *ManagedSecretCreateRequest) Reset() {
	*x = ManagedSecretCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretCreateRequest) ProtoMessage() {}

func (x *ManagedSecretCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretCreateRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretCreateRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{10}
}

func (x *ManagedSecretCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretCreateRequest) GetManagedSecret() *ManagedSecret {
	if x != nil {
		return x.ManagedSecret
	}
	return nil
}

// ManagedSecretCreateResponse contains information about a Managed Secret after
// successful creation.
type ManagedSecretCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested Managed Secret.
	ManagedSecret *ManagedSecret `protobuf:"bytes,2,opt,name=managed_secret,json=managedSecret,proto3" json:"managed_secret,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretCreateResponse) Reset() {
	*x = ManagedSecretCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretCreateResponse) ProtoMessage() {}

func (x *ManagedSecretCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretCreateResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretCreateResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{11}
}

func (x *ManagedSecretCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretCreateResponse) GetManagedSecret() *ManagedSecret {
	if x != nil {
		return x.ManagedSecret
	}
	return nil
}

func (x *ManagedSecretCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretUpdateRequest specifies Managed Secret to update
type ManagedSecretUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the Managed Secret to update.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Managed Secret to update
	ManagedSecret *ManagedSecret `protobuf:"bytes,3,opt,name=managed_secret,json=managedSecret,proto3" json:"managed_secret,omitempty"`
}

func (x *ManagedSecretUpdateRequest) Reset() {
	*x = ManagedSecretUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretUpdateRequest) ProtoMessage() {}

func (x *ManagedSecretUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretUpdateRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretUpdateRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{12}
}

func (x *ManagedSecretUpdateRequest) GetMeta() *UpdateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretUpdateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagedSecretUpdateRequest) GetManagedSecret() *ManagedSecret {
	if x != nil {
		return x.ManagedSecret
	}
	return nil
}

// ManagedSecretUpdateResponse contains information about Secret Engine after
// successful update.
type ManagedSecretUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested Managed Secret.
	ManagedSecret *ManagedSecret `protobuf:"bytes,2,opt,name=managed_secret,json=managedSecret,proto3" json:"managed_secret,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretUpdateResponse) Reset() {
	*x = ManagedSecretUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretUpdateResponse) ProtoMessage() {}

func (x *ManagedSecretUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretUpdateResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretUpdateResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{13}
}

func (x *ManagedSecretUpdateResponse) GetMeta() *UpdateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretUpdateResponse) GetManagedSecret() *ManagedSecret {
	if x != nil {
		return x.ManagedSecret
	}
	return nil
}

func (x *ManagedSecretUpdateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretRotateRequest specifies Managed Secret to rotate
type ManagedSecretRotateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GenericRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the Managed Secret to rotate.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManagedSecretRotateRequest) Reset() {
	*x = ManagedSecretRotateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretRotateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretRotateRequest) ProtoMessage() {}

func (x *ManagedSecretRotateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretRotateRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretRotateRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{14}
}

func (x *ManagedSecretRotateRequest) GetMeta() *GenericRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretRotateRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ManagedSecretRotateResponse contains information about Secret Engine after
// successful rotation.
type ManagedSecretRotateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GenericResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,2,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretRotateResponse) Reset() {
	*x = ManagedSecretRotateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretRotateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretRotateResponse) ProtoMessage() {}

func (x *ManagedSecretRotateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretRotateResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretRotateResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{15}
}

func (x *ManagedSecretRotateResponse) GetMeta() *GenericResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretRotateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretDeleteRequest specified the ID of a Managed Secret to be
// deleted.
type ManagedSecretDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *UpdateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the Managed Secret to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ManagedSecretDeleteRequest) Reset() {
	*x = ManagedSecretDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretDeleteRequest) ProtoMessage() {}

func (x *ManagedSecretDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretDeleteRequest.ProtoReflect.Descriptor instead.
func (*ManagedSecretDeleteRequest) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{16}
}

func (x *ManagedSecretDeleteRequest) GetMeta() *UpdateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ManagedSecretDeleteResponse contains information about a Managed Secret after
// it was deleted.
type ManagedSecretDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,2,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ManagedSecretDeleteResponse) Reset() {
	*x = ManagedSecretDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretDeleteResponse) ProtoMessage() {}

func (x *ManagedSecretDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretDeleteResponse.ProtoReflect.Descriptor instead.
func (*ManagedSecretDeleteResponse) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{17}
}

func (x *ManagedSecretDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ManagedSecretDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ManagedSecretLog contains details about action performed against a managed
// secret
type ManagedSecretLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the Managed Secret Log.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Timestamp of when action was performed.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// An ID of the Secret Engine linked with the Managed Secret.
	SecretEngineId string `protobuf:"bytes,3,opt,name=secret_engine_id,json=secretEngineId,proto3" json:"secret_engine_id,omitempty"`
	// An ID of the Managed Secret the action was performed against.
	ManagedSecretId string `protobuf:"bytes,4,opt,name=managed_secret_id,json=managedSecretId,proto3" json:"managed_secret_id,omitempty"`
	// An ID of the account the action was performed by.
	AccountId string `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The action performed by the account against the managed secret.
	Action string `protobuf:"bytes,6,opt,name=action,proto3" json:"action,omitempty"`
	// Any debug logs associated with the action.
	Debug string `protobuf:"bytes,7,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (x *ManagedSecretLog) Reset() {
	*x = ManagedSecretLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretLog) ProtoMessage() {}

func (x *ManagedSecretLog) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretLog.ProtoReflect.Descriptor instead.
func (*ManagedSecretLog) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{18}
}

func (x *ManagedSecretLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagedSecretLog) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ManagedSecretLog) GetSecretEngineId() string {
	if x != nil {
		return x.SecretEngineId
	}
	return ""
}

func (x *ManagedSecretLog) GetManagedSecretId() string {
	if x != nil {
		return x.ManagedSecretId
	}
	return ""
}

func (x *ManagedSecretLog) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ManagedSecretLog) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ManagedSecretLog) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

// ManagedSecret contains details about managed secret
type ManagedSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the Managed Secret.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Managed Secret.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// An ID of a Secret Engine linked with the Managed Secret.
	SecretEngineId string `protobuf:"bytes,3,opt,name=secret_engine_id,json=secretEngineId,proto3" json:"secret_engine_id,omitempty"`
	// Sensitive value of the secret.
	Value []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// Path in a secret store.
	SecretStorePath string `protobuf:"bytes,5,opt,name=secret_store_path,json=secretStorePath,proto3" json:"secret_store_path,omitempty"`
	// Password and rotation policy for the secret
	Policy *ManagedSecretPolicy `protobuf:"bytes,6,opt,name=policy,proto3" json:"policy,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	// Timestamp of when secret was last rotated
	LastRotatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_rotated_at,json=lastRotatedAt,proto3" json:"last_rotated_at,omitempty"`
	// Timestamp of when secret is going to be rotated
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// public part of the secret value
	Config string `protobuf:"bytes,10,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ManagedSecret) Reset() {
	*x = ManagedSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecret) ProtoMessage() {}

func (x *ManagedSecret) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecret.ProtoReflect.Descriptor instead.
func (*ManagedSecret) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{19}
}

func (x *ManagedSecret) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ManagedSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ManagedSecret) GetSecretEngineId() string {
	if x != nil {
		return x.SecretEngineId
	}
	return ""
}

func (x *ManagedSecret) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ManagedSecret) GetSecretStorePath() string {
	if x != nil {
		return x.SecretStorePath
	}
	return ""
}

func (x *ManagedSecret) GetPolicy() *ManagedSecretPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ManagedSecret) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ManagedSecret) GetLastRotatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRotatedAt
	}
	return nil
}

func (x *ManagedSecret) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *ManagedSecret) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

// ManagedSecretPolicy contains password and rotation policy for managed secret
type ManagedSecretPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rotation policy for a managed secret
	RotationPolicy *ManagedSecretRotationPolicy `protobuf:"bytes,1,opt,name=rotation_policy,json=rotationPolicy,proto3" json:"rotation_policy,omitempty"`
	// Password policy for a managed secret
	PasswordPolicy *ManagedSecretPasswordPolicy `protobuf:"bytes,2,opt,name=password_policy,json=passwordPolicy,proto3" json:"password_policy,omitempty"`
}

func (x *ManagedSecretPolicy) Reset() {
	*x = ManagedSecretPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretPolicy) ProtoMessage() {}

func (x *ManagedSecretPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretPolicy.ProtoReflect.Descriptor instead.
func (*ManagedSecretPolicy) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{20}
}

func (x *ManagedSecretPolicy) GetRotationPolicy() *ManagedSecretRotationPolicy {
	if x != nil {
		return x.RotationPolicy
	}
	return nil
}

func (x *ManagedSecretPolicy) GetPasswordPolicy() *ManagedSecretPasswordPolicy {
	if x != nil {
		return x.PasswordPolicy
	}
	return nil
}

type ManagedSecretPasswordPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Password length
	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// If set to true do not include upper case letters when generating password
	ExcludeUpperCase bool `protobuf:"varint,2,opt,name=exclude_upper_case,json=excludeUpperCase,proto3" json:"exclude_upper_case,omitempty"`
	// Numbers of digits to use when generating password
	NumDigits uint32 `protobuf:"varint,3,opt,name=num_digits,json=numDigits,proto3" json:"num_digits,omitempty"`
	// Number of symbols to use when generating password
	NumSymbols uint32 `protobuf:"varint,4,opt,name=num_symbols,json=numSymbols,proto3" json:"num_symbols,omitempty"`
	// If set to true allows for consecutive characters to repeat itself
	AllowRepeat bool `protobuf:"varint,5,opt,name=allow_repeat,json=allowRepeat,proto3" json:"allow_repeat,omitempty"`
	// Characters to exclude when generating password
	ExcludeCharacters string `protobuf:"bytes,6,opt,name=exclude_characters,json=excludeCharacters,proto3" json:"exclude_characters,omitempty"`
}

func (x *ManagedSecretPasswordPolicy) Reset() {
	*x = ManagedSecretPasswordPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretPasswordPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretPasswordPolicy) ProtoMessage() {}

func (x *ManagedSecretPasswordPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretPasswordPolicy.ProtoReflect.Descriptor instead.
func (*ManagedSecretPasswordPolicy) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{21}
}

func (x *ManagedSecretPasswordPolicy) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ManagedSecretPasswordPolicy) GetExcludeUpperCase() bool {
	if x != nil {
		return x.ExcludeUpperCase
	}
	return false
}

func (x *ManagedSecretPasswordPolicy) GetNumDigits() uint32 {
	if x != nil {
		return x.NumDigits
	}
	return 0
}

func (x *ManagedSecretPasswordPolicy) GetNumSymbols() uint32 {
	if x != nil {
		return x.NumSymbols
	}
	return 0
}

func (x *ManagedSecretPasswordPolicy) GetAllowRepeat() bool {
	if x != nil {
		return x.AllowRepeat
	}
	return false
}

func (x *ManagedSecretPasswordPolicy) GetExcludeCharacters() string {
	if x != nil {
		return x.ExcludeCharacters
	}
	return ""
}

type ManagedSecretRotationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManagedSecretRotationPolicy) Reset() {
	*x = ManagedSecretRotationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_managed_secrets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagedSecretRotationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagedSecretRotationPolicy) ProtoMessage() {}

func (x *ManagedSecretRotationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_managed_secrets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagedSecretRotationPolicy.ProtoReflect.Descriptor instead.
func (*ManagedSecretRotationPolicy) Descriptor() ([]byte, []int) {
	return file_managed_secrets_proto_rawDescGZIP(), []int{22}
}

var File_managed_secrets_proto protoreflect.FileDescriptor

var file_managed_secrets_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x70, 0x65, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x8b, 0x02, 0x0a,
	0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb8, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07,
	0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a,
	0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x77, 0x0a, 0x18, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x46, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb8, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x8e, 0x02, 0x0a, 0x1d, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3,
	0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3,
	0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x72, 0x0a, 0x1c, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a,
	0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x99, 0x02, 0x0a, 0x1d, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8,
	0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4,
	0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0b, 0x69,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6d, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x89, 0x02, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3,
	0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07,
	0x01, 0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07,
	0x01, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a,
	0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2,
	0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21,
	0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3,
	0xb3, 0x07, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x1b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x44, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07,
	0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07,
	0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x74, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x3a,
	0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xca, 0x01, 0x0a, 0x1b,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2,
	0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2,
	0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8,
	0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x73, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xbd, 0x01,
	0x0a, 0x1b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x62, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2,
	0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xf9, 0x02,
	0x0a, 0x10, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3,
	0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2,
	0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xb1, 0x04, 0x0a, 0x0d, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0xf0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0xf2, 0xf8,
	0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0f, 0xf2, 0xf8,
	0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xcd, 0x01,
	0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0e, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x54, 0x0a, 0x0f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xc9, 0x02,
	0x0a, 0x1b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x0a,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x38, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x0a, 0x6e,
	0x75, 0x6d, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05,
	0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x12, 0x39, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a,
	0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x29, 0x0a, 0x1b, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0x32, 0xc1, 0x0a, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xf9,
	0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x18,
	0xaa, 0xf3, 0xb3, 0x07, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x7c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03,
	0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1e, 0xaa, 0xf3, 0xb3, 0x07, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x76, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xf9, 0xb3, 0x07, 0x09, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x70, 0x6f, 0x73,
	0x74, 0x82, 0xf9, 0xb3, 0x07, 0x18, 0xaa, 0xf3, 0xb3, 0x07, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x7a,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xf9, 0xb3, 0x07, 0x08,
	0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x70, 0x75, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1d, 0xaa, 0xf3, 0xb3,
	0x07, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01, 0x0a, 0x06, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3,
	0x07, 0x03, 0x70, 0x75, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x24, 0xaa, 0xf3, 0xb3, 0x07, 0x1f, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7d,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xf9, 0xb3, 0x07, 0x0b,
	0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x82, 0xf9, 0xb3, 0x07, 0x1d,
	0xaa, 0xf3, 0xb3, 0x07, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2f, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9,
	0xb3, 0x07, 0x1d, 0xaa, 0xf3, 0xb3, 0x07, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x8a, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x12, 0x20, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65,
	0x74, 0x82, 0xf9, 0xb3, 0x07, 0x27, 0xaa, 0xf3, 0xb3, 0x07, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x89, 0x01,
	0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9,
	0xb3, 0x07, 0x26, 0xaa, 0xf3, 0xb3, 0x07, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x74, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3,
	0x07, 0x1d, 0xaa, 0xf3, 0xb3, 0x07, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x2d, 0x6c, 0x6f, 0x67, 0x73, 0x1a,
	0x47, 0xca, 0xf9, 0xb3, 0x07, 0x12, 0xc2, 0xf9, 0xb3, 0x07, 0x0d, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0xca, 0xf9, 0xb3, 0x07, 0x08, 0xd2, 0xf9, 0xb3,
	0x07, 0x03, 0x6d, 0x73, 0x2d, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xd8, 0xf9, 0xb3, 0x07, 0x01, 0xca,
	0xf9, 0xb3, 0x07, 0x06, 0xca, 0xf9, 0xb3, 0x07, 0x01, 0x2a, 0xca, 0xf9, 0xb3, 0x07, 0x09, 0xca,
	0xf9, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x42, 0x6a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75,
	0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67,
	0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d,
	0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_managed_secrets_proto_rawDescOnce sync.Once
	file_managed_secrets_proto_rawDescData = file_managed_secrets_proto_rawDesc
)

func file_managed_secrets_proto_rawDescGZIP() []byte {
	file_managed_secrets_proto_rawDescOnce.Do(func() {
		file_managed_secrets_proto_rawDescData = protoimpl.X.CompressGZIP(file_managed_secrets_proto_rawDescData)
	})
	return file_managed_secrets_proto_rawDescData
}

var file_managed_secrets_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_managed_secrets_proto_goTypes = []interface{}{
	(*ManagedSecretLogsRequest)(nil),      // 0: v1.ManagedSecretLogsRequest
	(*ManagedSecretLogsResponse)(nil),     // 1: v1.ManagedSecretLogsResponse
	(*ManagedSecretListRequest)(nil),      // 2: v1.ManagedSecretListRequest
	(*ManagedSecretListResponse)(nil),     // 3: v1.ManagedSecretListResponse
	(*ManagedSecretRetrieveRequest)(nil),  // 4: v1.ManagedSecretRetrieveRequest
	(*ManagedSecretRetrieveResponse)(nil), // 5: v1.ManagedSecretRetrieveResponse
	(*ManagedSecretValidateRequest)(nil),  // 6: v1.ManagedSecretValidateRequest
	(*ManagedSecretValidateResponse)(nil), // 7: v1.ManagedSecretValidateResponse
	(*ManagedSecretGetRequest)(nil),       // 8: v1.ManagedSecretGetRequest
	(*ManagedSecretGetResponse)(nil),      // 9: v1.ManagedSecretGetResponse
	(*ManagedSecretCreateRequest)(nil),    // 10: v1.ManagedSecretCreateRequest
	(*ManagedSecretCreateResponse)(nil),   // 11: v1.ManagedSecretCreateResponse
	(*ManagedSecretUpdateRequest)(nil),    // 12: v1.ManagedSecretUpdateRequest
	(*ManagedSecretUpdateResponse)(nil),   // 13: v1.ManagedSecretUpdateResponse
	(*ManagedSecretRotateRequest)(nil),    // 14: v1.ManagedSecretRotateRequest
	(*ManagedSecretRotateResponse)(nil),   // 15: v1.ManagedSecretRotateResponse
	(*ManagedSecretDeleteRequest)(nil),    // 16: v1.ManagedSecretDeleteRequest
	(*ManagedSecretDeleteResponse)(nil),   // 17: v1.ManagedSecretDeleteResponse
	(*ManagedSecretLog)(nil),              // 18: v1.ManagedSecretLog
	(*ManagedSecret)(nil),                 // 19: v1.ManagedSecret
	(*ManagedSecretPolicy)(nil),           // 20: v1.ManagedSecretPolicy
	(*ManagedSecretPasswordPolicy)(nil),   // 21: v1.ManagedSecretPasswordPolicy
	(*ManagedSecretRotationPolicy)(nil),   // 22: v1.ManagedSecretRotationPolicy
	(*ListRequestMetadata)(nil),           // 23: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),          // 24: v1.ListResponseMetadata
	(*RateLimitMetadata)(nil),             // 25: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),            // 26: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),           // 27: v1.GetResponseMetadata
	(*CreateRequestMetadata)(nil),         // 28: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),        // 29: v1.CreateResponseMetadata
	(*UpdateRequestMetadata)(nil),         // 30: v1.UpdateRequestMetadata
	(*UpdateResponseMetadata)(nil),        // 31: v1.UpdateResponseMetadata
	(*GenericRequestMetadata)(nil),        // 32: v1.GenericRequestMetadata
	(*GenericResponseMetadata)(nil),       // 33: v1.GenericResponseMetadata
	(*DeleteResponseMetadata)(nil),        // 34: v1.DeleteResponseMetadata
	(*timestamppb.Timestamp)(nil),         // 35: google.protobuf.Timestamp
	(*Tags)(nil),                          // 36: v1.Tags
}
var file_managed_secrets_proto_depIdxs = []int32{
	23, // 0: v1.ManagedSecretLogsRequest.meta:type_name -> v1.ListRequestMetadata
	24, // 1: v1.ManagedSecretLogsResponse.meta:type_name -> v1.ListResponseMetadata
	18, // 2: v1.ManagedSecretLogsResponse.managed_secret_logs:type_name -> v1.ManagedSecretLog
	25, // 3: v1.ManagedSecretLogsResponse.rate_limit:type_name -> v1.RateLimitMetadata
	23, // 4: v1.ManagedSecretListRequest.meta:type_name -> v1.ListRequestMetadata
	24, // 5: v1.ManagedSecretListResponse.meta:type_name -> v1.ListResponseMetadata
	19, // 6: v1.ManagedSecretListResponse.managed_secrets:type_name -> v1.ManagedSecret
	25, // 7: v1.ManagedSecretListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	26, // 8: v1.ManagedSecretRetrieveRequest.meta:type_name -> v1.GetRequestMetadata
	27, // 9: v1.ManagedSecretRetrieveResponse.meta:type_name -> v1.GetResponseMetadata
	19, // 10: v1.ManagedSecretRetrieveResponse.managed_secret:type_name -> v1.ManagedSecret
	25, // 11: v1.ManagedSecretRetrieveResponse.rate_limit:type_name -> v1.RateLimitMetadata
	26, // 12: v1.ManagedSecretValidateRequest.meta:type_name -> v1.GetRequestMetadata
	27, // 13: v1.ManagedSecretValidateResponse.meta:type_name -> v1.GetResponseMetadata
	25, // 14: v1.ManagedSecretValidateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	26, // 15: v1.ManagedSecretGetRequest.meta:type_name -> v1.GetRequestMetadata
	27, // 16: v1.ManagedSecretGetResponse.meta:type_name -> v1.GetResponseMetadata
	19, // 17: v1.ManagedSecretGetResponse.managed_secret:type_name -> v1.ManagedSecret
	25, // 18: v1.ManagedSecretGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	28, // 19: v1.ManagedSecretCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	19, // 20: v1.ManagedSecretCreateRequest.managed_secret:type_name -> v1.ManagedSecret
	29, // 21: v1.ManagedSecretCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	19, // 22: v1.ManagedSecretCreateResponse.managed_secret:type_name -> v1.ManagedSecret
	25, // 23: v1.ManagedSecretCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	30, // 24: v1.ManagedSecretUpdateRequest.meta:type_name -> v1.UpdateRequestMetadata
	19, // 25: v1.ManagedSecretUpdateRequest.managed_secret:type_name -> v1.ManagedSecret
	31, // 26: v1.ManagedSecretUpdateResponse.meta:type_name -> v1.UpdateResponseMetadata
	19, // 27: v1.ManagedSecretUpdateResponse.managed_secret:type_name -> v1.ManagedSecret
	25, // 28: v1.ManagedSecretUpdateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	32, // 29: v1.ManagedSecretRotateRequest.meta:type_name -> v1.GenericRequestMetadata
	33, // 30: v1.ManagedSecretRotateResponse.meta:type_name -> v1.GenericResponseMetadata
	25, // 31: v1.ManagedSecretRotateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	30, // 32: v1.ManagedSecretDeleteRequest.meta:type_name -> v1.UpdateRequestMetadata
	34, // 33: v1.ManagedSecretDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	25, // 34: v1.ManagedSecretDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	35, // 35: v1.ManagedSecretLog.created_at:type_name -> google.protobuf.Timestamp
	20, // 36: v1.ManagedSecret.policy:type_name -> v1.ManagedSecretPolicy
	36, // 37: v1.ManagedSecret.tags:type_name -> v1.Tags
	35, // 38: v1.ManagedSecret.last_rotated_at:type_name -> google.protobuf.Timestamp
	35, // 39: v1.ManagedSecret.expires_at:type_name -> google.protobuf.Timestamp
	22, // 40: v1.ManagedSecretPolicy.rotation_policy:type_name -> v1.ManagedSecretRotationPolicy
	21, // 41: v1.ManagedSecretPolicy.password_policy:type_name -> v1.ManagedSecretPasswordPolicy
	2,  // 42: v1.ManagedSecrets.List:input_type -> v1.ManagedSecretListRequest
	2,  // 43: v1.ManagedSecrets.ListByActor:input_type -> v1.ManagedSecretListRequest
	10, // 44: v1.ManagedSecrets.Create:input_type -> v1.ManagedSecretCreateRequest
	12, // 45: v1.ManagedSecrets.Update:input_type -> v1.ManagedSecretUpdateRequest
	14, // 46: v1.ManagedSecrets.Rotate:input_type -> v1.ManagedSecretRotateRequest
	16, // 47: v1.ManagedSecrets.Delete:input_type -> v1.ManagedSecretDeleteRequest
	8,  // 48: v1.ManagedSecrets.Get:input_type -> v1.ManagedSecretGetRequest
	4,  // 49: v1.ManagedSecrets.Retrieve:input_type -> v1.ManagedSecretRetrieveRequest
	6,  // 50: v1.ManagedSecrets.Validate:input_type -> v1.ManagedSecretValidateRequest
	0,  // 51: v1.ManagedSecrets.Logs:input_type -> v1.ManagedSecretLogsRequest
	3,  // 52: v1.ManagedSecrets.List:output_type -> v1.ManagedSecretListResponse
	3,  // 53: v1.ManagedSecrets.ListByActor:output_type -> v1.ManagedSecretListResponse
	11, // 54: v1.ManagedSecrets.Create:output_type -> v1.ManagedSecretCreateResponse
	13, // 55: v1.ManagedSecrets.Update:output_type -> v1.ManagedSecretUpdateResponse
	15, // 56: v1.ManagedSecrets.Rotate:output_type -> v1.ManagedSecretRotateResponse
	17, // 57: v1.ManagedSecrets.Delete:output_type -> v1.ManagedSecretDeleteResponse
	9,  // 58: v1.ManagedSecrets.Get:output_type -> v1.ManagedSecretGetResponse
	5,  // 59: v1.ManagedSecrets.Retrieve:output_type -> v1.ManagedSecretRetrieveResponse
	7,  // 60: v1.ManagedSecrets.Validate:output_type -> v1.ManagedSecretValidateResponse
	1,  // 61: v1.ManagedSecrets.Logs:output_type -> v1.ManagedSecretLogsResponse
	52, // [52:62] is the sub-list for method output_type
	42, // [42:52] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_managed_secrets_proto_init() }
func file_managed_secrets_proto_init() {
	if File_managed_secrets_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	file_tags_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_managed_secrets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretRetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretRetrieveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretRotateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretRotateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretPasswordPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_managed_secrets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagedSecretRotationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_managed_secrets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_managed_secrets_proto_goTypes,
		DependencyIndexes: file_managed_secrets_proto_depIdxs,
		MessageInfos:      file_managed_secrets_proto_msgTypes,
	}.Build()
	File_managed_secrets_proto = out.File
	file_managed_secrets_proto_rawDesc = nil
	file_managed_secrets_proto_goTypes = nil
	file_managed_secrets_proto_depIdxs = nil
}
