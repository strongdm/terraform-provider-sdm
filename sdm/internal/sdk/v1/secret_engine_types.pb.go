// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: secret_engine_types.proto

// Code generated by protogen. DO NOT EDIT.

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A SecretEngine is managing secrets in SecretStores.
type SecretEngine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SecretEngine:
	//
	//	*SecretEngine_ActiveDirectory
	//	*SecretEngine_KeyValue
	SecretEngine isSecretEngine_SecretEngine `protobuf_oneof:"secret_engine"`
}

func (x *SecretEngine) Reset() {
	*x = SecretEngine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_engine_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretEngine) ProtoMessage() {}

func (x *SecretEngine) ProtoReflect() protoreflect.Message {
	mi := &file_secret_engine_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretEngine.ProtoReflect.Descriptor instead.
func (*SecretEngine) Descriptor() ([]byte, []int) {
	return file_secret_engine_types_proto_rawDescGZIP(), []int{0}
}

func (m *SecretEngine) GetSecretEngine() isSecretEngine_SecretEngine {
	if m != nil {
		return m.SecretEngine
	}
	return nil
}

func (x *SecretEngine) GetActiveDirectory() *ActiveDirectoryEngine {
	if x, ok := x.GetSecretEngine().(*SecretEngine_ActiveDirectory); ok {
		return x.ActiveDirectory
	}
	return nil
}

func (x *SecretEngine) GetKeyValue() *KeyValueEngine {
	if x, ok := x.GetSecretEngine().(*SecretEngine_KeyValue); ok {
		return x.KeyValue
	}
	return nil
}

type isSecretEngine_SecretEngine interface {
	isSecretEngine_SecretEngine()
}

type SecretEngine_ActiveDirectory struct {
	ActiveDirectory *ActiveDirectoryEngine `protobuf:"bytes,332,opt,name=active_directory,json=activeDirectory,proto3,oneof"`
}

type SecretEngine_KeyValue struct {
	KeyValue *KeyValueEngine `protobuf:"bytes,331,opt,name=key_value,json=keyValue,proto3,oneof"`
}

func (*SecretEngine_ActiveDirectory) isSecretEngine_SecretEngine() {}

func (*SecretEngine_KeyValue) isSecretEngine_SecretEngine() {}

type ActiveDirectoryEngine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default time-to-live duration of the password after it's read. Once the ttl has passed, a password will be rotated.
	AfterReadTtl *durationpb.Duration `protobuf:"bytes,1012,opt,name=after_read_ttl,json=afterReadTtl,proto3" json:"after_read_ttl,omitempty"`
	// Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com
	Binddn string `protobuf:"bytes,108,opt,name=binddn,proto3" json:"binddn,omitempty"`
	// Password to use along with binddn when performing user search.
	Bindpass string `protobuf:"bytes,109,opt,name=bindpass,proto3" json:"bindpass,omitempty"`
	// CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.
	Certificate string `protobuf:"bytes,107,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.
	ConnectionTimeout uint32 `protobuf:"varint,103,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
	// If set to true this will prevent password change timestamp validation in Active Directory when validating credentials
	DoNotValidateTimestamps bool `protobuf:"varint,1015,opt,name=do_not_validate_timestamps,json=doNotValidateTimestamps,proto3" json:"do_not_validate_timestamps,omitempty"`
	// If true, skips LDAP server SSL certificate verification - insecure, use with caution!
	InsecureTls bool `protobuf:"varint,106,opt,name=insecure_tls,json=insecureTls,proto3" json:"insecure_tls,omitempty"`
	// The maximum retry duration in case of automatic failure.
	// On failed ttl rotation attempt it will be retried in an increasing intervals until it reaches max_backoff_duration
	MaxBackoffDuration *durationpb.Duration `protobuf:"bytes,1016,opt,name=max_backoff_duration,json=maxBackoffDuration,proto3" json:"max_backoff_duration,omitempty"`
	// Policy for password creation
	Policy *SecretEnginePolicy `protobuf:"bytes,1014,opt,name=policy,proto3" json:"policy,omitempty"`
	// Timeout, in seconds, for the connection when making requests against the server before returning back an error.
	RequestTimeout uint32 `protobuf:"varint,104,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// If true, issues a StartTLS command after establishing an unencrypted connection.
	StartTls bool `protobuf:"varint,105,opt,name=start_tls,json=startTls,proto3" json:"start_tls,omitempty"`
	// The default password time-to-live duration. Once the ttl has passed, a password will be rotated the next time it's requested.
	Ttl *durationpb.Duration `protobuf:"bytes,1013,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// The domain (userPrincipalDomain) used to construct a UPN string for authentication.
	Upndomain string `protobuf:"bytes,1011,opt,name=upndomain,proto3" json:"upndomain,omitempty"`
	// The LDAP server to connect to.
	Url string `protobuf:"bytes,102,opt,name=url,proto3" json:"url,omitempty"`
	// Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com
	Userdn string `protobuf:"bytes,1010,opt,name=userdn,proto3" json:"userdn,omitempty"`
	// Unique identifier of the Secret Engine.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Secret Engine.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of a Secret Engine
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Backing secret store identifier
	SecretStoreId string `protobuf:"bytes,5,opt,name=secret_store_id,json=secretStoreId,proto3" json:"secret_store_id,omitempty"`
	// Backing Secret Store root path where managed secrets are going to be stored
	SecretStoreRootPath string `protobuf:"bytes,6,opt,name=secret_store_root_path,json=secretStoreRootPath,proto3" json:"secret_store_root_path,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	// Public key linked with a secret engine
	PublicKey []byte `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// An interval of public/private key rotation for secret engine in days
	KeyRotationIntervalDays int32 `protobuf:"varint,9,opt,name=key_rotation_interval_days,json=keyRotationIntervalDays,proto3" json:"key_rotation_interval_days,omitempty"`
}

func (x *ActiveDirectoryEngine) Reset() {
	*x = ActiveDirectoryEngine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_engine_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveDirectoryEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveDirectoryEngine) ProtoMessage() {}

func (x *ActiveDirectoryEngine) ProtoReflect() protoreflect.Message {
	mi := &file_secret_engine_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveDirectoryEngine.ProtoReflect.Descriptor instead.
func (*ActiveDirectoryEngine) Descriptor() ([]byte, []int) {
	return file_secret_engine_types_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveDirectoryEngine) GetAfterReadTtl() *durationpb.Duration {
	if x != nil {
		return x.AfterReadTtl
	}
	return nil
}

func (x *ActiveDirectoryEngine) GetBinddn() string {
	if x != nil {
		return x.Binddn
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetBindpass() string {
	if x != nil {
		return x.Bindpass
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetConnectionTimeout() uint32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

func (x *ActiveDirectoryEngine) GetDoNotValidateTimestamps() bool {
	if x != nil {
		return x.DoNotValidateTimestamps
	}
	return false
}

func (x *ActiveDirectoryEngine) GetInsecureTls() bool {
	if x != nil {
		return x.InsecureTls
	}
	return false
}

func (x *ActiveDirectoryEngine) GetMaxBackoffDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxBackoffDuration
	}
	return nil
}

func (x *ActiveDirectoryEngine) GetPolicy() *SecretEnginePolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *ActiveDirectoryEngine) GetRequestTimeout() uint32 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *ActiveDirectoryEngine) GetStartTls() bool {
	if x != nil {
		return x.StartTls
	}
	return false
}

func (x *ActiveDirectoryEngine) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *ActiveDirectoryEngine) GetUpndomain() string {
	if x != nil {
		return x.Upndomain
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetUserdn() string {
	if x != nil {
		return x.Userdn
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetSecretStoreId() string {
	if x != nil {
		return x.SecretStoreId
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetSecretStoreRootPath() string {
	if x != nil {
		return x.SecretStoreRootPath
	}
	return ""
}

func (x *ActiveDirectoryEngine) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ActiveDirectoryEngine) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ActiveDirectoryEngine) GetKeyRotationIntervalDays() int32 {
	if x != nil {
		return x.KeyRotationIntervalDays
	}
	return 0
}

type KeyValueEngine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the Secret Engine.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique human-readable name of the Secret Engine.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of a Secret Engine
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Backing secret store identifier
	SecretStoreId string `protobuf:"bytes,5,opt,name=secret_store_id,json=secretStoreId,proto3" json:"secret_store_id,omitempty"`
	// Backing Secret Store root path where managed secrets are going to be stored
	SecretStoreRootPath string `protobuf:"bytes,6,opt,name=secret_store_root_path,json=secretStoreRootPath,proto3" json:"secret_store_root_path,omitempty"`
	// Tags is a map of key, value pairs.
	Tags *Tags `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	// Public key linked with a secret engine
	PublicKey []byte `protobuf:"bytes,8,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// An interval of public/private key rotation for secret engine in days
	KeyRotationIntervalDays int32 `protobuf:"varint,9,opt,name=key_rotation_interval_days,json=keyRotationIntervalDays,proto3" json:"key_rotation_interval_days,omitempty"`
}

func (x *KeyValueEngine) Reset() {
	*x = KeyValueEngine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_secret_engine_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueEngine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueEngine) ProtoMessage() {}

func (x *KeyValueEngine) ProtoReflect() protoreflect.Message {
	mi := &file_secret_engine_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueEngine.ProtoReflect.Descriptor instead.
func (*KeyValueEngine) Descriptor() ([]byte, []int) {
	return file_secret_engine_types_proto_rawDescGZIP(), []int{2}
}

func (x *KeyValueEngine) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KeyValueEngine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyValueEngine) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KeyValueEngine) GetSecretStoreId() string {
	if x != nil {
		return x.SecretStoreId
	}
	return ""
}

func (x *KeyValueEngine) GetSecretStoreRootPath() string {
	if x != nil {
		return x.SecretStoreRootPath
	}
	return ""
}

func (x *KeyValueEngine) GetTags() *Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KeyValueEngine) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *KeyValueEngine) GetKeyRotationIntervalDays() int32 {
	if x != nil {
		return x.KeyRotationIntervalDays
	}
	return 0
}

var File_secret_engine_types_proto protoreflect.FileDescriptor

var file_secret_engine_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a,
	0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xcc, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x42, 0x39,
	0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xca, 0xf3, 0xb3, 0x07, 0x25, 0xc2, 0xf4, 0xb3, 0x07, 0x20, 0x0a,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x42, 0x32, 0xf2, 0xf8, 0xb3, 0x07, 0x23, 0xca, 0xf3, 0xb3, 0x07, 0x1e,
	0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01,
	0x42, 0x7a, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x69, 0xaa, 0xf8, 0xb3, 0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xaa, 0xf8, 0xb3, 0x07, 0x09, 0xaa, 0xf8, 0xb3, 0x07, 0x04, 0x74, 0x61, 0x67, 0x73, 0xaa,
	0xf8, 0xb3, 0x07, 0x14, 0xaa, 0xf8, 0xb3, 0x07, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0xaa, 0xf8, 0xb3, 0x07, 0x1b, 0xaa, 0xf8, 0xb3,
	0x07, 0x16, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0xaa, 0xf8, 0xb3, 0x07, 0x0f, 0xaa, 0xf8, 0xb3,
	0x07, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0xff, 0x0e, 0x0a,
	0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x72, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0xf4, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x30, 0xf2, 0xf8, 0xb3, 0x07,
	0x2b, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x21, 0xc2, 0xf4, 0xb3, 0x07, 0x1c,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0c,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x54, 0x74, 0x6c, 0x52, 0x0c, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x54, 0x74, 0x6c, 0x12, 0x47, 0x0a, 0x06, 0x62, 0x69,
	0x6e, 0x64, 0x64, 0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07,
	0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b,
	0xc2, 0xf4, 0xb3, 0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x64, 0x6e, 0x52, 0x06, 0x62, 0x69, 0x6e,
	0x64, 0x64, 0x6e, 0x12, 0x4d, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xf2, 0xf8, 0xb3, 0x07, 0x2c, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2, 0xf4, 0xb3, 0x07, 0x18,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x08,
	0x62, 0x69, 0x6e, 0x64, 0x70, 0x61, 0x73, 0x73, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x70, 0x61,
	0x73, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xf2, 0xf8, 0xb3, 0x07, 0x2a, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3, 0x07, 0x1b, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0b, 0x63, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x35, 0xf2, 0xf8, 0xb3, 0x07, 0x30, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x26, 0xc2, 0xf4, 0xb3, 0x07, 0x21, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x79, 0x0a, 0x1a, 0x64,
	0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x3b, 0xf2, 0xf8, 0xb3, 0x07, 0x36, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07,
	0x2c, 0xc2, 0xf4, 0xb3, 0x07, 0x27, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x17, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x52, 0x17, 0x64,
	0x6f, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2f, 0xf2, 0xf8,
	0xb3, 0x07, 0x2a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x20, 0xc2, 0xf4, 0xb3,
	0x07, 0x1b, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x54, 0x6c, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xca, 0xf3, 0xb3, 0x07, 0x27, 0xc2, 0xf4, 0xb3, 0x07, 0x22, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x6d, 0x61, 0x78, 0x42, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5b, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0xf6, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x2a, 0xf2, 0xf8, 0xb3, 0x07,
	0x25, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3, 0x07, 0x16,
	0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5b,
	0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x32, 0xf2, 0xf8, 0xb3, 0x07, 0x2d, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x23, 0xc2, 0xf4, 0xb3, 0x07, 0x1e, 0x0a, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2c,
	0xf2, 0xf8, 0xb3, 0x07, 0x27, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1d, 0xc2,
	0xf4, 0xb3, 0x07, 0x18, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6c, 0x73, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0xf5, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x27, 0xf2, 0xf8, 0xb3, 0x07, 0x22, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x18,
	0xc2, 0xf4, 0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x03, 0x74, 0x74, 0x6c, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x4c, 0x0a,
	0x09, 0x75, 0x70, 0x6e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xf2, 0xf8, 0xb3, 0x07, 0x28, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3,
	0x07, 0x1e, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x75, 0x70, 0x6e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x09, 0x75, 0x70, 0x6e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x27, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x18, 0xc2, 0xf4,
	0xb3, 0x07, 0x13, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x03, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x43, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x64, 0x6e, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xf2, 0xf8,
	0xb3, 0x07, 0x25, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x1b, 0xc2, 0xf4, 0xb3,
	0x07, 0x16, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x06, 0x75, 0x73, 0x65, 0x72, 0x64, 0x6e, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x64, 0x6e,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07,
	0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xf2, 0xf8, 0xb3, 0x07, 0x0e, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07, 0x04,
	0x21, 0x63, 0x6c, 0x69, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1e, 0xf2, 0xf8, 0xb3, 0x07, 0x19, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xb2, 0xf4,
	0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x47, 0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x3a, 0x80, 0x01, 0xfa, 0xf8,
	0xb3, 0x07, 0x7b, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x71, 0x88, 0xf4, 0xb3,
	0x07, 0x01, 0xc2, 0xf4, 0xb3, 0x07, 0x17, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0xc2, 0xf4,
	0xb3, 0x07, 0x20, 0x0a, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0xc2, 0xf4, 0xb3, 0x07, 0x26, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x10, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x98,
	0x04, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3,
	0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xf2, 0xf8, 0xb3, 0x07, 0x0e, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07,
	0x04, 0x21, 0x63, 0x6c, 0x69, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x1e, 0xf2, 0xf8, 0xb3, 0x07, 0x19, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xb2,
	0xf4, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x1a, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x17, 0x6b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x61, 0x79, 0x73, 0x3a, 0x6b, 0xfa, 0xf8,
	0xb3, 0x07, 0x66, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xca, 0xf3, 0xb3, 0x07, 0x5c, 0x88, 0xf4, 0xb3,
	0x07, 0x01, 0xc2, 0xf4, 0xb3, 0x07, 0x10, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x19, 0x0a, 0x0c, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0xc2, 0xf4, 0xb3, 0x07, 0x1f, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x72,
	0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x09,
	0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6d, 0x0a, 0x19, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e,
	0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d,
	0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_secret_engine_types_proto_rawDescOnce sync.Once
	file_secret_engine_types_proto_rawDescData = file_secret_engine_types_proto_rawDesc
)

func file_secret_engine_types_proto_rawDescGZIP() []byte {
	file_secret_engine_types_proto_rawDescOnce.Do(func() {
		file_secret_engine_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_secret_engine_types_proto_rawDescData)
	})
	return file_secret_engine_types_proto_rawDescData
}

var file_secret_engine_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_secret_engine_types_proto_goTypes = []interface{}{
	(*SecretEngine)(nil),          // 0: v1.SecretEngine
	(*ActiveDirectoryEngine)(nil), // 1: v1.ActiveDirectoryEngine
	(*KeyValueEngine)(nil),        // 2: v1.KeyValueEngine
	(*durationpb.Duration)(nil),   // 3: google.protobuf.Duration
	(*SecretEnginePolicy)(nil),    // 4: v1.SecretEnginePolicy
	(*Tags)(nil),                  // 5: v1.Tags
}
var file_secret_engine_types_proto_depIdxs = []int32{
	1, // 0: v1.SecretEngine.active_directory:type_name -> v1.ActiveDirectoryEngine
	2, // 1: v1.SecretEngine.key_value:type_name -> v1.KeyValueEngine
	3, // 2: v1.ActiveDirectoryEngine.after_read_ttl:type_name -> google.protobuf.Duration
	3, // 3: v1.ActiveDirectoryEngine.max_backoff_duration:type_name -> google.protobuf.Duration
	4, // 4: v1.ActiveDirectoryEngine.policy:type_name -> v1.SecretEnginePolicy
	3, // 5: v1.ActiveDirectoryEngine.ttl:type_name -> google.protobuf.Duration
	5, // 6: v1.ActiveDirectoryEngine.tags:type_name -> v1.Tags
	5, // 7: v1.KeyValueEngine.tags:type_name -> v1.Tags
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_secret_engine_types_proto_init() }
func file_secret_engine_types_proto_init() {
	if File_secret_engine_types_proto != nil {
		return
	}
	file_options_proto_init()
	file_tags_proto_init()
	file_secret_engine_policy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_secret_engine_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretEngine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_engine_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveDirectoryEngine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_secret_engine_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueEngine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_secret_engine_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SecretEngine_ActiveDirectory)(nil),
		(*SecretEngine_KeyValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_secret_engine_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_secret_engine_types_proto_goTypes,
		DependencyIndexes: file_secret_engine_types_proto_depIdxs,
		MessageInfos:      file_secret_engine_types_proto_msgTypes,
	}.Build()
	File_secret_engine_types_proto = out.File
	file_secret_engine_types_proto_rawDesc = nil
	file_secret_engine_types_proto_goTypes = nil
	file_secret_engine_types_proto_depIdxs = nil
}
