// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: peering_group_peers.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PeeringGroupPeerCreateRequest creates a new link between two peering groups.
type PeeringGroupPeerCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new PeeringGroupPeer.
	PeeringGroupPeer *PeeringGroupPeer `protobuf:"bytes,2,opt,name=peering_group_peer,json=peeringGroupPeer,proto3" json:"peering_group_peer,omitempty"`
}

func (x *PeeringGroupPeerCreateRequest) Reset() {
	*x = PeeringGroupPeerCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerCreateRequest) ProtoMessage() {}

func (x *PeeringGroupPeerCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerCreateRequest.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerCreateRequest) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{0}
}

func (x *PeeringGroupPeerCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerCreateRequest) GetPeeringGroupPeer() *PeeringGroupPeer {
	if x != nil {
		return x.PeeringGroupPeer
	}
	return nil
}

// PeeringGroupPeerCreateResponse reports how the PeeringGroupPeer was created in the system.
type PeeringGroupPeerCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created PeeringGroupPeer.
	PeeringGroupPeer *PeeringGroupPeer `protobuf:"bytes,2,opt,name=peering_group_peer,json=peeringGroupPeer,proto3" json:"peering_group_peer,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *PeeringGroupPeerCreateResponse) Reset() {
	*x = PeeringGroupPeerCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerCreateResponse) ProtoMessage() {}

func (x *PeeringGroupPeerCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerCreateResponse.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerCreateResponse) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{1}
}

func (x *PeeringGroupPeerCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerCreateResponse) GetPeeringGroupPeer() *PeeringGroupPeer {
	if x != nil {
		return x.PeeringGroupPeer
	}
	return nil
}

func (x *PeeringGroupPeerCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// PeeringGroupPeerGetRequest specifies which PeeringGroupPeer to retrieve.
type PeeringGroupPeerGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the PeeringGroupPeer to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeeringGroupPeerGetRequest) Reset() {
	*x = PeeringGroupPeerGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerGetRequest) ProtoMessage() {}

func (x *PeeringGroupPeerGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerGetRequest.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerGetRequest) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{2}
}

func (x *PeeringGroupPeerGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PeeringGroupPeerGetResponse returns a requested PeeringGroupPeer.
type PeeringGroupPeerGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested PeeringGroupPeer.
	PeeringGroupPeer *PeeringGroupPeer `protobuf:"bytes,2,opt,name=peering_group_peer,json=peeringGroupPeer,proto3" json:"peering_group_peer,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *PeeringGroupPeerGetResponse) Reset() {
	*x = PeeringGroupPeerGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerGetResponse) ProtoMessage() {}

func (x *PeeringGroupPeerGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerGetResponse.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerGetResponse) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{3}
}

func (x *PeeringGroupPeerGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerGetResponse) GetPeeringGroupPeer() *PeeringGroupPeer {
	if x != nil {
		return x.PeeringGroupPeer
	}
	return nil
}

func (x *PeeringGroupPeerGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// PeeringGroupPeerDeleteRequest identifies a PeeringGroupPeer by ID to delete.
type PeeringGroupPeerDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the PeeringGroupPeer to delete.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PeeringGroupPeerDeleteRequest) Reset() {
	*x = PeeringGroupPeerDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerDeleteRequest) ProtoMessage() {}

func (x *PeeringGroupPeerDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerDeleteRequest.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerDeleteRequest) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{4}
}

func (x *PeeringGroupPeerDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// PeeringGroupPeerDeleteResponse returns information about a PeeringGroupPeer that was deleted.
type PeeringGroupPeerDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,2,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *PeeringGroupPeerDeleteResponse) Reset() {
	*x = PeeringGroupPeerDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerDeleteResponse) ProtoMessage() {}

func (x *PeeringGroupPeerDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerDeleteResponse.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerDeleteResponse) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{5}
}

func (x *PeeringGroupPeerDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// PeeringGroupPeerListRequest specifies criteria for retrieving a list of PeeringGroupPeers.
type PeeringGroupPeerListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging parameters for the query.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string. Not supported yet.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *PeeringGroupPeerListRequest) Reset() {
	*x = PeeringGroupPeerListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerListRequest) ProtoMessage() {}

func (x *PeeringGroupPeerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerListRequest.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerListRequest) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{6}
}

func (x *PeeringGroupPeerListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// PeeringGroupPeerListResponse returns a list of PeeringGroupPeers that meet the criteria of a
// PeeringGroupPeerListRequest.
type PeeringGroupPeerListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paging information for the query.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A single page of results matching the list request criteria.
	PeeringGroupPeers []*PeeringGroupPeer `protobuf:"bytes,2,rep,name=peering_group_peers,json=peeringGroupPeers,proto3" json:"peering_group_peers,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *PeeringGroupPeerListResponse) Reset() {
	*x = PeeringGroupPeerListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeerListResponse) ProtoMessage() {}

func (x *PeeringGroupPeerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeerListResponse.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeerListResponse) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{7}
}

func (x *PeeringGroupPeerListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PeeringGroupPeerListResponse) GetPeeringGroupPeers() []*PeeringGroupPeer {
	if x != nil {
		return x.PeeringGroupPeers
	}
	return nil
}

func (x *PeeringGroupPeerListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// PeeringGroupPeer represents the link between two PeeringGroups
type PeeringGroupPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the Attachment.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Group ID from which the link will originate.
	GroupId string `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// Peering Group ID to which Group ID will link.
	PeersWithGroupId string `protobuf:"bytes,4,opt,name=peers_with_group_id,json=peersWithGroupId,proto3" json:"peers_with_group_id,omitempty"`
}

func (x *PeeringGroupPeer) Reset() {
	*x = PeeringGroupPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_peering_group_peers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeeringGroupPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeeringGroupPeer) ProtoMessage() {}

func (x *PeeringGroupPeer) ProtoReflect() protoreflect.Message {
	mi := &file_peering_group_peers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeeringGroupPeer.ProtoReflect.Descriptor instead.
func (*PeeringGroupPeer) Descriptor() ([]byte, []int) {
	return file_peering_group_peers_proto_rawDescGZIP(), []int{8}
}

func (x *PeeringGroupPeer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeeringGroupPeer) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *PeeringGroupPeer) GetPeersWithGroupId() string {
	if x != nil {
		return x.PeersWithGroupId
	}
	return ""
}

var File_peering_group_peers_proto protoreflect.FileDescriptor

var file_peering_group_peers_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a,
	0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a,
	0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x1d, 0x50,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x12, 0x70,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x22, 0x9c, 0x02, 0x0a, 0x1e,
	0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07,
	0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a,
	0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x64, 0x0a, 0x1a, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x96, 0x02, 0x0a, 0x1b, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x12, 0x70, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3,
	0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12,
	0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa,
	0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6a, 0x0a, 0x1d, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x1e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06,
	0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d,
	0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6e, 0x0a, 0x1b, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x1c, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x13, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb8, 0xf3, 0xb3,
	0x07, 0x01, 0x52, 0x11, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07,
	0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07,
	0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x50, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8,
	0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xd0, 0xf4, 0xb3, 0x07, 0x01, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x13, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xd0,
	0xf4, 0xb3, 0x07, 0x01, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0x32, 0xdb, 0x04, 0x0a, 0x11, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x7e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xf9, 0xb3, 0x07, 0x09,
	0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1a, 0xaa, 0xf3,
	0xb3, 0x07, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xf9, 0xb3, 0x07,
	0x0b, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x82, 0xf9, 0xb3, 0x07,
	0x1f, 0xaa, 0xf3, 0xb3, 0x07, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x79, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2,
	0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1f, 0xaa, 0xf3, 0xb3, 0x07,
	0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x77, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3,
	0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x1a, 0xaa, 0xf3, 0xb3, 0x07, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x73, 0x1a, 0x4a, 0xca, 0xf9, 0xb3, 0x07, 0x15, 0xc2, 0xf9, 0xb3, 0x07, 0x10,
	0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72,
	0xca, 0xf9, 0xb3, 0x07, 0x08, 0xd2, 0xf9, 0xb3, 0x07, 0x03, 0x67, 0x70, 0x2d, 0xca, 0xf9, 0xb3,
	0x07, 0x06, 0xca, 0xf9, 0xb3, 0x07, 0x01, 0x2a, 0xca, 0xf9, 0xb3, 0x07, 0x09, 0xca, 0xf9, 0xb3,
	0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xd8, 0xf9, 0xb3, 0x07, 0x01,
	0x42, 0x6d, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x19, 0x50,
	0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74,
	0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_peering_group_peers_proto_rawDescOnce sync.Once
	file_peering_group_peers_proto_rawDescData = file_peering_group_peers_proto_rawDesc
)

func file_peering_group_peers_proto_rawDescGZIP() []byte {
	file_peering_group_peers_proto_rawDescOnce.Do(func() {
		file_peering_group_peers_proto_rawDescData = protoimpl.X.CompressGZIP(file_peering_group_peers_proto_rawDescData)
	})
	return file_peering_group_peers_proto_rawDescData
}

var file_peering_group_peers_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_peering_group_peers_proto_goTypes = []interface{}{
	(*PeeringGroupPeerCreateRequest)(nil),  // 0: v1.PeeringGroupPeerCreateRequest
	(*PeeringGroupPeerCreateResponse)(nil), // 1: v1.PeeringGroupPeerCreateResponse
	(*PeeringGroupPeerGetRequest)(nil),     // 2: v1.PeeringGroupPeerGetRequest
	(*PeeringGroupPeerGetResponse)(nil),    // 3: v1.PeeringGroupPeerGetResponse
	(*PeeringGroupPeerDeleteRequest)(nil),  // 4: v1.PeeringGroupPeerDeleteRequest
	(*PeeringGroupPeerDeleteResponse)(nil), // 5: v1.PeeringGroupPeerDeleteResponse
	(*PeeringGroupPeerListRequest)(nil),    // 6: v1.PeeringGroupPeerListRequest
	(*PeeringGroupPeerListResponse)(nil),   // 7: v1.PeeringGroupPeerListResponse
	(*PeeringGroupPeer)(nil),               // 8: v1.PeeringGroupPeer
	(*CreateRequestMetadata)(nil),          // 9: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),         // 10: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),              // 11: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),             // 12: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),            // 13: v1.GetResponseMetadata
	(*DeleteRequestMetadata)(nil),          // 14: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),         // 15: v1.DeleteResponseMetadata
	(*ListRequestMetadata)(nil),            // 16: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),           // 17: v1.ListResponseMetadata
}
var file_peering_group_peers_proto_depIdxs = []int32{
	9,  // 0: v1.PeeringGroupPeerCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	8,  // 1: v1.PeeringGroupPeerCreateRequest.peering_group_peer:type_name -> v1.PeeringGroupPeer
	10, // 2: v1.PeeringGroupPeerCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	8,  // 3: v1.PeeringGroupPeerCreateResponse.peering_group_peer:type_name -> v1.PeeringGroupPeer
	11, // 4: v1.PeeringGroupPeerCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 5: v1.PeeringGroupPeerGetRequest.meta:type_name -> v1.GetRequestMetadata
	13, // 6: v1.PeeringGroupPeerGetResponse.meta:type_name -> v1.GetResponseMetadata
	8,  // 7: v1.PeeringGroupPeerGetResponse.peering_group_peer:type_name -> v1.PeeringGroupPeer
	11, // 8: v1.PeeringGroupPeerGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 9: v1.PeeringGroupPeerDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	15, // 10: v1.PeeringGroupPeerDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	11, // 11: v1.PeeringGroupPeerDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	16, // 12: v1.PeeringGroupPeerListRequest.meta:type_name -> v1.ListRequestMetadata
	17, // 13: v1.PeeringGroupPeerListResponse.meta:type_name -> v1.ListResponseMetadata
	8,  // 14: v1.PeeringGroupPeerListResponse.peering_group_peers:type_name -> v1.PeeringGroupPeer
	11, // 15: v1.PeeringGroupPeerListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	0,  // 16: v1.PeeringGroupPeers.Create:input_type -> v1.PeeringGroupPeerCreateRequest
	4,  // 17: v1.PeeringGroupPeers.Delete:input_type -> v1.PeeringGroupPeerDeleteRequest
	2,  // 18: v1.PeeringGroupPeers.Get:input_type -> v1.PeeringGroupPeerGetRequest
	6,  // 19: v1.PeeringGroupPeers.List:input_type -> v1.PeeringGroupPeerListRequest
	1,  // 20: v1.PeeringGroupPeers.Create:output_type -> v1.PeeringGroupPeerCreateResponse
	5,  // 21: v1.PeeringGroupPeers.Delete:output_type -> v1.PeeringGroupPeerDeleteResponse
	3,  // 22: v1.PeeringGroupPeers.Get:output_type -> v1.PeeringGroupPeerGetResponse
	7,  // 23: v1.PeeringGroupPeers.List:output_type -> v1.PeeringGroupPeerListResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_peering_group_peers_proto_init() }
func file_peering_group_peers_proto_init() {
	if File_peering_group_peers_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_peering_group_peers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeerListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_peering_group_peers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeeringGroupPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_peering_group_peers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_peering_group_peers_proto_goTypes,
		DependencyIndexes: file_peering_group_peers_proto_depIdxs,
		MessageInfos:      file_peering_group_peers_proto_msgTypes,
	}.Build()
	File_peering_group_peers_proto = out.File
	file_peering_group_peers_proto_rawDesc = nil
	file_peering_group_peers_proto_goTypes = nil
	file_peering_group_peers_proto_depIdxs = nil
}
