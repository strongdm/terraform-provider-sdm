// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SecretEnginesClient is the client API for SecretEngines service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretEnginesClient interface {
	// List returns a list of Secret Engines
	List(ctx context.Context, in *SecretEngineListRequest, opts ...grpc.CallOption) (*SecretEngineListResponse, error)
	// Get returns a secret engine details
	Get(ctx context.Context, in *SecretEngineGetRequest, opts ...grpc.CallOption) (*SecretEngineGetResponse, error)
	// Create creates a secret engine
	Create(ctx context.Context, in *SecretEngineCreateRequest, opts ...grpc.CallOption) (*SecretEngineCreateResponse, error)
	// Update updates a secret engine
	Update(ctx context.Context, in *SecretEngineUpdateRequest, opts ...grpc.CallOption) (*SecretEngineUpdateResponse, error)
	// Delete deletes a secret engine
	Delete(ctx context.Context, in *SecretEngineDeleteRequest, opts ...grpc.CallOption) (*SecretEngineDeleteResponse, error)
	// ListSecretStores returns a list of Secret Stores that can be used as a backing store
	// for Secret Engine
	ListSecretStores(ctx context.Context, in *SecretStoreListRequest, opts ...grpc.CallOption) (*SecretStoreListResponse, error)
	// GenerateKeys generates a private key, stores it in a secret store and stores a public key in a secret engine
	GenerateKeys(ctx context.Context, in *GenerateKeysRequest, opts ...grpc.CallOption) (*GenerateKeysResponse, error)
	// Healthcheck triggers a healthcheck for all nodes serving a secret engine
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
	// Rotate rotates secret engine's credentials
	Rotate(ctx context.Context, in *SecretEngineRotateRequest, opts ...grpc.CallOption) (*SecretEngineRotateResponse, error)
}

type secretEnginesClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretEnginesClient(cc grpc.ClientConnInterface) SecretEnginesClient {
	return &secretEnginesClient{cc}
}

func (c *secretEnginesClient) List(ctx context.Context, in *SecretEngineListRequest, opts ...grpc.CallOption) (*SecretEngineListResponse, error) {
	out := new(SecretEngineListResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) Get(ctx context.Context, in *SecretEngineGetRequest, opts ...grpc.CallOption) (*SecretEngineGetResponse, error) {
	out := new(SecretEngineGetResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) Create(ctx context.Context, in *SecretEngineCreateRequest, opts ...grpc.CallOption) (*SecretEngineCreateResponse, error) {
	out := new(SecretEngineCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) Update(ctx context.Context, in *SecretEngineUpdateRequest, opts ...grpc.CallOption) (*SecretEngineUpdateResponse, error) {
	out := new(SecretEngineUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) Delete(ctx context.Context, in *SecretEngineDeleteRequest, opts ...grpc.CallOption) (*SecretEngineDeleteResponse, error) {
	out := new(SecretEngineDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) ListSecretStores(ctx context.Context, in *SecretStoreListRequest, opts ...grpc.CallOption) (*SecretStoreListResponse, error) {
	out := new(SecretStoreListResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/ListSecretStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) GenerateKeys(ctx context.Context, in *GenerateKeysRequest, opts ...grpc.CallOption) (*GenerateKeysResponse, error) {
	out := new(GenerateKeysResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/GenerateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/Healthcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretEnginesClient) Rotate(ctx context.Context, in *SecretEngineRotateRequest, opts ...grpc.CallOption) (*SecretEngineRotateResponse, error) {
	out := new(SecretEngineRotateResponse)
	err := c.cc.Invoke(ctx, "/v1.SecretEngines/Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretEnginesServer is the server API for SecretEngines service.
// All implementations must embed UnimplementedSecretEnginesServer
// for forward compatibility
type SecretEnginesServer interface {
	// List returns a list of Secret Engines
	List(context.Context, *SecretEngineListRequest) (*SecretEngineListResponse, error)
	// Get returns a secret engine details
	Get(context.Context, *SecretEngineGetRequest) (*SecretEngineGetResponse, error)
	// Create creates a secret engine
	Create(context.Context, *SecretEngineCreateRequest) (*SecretEngineCreateResponse, error)
	// Update updates a secret engine
	Update(context.Context, *SecretEngineUpdateRequest) (*SecretEngineUpdateResponse, error)
	// Delete deletes a secret engine
	Delete(context.Context, *SecretEngineDeleteRequest) (*SecretEngineDeleteResponse, error)
	// ListSecretStores returns a list of Secret Stores that can be used as a backing store
	// for Secret Engine
	ListSecretStores(context.Context, *SecretStoreListRequest) (*SecretStoreListResponse, error)
	// GenerateKeys generates a private key, stores it in a secret store and stores a public key in a secret engine
	GenerateKeys(context.Context, *GenerateKeysRequest) (*GenerateKeysResponse, error)
	// Healthcheck triggers a healthcheck for all nodes serving a secret engine
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
	// Rotate rotates secret engine's credentials
	Rotate(context.Context, *SecretEngineRotateRequest) (*SecretEngineRotateResponse, error)
	mustEmbedUnimplementedSecretEnginesServer()
}

// UnimplementedSecretEnginesServer must be embedded to have forward compatible implementations.
type UnimplementedSecretEnginesServer struct {
}

func (UnimplementedSecretEnginesServer) List(context.Context, *SecretEngineListRequest) (*SecretEngineListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretEnginesServer) Get(context.Context, *SecretEngineGetRequest) (*SecretEngineGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretEnginesServer) Create(context.Context, *SecretEngineCreateRequest) (*SecretEngineCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretEnginesServer) Update(context.Context, *SecretEngineUpdateRequest) (*SecretEngineUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSecretEnginesServer) Delete(context.Context, *SecretEngineDeleteRequest) (*SecretEngineDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSecretEnginesServer) ListSecretStores(context.Context, *SecretStoreListRequest) (*SecretStoreListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecretStores not implemented")
}
func (UnimplementedSecretEnginesServer) GenerateKeys(context.Context, *GenerateKeysRequest) (*GenerateKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeys not implemented")
}
func (UnimplementedSecretEnginesServer) Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedSecretEnginesServer) Rotate(context.Context, *SecretEngineRotateRequest) (*SecretEngineRotateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedSecretEnginesServer) mustEmbedUnimplementedSecretEnginesServer() {}

// UnsafeSecretEnginesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretEnginesServer will
// result in compilation errors.
type UnsafeSecretEnginesServer interface {
	mustEmbedUnimplementedSecretEnginesServer()
}

func RegisterSecretEnginesServer(s grpc.ServiceRegistrar, srv SecretEnginesServer) {
	s.RegisterService(&_SecretEngines_serviceDesc, srv)
}

func _SecretEngines_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEngineListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).List(ctx, req.(*SecretEngineListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEngineGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).Get(ctx, req.(*SecretEngineGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEngineCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).Create(ctx, req.(*SecretEngineCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEngineUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).Update(ctx, req.(*SecretEngineUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEngineDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).Delete(ctx, req.(*SecretEngineDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_ListSecretStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretStoreListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).ListSecretStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/ListSecretStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).ListSecretStores(ctx, req.(*SecretStoreListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_GenerateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).GenerateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/GenerateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).GenerateKeys(ctx, req.(*GenerateKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretEngines_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretEngineRotateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretEnginesServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SecretEngines/Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretEnginesServer).Rotate(ctx, req.(*SecretEngineRotateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecretEngines_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SecretEngines",
	HandlerType: (*SecretEnginesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SecretEngines_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SecretEngines_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SecretEngines_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SecretEngines_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SecretEngines_Delete_Handler,
		},
		{
			MethodName: "ListSecretStores",
			Handler:    _SecretEngines_ListSecretStores_Handler,
		},
		{
			MethodName: "GenerateKeys",
			Handler:    _SecretEngines_GenerateKeys_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _SecretEngines_Healthcheck_Handler,
		},
		{
			MethodName: "Rotate",
			Handler:    _SecretEngines_Rotate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secret_engines.proto",
}
