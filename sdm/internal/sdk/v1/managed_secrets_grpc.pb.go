// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManagedSecretsClient is the client API for ManagedSecrets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagedSecretsClient interface {
	// List returns Managed Secrets from a Secret Engine.
	List(ctx context.Context, in *ManagedSecretListRequest, opts ...grpc.CallOption) (*ManagedSecretListResponse, error)
	// List returns Managed Secrets for an Actor from a Secret Engine.
	ListByActor(ctx context.Context, in *ManagedSecretListRequest, opts ...grpc.CallOption) (*ManagedSecretListResponse, error)
	// Create creates a Managed Secret
	Create(ctx context.Context, in *ManagedSecretCreateRequest, opts ...grpc.CallOption) (*ManagedSecretCreateResponse, error)
	// Update updates a Managed Secret
	Update(ctx context.Context, in *ManagedSecretUpdateRequest, opts ...grpc.CallOption) (*ManagedSecretUpdateResponse, error)
	// Rotate forces rotation of Managed Secret
	Rotate(ctx context.Context, in *ManagedSecretRotateRequest, opts ...grpc.CallOption) (*ManagedSecretRotateResponse, error)
	// Delete deletes a Managed Secret
	Delete(ctx context.Context, in *ManagedSecretDeleteRequest, opts ...grpc.CallOption) (*ManagedSecretDeleteResponse, error)
	// Get gets details of a Managed Secret without sensitive data
	Get(ctx context.Context, in *ManagedSecretGetRequest, opts ...grpc.CallOption) (*ManagedSecretGetResponse, error)
	// Retrieve returns Managed Secret with sensitive data
	Retrieve(ctx context.Context, in *ManagedSecretRetrieveRequest, opts ...grpc.CallOption) (*ManagedSecretRetrieveResponse, error)
	// Validate returns the result of testing the stored credential against the
	// secret engine.
	Validate(ctx context.Context, in *ManagedSecretValidateRequest, opts ...grpc.CallOption) (*ManagedSecretValidateResponse, error)
	// Logs returns the audit records for the managed secret. This may be replaced
	// in the future.
	Logs(ctx context.Context, in *ManagedSecretLogsRequest, opts ...grpc.CallOption) (*ManagedSecretLogsResponse, error)
}

type managedSecretsClient struct {
	cc grpc.ClientConnInterface
}

func NewManagedSecretsClient(cc grpc.ClientConnInterface) ManagedSecretsClient {
	return &managedSecretsClient{cc}
}

func (c *managedSecretsClient) List(ctx context.Context, in *ManagedSecretListRequest, opts ...grpc.CallOption) (*ManagedSecretListResponse, error) {
	out := new(ManagedSecretListResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) ListByActor(ctx context.Context, in *ManagedSecretListRequest, opts ...grpc.CallOption) (*ManagedSecretListResponse, error) {
	out := new(ManagedSecretListResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/ListByActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Create(ctx context.Context, in *ManagedSecretCreateRequest, opts ...grpc.CallOption) (*ManagedSecretCreateResponse, error) {
	out := new(ManagedSecretCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Update(ctx context.Context, in *ManagedSecretUpdateRequest, opts ...grpc.CallOption) (*ManagedSecretUpdateResponse, error) {
	out := new(ManagedSecretUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Rotate(ctx context.Context, in *ManagedSecretRotateRequest, opts ...grpc.CallOption) (*ManagedSecretRotateResponse, error) {
	out := new(ManagedSecretRotateResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Rotate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Delete(ctx context.Context, in *ManagedSecretDeleteRequest, opts ...grpc.CallOption) (*ManagedSecretDeleteResponse, error) {
	out := new(ManagedSecretDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Get(ctx context.Context, in *ManagedSecretGetRequest, opts ...grpc.CallOption) (*ManagedSecretGetResponse, error) {
	out := new(ManagedSecretGetResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Retrieve(ctx context.Context, in *ManagedSecretRetrieveRequest, opts ...grpc.CallOption) (*ManagedSecretRetrieveResponse, error) {
	out := new(ManagedSecretRetrieveResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Validate(ctx context.Context, in *ManagedSecretValidateRequest, opts ...grpc.CallOption) (*ManagedSecretValidateResponse, error) {
	out := new(ManagedSecretValidateResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managedSecretsClient) Logs(ctx context.Context, in *ManagedSecretLogsRequest, opts ...grpc.CallOption) (*ManagedSecretLogsResponse, error) {
	out := new(ManagedSecretLogsResponse)
	err := c.cc.Invoke(ctx, "/v1.ManagedSecrets/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagedSecretsServer is the server API for ManagedSecrets service.
// All implementations must embed UnimplementedManagedSecretsServer
// for forward compatibility
type ManagedSecretsServer interface {
	// List returns Managed Secrets from a Secret Engine.
	List(context.Context, *ManagedSecretListRequest) (*ManagedSecretListResponse, error)
	// List returns Managed Secrets for an Actor from a Secret Engine.
	ListByActor(context.Context, *ManagedSecretListRequest) (*ManagedSecretListResponse, error)
	// Create creates a Managed Secret
	Create(context.Context, *ManagedSecretCreateRequest) (*ManagedSecretCreateResponse, error)
	// Update updates a Managed Secret
	Update(context.Context, *ManagedSecretUpdateRequest) (*ManagedSecretUpdateResponse, error)
	// Rotate forces rotation of Managed Secret
	Rotate(context.Context, *ManagedSecretRotateRequest) (*ManagedSecretRotateResponse, error)
	// Delete deletes a Managed Secret
	Delete(context.Context, *ManagedSecretDeleteRequest) (*ManagedSecretDeleteResponse, error)
	// Get gets details of a Managed Secret without sensitive data
	Get(context.Context, *ManagedSecretGetRequest) (*ManagedSecretGetResponse, error)
	// Retrieve returns Managed Secret with sensitive data
	Retrieve(context.Context, *ManagedSecretRetrieveRequest) (*ManagedSecretRetrieveResponse, error)
	// Validate returns the result of testing the stored credential against the
	// secret engine.
	Validate(context.Context, *ManagedSecretValidateRequest) (*ManagedSecretValidateResponse, error)
	// Logs returns the audit records for the managed secret. This may be replaced
	// in the future.
	Logs(context.Context, *ManagedSecretLogsRequest) (*ManagedSecretLogsResponse, error)
	mustEmbedUnimplementedManagedSecretsServer()
}

// UnimplementedManagedSecretsServer must be embedded to have forward compatible implementations.
type UnimplementedManagedSecretsServer struct {
}

func (UnimplementedManagedSecretsServer) List(context.Context, *ManagedSecretListRequest) (*ManagedSecretListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedManagedSecretsServer) ListByActor(context.Context, *ManagedSecretListRequest) (*ManagedSecretListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByActor not implemented")
}
func (UnimplementedManagedSecretsServer) Create(context.Context, *ManagedSecretCreateRequest) (*ManagedSecretCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedManagedSecretsServer) Update(context.Context, *ManagedSecretUpdateRequest) (*ManagedSecretUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedManagedSecretsServer) Rotate(context.Context, *ManagedSecretRotateRequest) (*ManagedSecretRotateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rotate not implemented")
}
func (UnimplementedManagedSecretsServer) Delete(context.Context, *ManagedSecretDeleteRequest) (*ManagedSecretDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedManagedSecretsServer) Get(context.Context, *ManagedSecretGetRequest) (*ManagedSecretGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedManagedSecretsServer) Retrieve(context.Context, *ManagedSecretRetrieveRequest) (*ManagedSecretRetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedManagedSecretsServer) Validate(context.Context, *ManagedSecretValidateRequest) (*ManagedSecretValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedManagedSecretsServer) Logs(context.Context, *ManagedSecretLogsRequest) (*ManagedSecretLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedManagedSecretsServer) mustEmbedUnimplementedManagedSecretsServer() {}

// UnsafeManagedSecretsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagedSecretsServer will
// result in compilation errors.
type UnsafeManagedSecretsServer interface {
	mustEmbedUnimplementedManagedSecretsServer()
}

func RegisterManagedSecretsServer(s grpc.ServiceRegistrar, srv ManagedSecretsServer) {
	s.RegisterService(&_ManagedSecrets_serviceDesc, srv)
}

func _ManagedSecrets_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).List(ctx, req.(*ManagedSecretListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_ListByActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).ListByActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/ListByActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).ListByActor(ctx, req.(*ManagedSecretListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Create(ctx, req.(*ManagedSecretCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Update(ctx, req.(*ManagedSecretUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Rotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretRotateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Rotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Rotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Rotate(ctx, req.(*ManagedSecretRotateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Delete(ctx, req.(*ManagedSecretDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Get(ctx, req.(*ManagedSecretGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Retrieve(ctx, req.(*ManagedSecretRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Validate(ctx, req.(*ManagedSecretValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagedSecrets_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagedSecretLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagedSecretsServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ManagedSecrets/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagedSecretsServer).Logs(ctx, req.(*ManagedSecretLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManagedSecrets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ManagedSecrets",
	HandlerType: (*ManagedSecretsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ManagedSecrets_List_Handler,
		},
		{
			MethodName: "ListByActor",
			Handler:    _ManagedSecrets_ListByActor_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ManagedSecrets_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ManagedSecrets_Update_Handler,
		},
		{
			MethodName: "Rotate",
			Handler:    _ManagedSecrets_Rotate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ManagedSecrets_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ManagedSecrets_Get_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ManagedSecrets_Retrieve_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ManagedSecrets_Validate_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _ManagedSecrets_Logs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managed_secrets.proto",
}
