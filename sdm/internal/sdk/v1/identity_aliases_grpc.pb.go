// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IdentityAliasesClient is the client API for IdentityAliases service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityAliasesClient interface {
	// Create registers a new IdentityAlias.
	Create(ctx context.Context, in *IdentityAliasCreateRequest, opts ...grpc.CallOption) (*IdentityAliasCreateResponse, error)
	// Get reads one IdentityAlias by ID.
	Get(ctx context.Context, in *IdentityAliasGetRequest, opts ...grpc.CallOption) (*IdentityAliasGetResponse, error)
	// Update replaces all the fields of a IdentityAlias by ID.
	Update(ctx context.Context, in *IdentityAliasUpdateRequest, opts ...grpc.CallOption) (*IdentityAliasUpdateResponse, error)
	// Delete removes a IdentityAlias by ID.
	Delete(ctx context.Context, in *IdentityAliasDeleteRequest, opts ...grpc.CallOption) (*IdentityAliasDeleteResponse, error)
	// List gets a list of IdentityAliases matching a given set of criteria.
	List(ctx context.Context, in *IdentityAliasListRequest, opts ...grpc.CallOption) (*IdentityAliasListResponse, error)
}

type identityAliasesClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityAliasesClient(cc grpc.ClientConnInterface) IdentityAliasesClient {
	return &identityAliasesClient{cc}
}

func (c *identityAliasesClient) Create(ctx context.Context, in *IdentityAliasCreateRequest, opts ...grpc.CallOption) (*IdentityAliasCreateResponse, error) {
	out := new(IdentityAliasCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentityAliases/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityAliasesClient) Get(ctx context.Context, in *IdentityAliasGetRequest, opts ...grpc.CallOption) (*IdentityAliasGetResponse, error) {
	out := new(IdentityAliasGetResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentityAliases/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityAliasesClient) Update(ctx context.Context, in *IdentityAliasUpdateRequest, opts ...grpc.CallOption) (*IdentityAliasUpdateResponse, error) {
	out := new(IdentityAliasUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentityAliases/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityAliasesClient) Delete(ctx context.Context, in *IdentityAliasDeleteRequest, opts ...grpc.CallOption) (*IdentityAliasDeleteResponse, error) {
	out := new(IdentityAliasDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentityAliases/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityAliasesClient) List(ctx context.Context, in *IdentityAliasListRequest, opts ...grpc.CallOption) (*IdentityAliasListResponse, error) {
	out := new(IdentityAliasListResponse)
	err := c.cc.Invoke(ctx, "/v1.IdentityAliases/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityAliasesServer is the server API for IdentityAliases service.
// All implementations must embed UnimplementedIdentityAliasesServer
// for forward compatibility
type IdentityAliasesServer interface {
	// Create registers a new IdentityAlias.
	Create(context.Context, *IdentityAliasCreateRequest) (*IdentityAliasCreateResponse, error)
	// Get reads one IdentityAlias by ID.
	Get(context.Context, *IdentityAliasGetRequest) (*IdentityAliasGetResponse, error)
	// Update replaces all the fields of a IdentityAlias by ID.
	Update(context.Context, *IdentityAliasUpdateRequest) (*IdentityAliasUpdateResponse, error)
	// Delete removes a IdentityAlias by ID.
	Delete(context.Context, *IdentityAliasDeleteRequest) (*IdentityAliasDeleteResponse, error)
	// List gets a list of IdentityAliases matching a given set of criteria.
	List(context.Context, *IdentityAliasListRequest) (*IdentityAliasListResponse, error)
	mustEmbedUnimplementedIdentityAliasesServer()
}

// UnimplementedIdentityAliasesServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityAliasesServer struct {
}

func (UnimplementedIdentityAliasesServer) Create(context.Context, *IdentityAliasCreateRequest) (*IdentityAliasCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIdentityAliasesServer) Get(context.Context, *IdentityAliasGetRequest) (*IdentityAliasGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIdentityAliasesServer) Update(context.Context, *IdentityAliasUpdateRequest) (*IdentityAliasUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIdentityAliasesServer) Delete(context.Context, *IdentityAliasDeleteRequest) (*IdentityAliasDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIdentityAliasesServer) List(context.Context, *IdentityAliasListRequest) (*IdentityAliasListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIdentityAliasesServer) mustEmbedUnimplementedIdentityAliasesServer() {}

// UnsafeIdentityAliasesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityAliasesServer will
// result in compilation errors.
type UnsafeIdentityAliasesServer interface {
	mustEmbedUnimplementedIdentityAliasesServer()
}

func RegisterIdentityAliasesServer(s grpc.ServiceRegistrar, srv IdentityAliasesServer) {
	s.RegisterService(&_IdentityAliases_serviceDesc, srv)
}

func _IdentityAliases_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAliasCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAliasesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentityAliases/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAliasesServer).Create(ctx, req.(*IdentityAliasCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityAliases_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAliasGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAliasesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentityAliases/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAliasesServer).Get(ctx, req.(*IdentityAliasGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityAliases_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAliasUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAliasesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentityAliases/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAliasesServer).Update(ctx, req.(*IdentityAliasUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityAliases_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAliasDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAliasesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentityAliases/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAliasesServer).Delete(ctx, req.(*IdentityAliasDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityAliases_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentityAliasListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityAliasesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IdentityAliases/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityAliasesServer).List(ctx, req.(*IdentityAliasListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentityAliases_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IdentityAliases",
	HandlerType: (*IdentityAliasesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IdentityAliases_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IdentityAliases_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IdentityAliases_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IdentityAliases_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IdentityAliases_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity_aliases.proto",
}
