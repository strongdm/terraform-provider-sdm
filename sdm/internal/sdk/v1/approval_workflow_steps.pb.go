// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: approval_workflow_steps.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ApprovalWorkflowStepCreateRequest specifies the approval workflow ID of a new approval workflow
// step to be created.
type ApprovalWorkflowStepCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new ApprovalWorkflowStep.
	ApprovalWorkflowStep *ApprovalWorkflowStep `protobuf:"bytes,2,opt,name=approval_workflow_step,json=approvalWorkflowStep,proto3" json:"approval_workflow_step,omitempty"`
}

func (x *ApprovalWorkflowStepCreateRequest) Reset() {
	*x = ApprovalWorkflowStepCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepCreateRequest) ProtoMessage() {}

func (x *ApprovalWorkflowStepCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepCreateRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepCreateRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{0}
}

func (x *ApprovalWorkflowStepCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepCreateRequest) GetApprovalWorkflowStep() *ApprovalWorkflowStep {
	if x != nil {
		return x.ApprovalWorkflowStep
	}
	return nil
}

// ApprovalWorkflowStepCreateResponse reports how the ApprovalWorkflowStep was created in the system.
type ApprovalWorkflowStepCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created approval workflow step.
	ApprovalWorkflowStep *ApprovalWorkflowStep `protobuf:"bytes,2,opt,name=approval_workflow_step,json=approvalWorkflowStep,proto3" json:"approval_workflow_step,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowStepCreateResponse) Reset() {
	*x = ApprovalWorkflowStepCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepCreateResponse) ProtoMessage() {}

func (x *ApprovalWorkflowStepCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepCreateResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepCreateResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{1}
}

func (x *ApprovalWorkflowStepCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepCreateResponse) GetApprovalWorkflowStep() *ApprovalWorkflowStep {
	if x != nil {
		return x.ApprovalWorkflowStep
	}
	return nil
}

func (x *ApprovalWorkflowStepCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowStepGetRequest specifies which ApprovalWorkflowStep to retrieve.
type ApprovalWorkflowStepGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the ApprovalWorkflowStep to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApprovalWorkflowStepGetRequest) Reset() {
	*x = ApprovalWorkflowStepGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepGetRequest) ProtoMessage() {}

func (x *ApprovalWorkflowStepGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepGetRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepGetRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{2}
}

func (x *ApprovalWorkflowStepGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ApprovalWorkflowStepGetResponse returns a requested ApprovalWorkflowStep.
type ApprovalWorkflowStepGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested ApprovalWorkflowStep.
	ApprovalWorkflowStep *ApprovalWorkflowStep `protobuf:"bytes,2,opt,name=approval_workflow_step,json=approvalWorkflowStep,proto3" json:"approval_workflow_step,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowStepGetResponse) Reset() {
	*x = ApprovalWorkflowStepGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepGetResponse) ProtoMessage() {}

func (x *ApprovalWorkflowStepGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepGetResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepGetResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{3}
}

func (x *ApprovalWorkflowStepGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepGetResponse) GetApprovalWorkflowStep() *ApprovalWorkflowStep {
	if x != nil {
		return x.ApprovalWorkflowStep
	}
	return nil
}

func (x *ApprovalWorkflowStepGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowStepDeleteRequest specifies the id of an approval workflow step to be deleted.
type ApprovalWorkflowStepDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Id of the ApprovalWorkflowStep to be deleted.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApprovalWorkflowStepDeleteRequest) Reset() {
	*x = ApprovalWorkflowStepDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepDeleteRequest) ProtoMessage() {}

func (x *ApprovalWorkflowStepDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepDeleteRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{4}
}

func (x *ApprovalWorkflowStepDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ApprovalWorkflowStepDeleteResponse returns information about an ApprovalWorkflowStep that was deleted.
type ApprovalWorkflowStepDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The deleted approval workflow step id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowStepDeleteResponse) Reset() {
	*x = ApprovalWorkflowStepDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepDeleteResponse) ProtoMessage() {}

func (x *ApprovalWorkflowStepDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepDeleteResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepDeleteResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{5}
}

func (x *ApprovalWorkflowStepDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalWorkflowStepDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowStepListRequest specifies the criteria for retrieving a list of
// ApprovalWorkflowStep records
type ApprovalWorkflowStepListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ApprovalWorkflowStepListRequest) Reset() {
	*x = ApprovalWorkflowStepListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepListRequest) ProtoMessage() {}

func (x *ApprovalWorkflowStepListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepListRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepListRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{6}
}

func (x *ApprovalWorkflowStepListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ApprovalWorkflowStepListResponse returns a list of ApprovalWorkflowStep records that meet
// the criteria of an ApprovalWorkflowStepListRequest.
type ApprovalWorkflowStepListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The matching approval workflow steps.
	ApprovalWorkflowSteps []*ApprovalWorkflowStep `protobuf:"bytes,2,rep,name=approval_workflow_steps,json=approvalWorkflowSteps,proto3" json:"approval_workflow_steps,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowStepListResponse) Reset() {
	*x = ApprovalWorkflowStepListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStepListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStepListResponse) ProtoMessage() {}

func (x *ApprovalWorkflowStepListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStepListResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStepListResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{7}
}

func (x *ApprovalWorkflowStepListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowStepListResponse) GetApprovalWorkflowSteps() []*ApprovalWorkflowStep {
	if x != nil {
		return x.ApprovalWorkflowSteps
	}
	return nil
}

func (x *ApprovalWorkflowStepListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowStep links an approval workflow step to an ApprovalWorkflow
//
// Deprecated: Do not use.
type ApprovalWorkflowStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the ApprovalWorkflowStep.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The approval flow id specified the approval workflow that this step belongs to
	ApprovalFlowId string `protobuf:"bytes,2,opt,name=approval_flow_id,json=approvalFlowId,proto3" json:"approval_flow_id,omitempty"`
	// Whether "any" or "all" approvers must approve for this approval step to pass. Read only field for history commands.
	Quantifier string `protobuf:"bytes,3,opt,name=quantifier,proto3" json:"quantifier,omitempty"`
	// Duration after which this approval step will be skipped if no approval is given. Read only field for history commands.
	SkipAfter *durationpb.Duration `protobuf:"bytes,4,opt,name=skip_after,json=skipAfter,proto3" json:"skip_after,omitempty"`
	// The position of the approval step in a sequence of approval steps for an approval workflow. Read only field for history commands.
	StepOrder int32 `protobuf:"varint,5,opt,name=step_order,json=stepOrder,proto3" json:"step_order,omitempty"`
}

func (x *ApprovalWorkflowStep) Reset() {
	*x = ApprovalWorkflowStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_steps_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowStep) ProtoMessage() {}

func (x *ApprovalWorkflowStep) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_steps_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowStep.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowStep) Descriptor() ([]byte, []int) {
	return file_approval_workflow_steps_proto_rawDescGZIP(), []int{8}
}

func (x *ApprovalWorkflowStep) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalWorkflowStep) GetApprovalFlowId() string {
	if x != nil {
		return x.ApprovalFlowId
	}
	return ""
}

func (x *ApprovalWorkflowStep) GetQuantifier() string {
	if x != nil {
		return x.Quantifier
	}
	return ""
}

func (x *ApprovalWorkflowStep) GetSkipAfter() *durationpb.Duration {
	if x != nil {
		return x.SkipAfter
	}
	return nil
}

func (x *ApprovalWorkflowStep) GetStepOrder() int32 {
	if x != nil {
		return x.StepOrder
	}
	return 0
}

var File_approval_workflow_steps_proto protoreflect.FileDescriptor

var file_approval_workflow_steps_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x02, 0x76, 0x31, 0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae,
	0x01, 0x0a, 0x21, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x14, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x22,
	0xa0, 0x02, 0x0a, 0x22, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x14, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4,
	0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3,
	0x07, 0x01, 0x22, 0x68, 0x0a, 0x1e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa6, 0x02, 0x0a,
	0x1f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x65, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x16, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x65, 0x70, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x65, 0x70, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07,
	0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07,
	0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05,
	0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6e, 0x0a, 0x21, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x22, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2,
	0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2,
	0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8,
	0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x72, 0x0a, 0x1f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9e, 0x02, 0x0a,
	0x20, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12,
	0x5c, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb8, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x62, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2,
	0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0xba, 0x03,
	0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8,
	0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x56, 0x0a,
	0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3,
	0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xb2, 0xf4, 0xb3, 0x07, 0x13, 0x21, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0xb2, 0xf4, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x98, 0xf4, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xb2, 0xf4, 0xb3, 0x07, 0x13,
	0x21, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0xb2, 0xf4, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x52, 0x09, 0x73, 0x6b,
	0x69, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x36, 0xf2, 0xf8, 0xb3,
	0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x98, 0xf4, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07,
	0x01, 0x2a, 0xb2, 0xf4, 0xb3, 0x07, 0x13, 0x21, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xb2, 0xf4, 0xb3, 0x07, 0x04, 0x21,
	0x63, 0x6c, 0x69, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x3a, 0x2a,
	0x18, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x23, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0xd2, 0xf3, 0xb3, 0x07,
	0x01, 0x2a, 0xd2, 0xf3, 0xb3, 0x07, 0x13, 0x21, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0xab, 0x05, 0x0a, 0x15, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33,
	0x82, 0xf9, 0xb3, 0x07, 0x09, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x82, 0xf9,
	0xb3, 0x07, 0x20, 0xaa, 0xf3, 0xb3, 0x07, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x65, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03,
	0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x24, 0xaa, 0xf3, 0xb3, 0x07, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2d, 0x73, 0x74, 0x65, 0x70, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8e, 0x01, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xf9, 0xb3, 0x07, 0x0b, 0xa2, 0xf3, 0xb3,
	0x07, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x82, 0xf9, 0xb3, 0x07, 0x20, 0xaa, 0xf3, 0xb3,
	0x07, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x85, 0x01,
	0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x65, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74,
	0x82, 0xf9, 0xb3, 0x07, 0x20, 0xaa, 0xf3, 0xb3, 0x07, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x61, 0x88, 0x02, 0x01, 0xca, 0xf9, 0xb3, 0x07, 0x19, 0xc2,
	0xf9, 0xb3, 0x07, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0xca, 0xf9, 0xb3, 0x07, 0x09, 0xd2, 0xf9, 0xb3,
	0x07, 0x04, 0x61, 0x66, 0x73, 0x2d, 0xca, 0xf9, 0xb3, 0x07, 0x05, 0xe8, 0xf9, 0xb3, 0x07, 0x01,
	0xca, 0xf9, 0xb3, 0x07, 0x06, 0xca, 0xf9, 0xb3, 0x07, 0x01, 0x2a, 0xca, 0xf9, 0xb3, 0x07, 0x18,
	0xca, 0xf9, 0xb3, 0x07, 0x13, 0x21, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x42, 0x71, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75,
	0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x1d, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x73, 0x50, 0x6c, 0x75, 0x6d,
	0x62, 0x69, 0x6e, 0x67, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67,
	0x64, 0x6d, 0x2d, 0x73, 0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_approval_workflow_steps_proto_rawDescOnce sync.Once
	file_approval_workflow_steps_proto_rawDescData = file_approval_workflow_steps_proto_rawDesc
)

func file_approval_workflow_steps_proto_rawDescGZIP() []byte {
	file_approval_workflow_steps_proto_rawDescOnce.Do(func() {
		file_approval_workflow_steps_proto_rawDescData = protoimpl.X.CompressGZIP(file_approval_workflow_steps_proto_rawDescData)
	})
	return file_approval_workflow_steps_proto_rawDescData
}

var file_approval_workflow_steps_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_approval_workflow_steps_proto_goTypes = []interface{}{
	(*ApprovalWorkflowStepCreateRequest)(nil),  // 0: v1.ApprovalWorkflowStepCreateRequest
	(*ApprovalWorkflowStepCreateResponse)(nil), // 1: v1.ApprovalWorkflowStepCreateResponse
	(*ApprovalWorkflowStepGetRequest)(nil),     // 2: v1.ApprovalWorkflowStepGetRequest
	(*ApprovalWorkflowStepGetResponse)(nil),    // 3: v1.ApprovalWorkflowStepGetResponse
	(*ApprovalWorkflowStepDeleteRequest)(nil),  // 4: v1.ApprovalWorkflowStepDeleteRequest
	(*ApprovalWorkflowStepDeleteResponse)(nil), // 5: v1.ApprovalWorkflowStepDeleteResponse
	(*ApprovalWorkflowStepListRequest)(nil),    // 6: v1.ApprovalWorkflowStepListRequest
	(*ApprovalWorkflowStepListResponse)(nil),   // 7: v1.ApprovalWorkflowStepListResponse
	(*ApprovalWorkflowStep)(nil),               // 8: v1.ApprovalWorkflowStep
	(*CreateRequestMetadata)(nil),              // 9: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),             // 10: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),                  // 11: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),                 // 12: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),                // 13: v1.GetResponseMetadata
	(*DeleteRequestMetadata)(nil),              // 14: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),             // 15: v1.DeleteResponseMetadata
	(*ListRequestMetadata)(nil),                // 16: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),               // 17: v1.ListResponseMetadata
	(*durationpb.Duration)(nil),                // 18: google.protobuf.Duration
}
var file_approval_workflow_steps_proto_depIdxs = []int32{
	9,  // 0: v1.ApprovalWorkflowStepCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	8,  // 1: v1.ApprovalWorkflowStepCreateRequest.approval_workflow_step:type_name -> v1.ApprovalWorkflowStep
	10, // 2: v1.ApprovalWorkflowStepCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	8,  // 3: v1.ApprovalWorkflowStepCreateResponse.approval_workflow_step:type_name -> v1.ApprovalWorkflowStep
	11, // 4: v1.ApprovalWorkflowStepCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 5: v1.ApprovalWorkflowStepGetRequest.meta:type_name -> v1.GetRequestMetadata
	13, // 6: v1.ApprovalWorkflowStepGetResponse.meta:type_name -> v1.GetResponseMetadata
	8,  // 7: v1.ApprovalWorkflowStepGetResponse.approval_workflow_step:type_name -> v1.ApprovalWorkflowStep
	11, // 8: v1.ApprovalWorkflowStepGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 9: v1.ApprovalWorkflowStepDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	15, // 10: v1.ApprovalWorkflowStepDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	11, // 11: v1.ApprovalWorkflowStepDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	16, // 12: v1.ApprovalWorkflowStepListRequest.meta:type_name -> v1.ListRequestMetadata
	17, // 13: v1.ApprovalWorkflowStepListResponse.meta:type_name -> v1.ListResponseMetadata
	8,  // 14: v1.ApprovalWorkflowStepListResponse.approval_workflow_steps:type_name -> v1.ApprovalWorkflowStep
	11, // 15: v1.ApprovalWorkflowStepListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	18, // 16: v1.ApprovalWorkflowStep.skip_after:type_name -> google.protobuf.Duration
	0,  // 17: v1.ApprovalWorkflowSteps.Create:input_type -> v1.ApprovalWorkflowStepCreateRequest
	2,  // 18: v1.ApprovalWorkflowSteps.Get:input_type -> v1.ApprovalWorkflowStepGetRequest
	4,  // 19: v1.ApprovalWorkflowSteps.Delete:input_type -> v1.ApprovalWorkflowStepDeleteRequest
	6,  // 20: v1.ApprovalWorkflowSteps.List:input_type -> v1.ApprovalWorkflowStepListRequest
	1,  // 21: v1.ApprovalWorkflowSteps.Create:output_type -> v1.ApprovalWorkflowStepCreateResponse
	3,  // 22: v1.ApprovalWorkflowSteps.Get:output_type -> v1.ApprovalWorkflowStepGetResponse
	5,  // 23: v1.ApprovalWorkflowSteps.Delete:output_type -> v1.ApprovalWorkflowStepDeleteResponse
	7,  // 24: v1.ApprovalWorkflowSteps.List:output_type -> v1.ApprovalWorkflowStepListResponse
	21, // [21:25] is the sub-list for method output_type
	17, // [17:21] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_approval_workflow_steps_proto_init() }
func file_approval_workflow_steps_proto_init() {
	if File_approval_workflow_steps_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_approval_workflow_steps_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStepListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_steps_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_approval_workflow_steps_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_approval_workflow_steps_proto_goTypes,
		DependencyIndexes: file_approval_workflow_steps_proto_depIdxs,
		MessageInfos:      file_approval_workflow_steps_proto_msgTypes,
	}.Build()
	File_approval_workflow_steps_proto = out.File
	file_approval_workflow_steps_proto_rawDesc = nil
	file_approval_workflow_steps_proto_goTypes = nil
	file_approval_workflow_steps_proto_depIdxs = nil
}
