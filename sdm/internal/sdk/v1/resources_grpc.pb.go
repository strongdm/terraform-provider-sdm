// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ResourcesClient is the client API for Resources service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourcesClient interface {
	// EnumerateTags gets a list of the filter matching tags.
	EnumerateTags(ctx context.Context, in *EnumerateTagsRequest, opts ...grpc.CallOption) (*EnumerateTagsResponse, error)
	// Create registers a new Resource.
	Create(ctx context.Context, in *ResourceCreateRequest, opts ...grpc.CallOption) (*ResourceCreateResponse, error)
	// Get reads one Resource by ID.
	Get(ctx context.Context, in *ResourceGetRequest, opts ...grpc.CallOption) (*ResourceGetResponse, error)
	// Update replaces all the fields of a Resource by ID.
	Update(ctx context.Context, in *ResourceUpdateRequest, opts ...grpc.CallOption) (*ResourceUpdateResponse, error)
	// Delete removes a Resource by ID.
	Delete(ctx context.Context, in *ResourceDeleteRequest, opts ...grpc.CallOption) (*ResourceDeleteResponse, error)
	// List gets a list of Resources matching a given set of criteria.
	List(ctx context.Context, in *ResourceListRequest, opts ...grpc.CallOption) (*ResourceListResponse, error)
	// Healthcheck triggers a remote healthcheck. It may take minutes to propagate across a
	// large network of Nodes. The call will return immediately, and the updated health of the
	// Resource can be retrieved via Get or List.
	Healthcheck(ctx context.Context, in *ResourceHealthcheckRequest, opts ...grpc.CallOption) (*ResourceHealthcheckResponse, error)
}

type resourcesClient struct {
	cc grpc.ClientConnInterface
}

func NewResourcesClient(cc grpc.ClientConnInterface) ResourcesClient {
	return &resourcesClient{cc}
}

func (c *resourcesClient) EnumerateTags(ctx context.Context, in *EnumerateTagsRequest, opts ...grpc.CallOption) (*EnumerateTagsResponse, error) {
	out := new(EnumerateTagsResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/EnumerateTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Create(ctx context.Context, in *ResourceCreateRequest, opts ...grpc.CallOption) (*ResourceCreateResponse, error) {
	out := new(ResourceCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Get(ctx context.Context, in *ResourceGetRequest, opts ...grpc.CallOption) (*ResourceGetResponse, error) {
	out := new(ResourceGetResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Update(ctx context.Context, in *ResourceUpdateRequest, opts ...grpc.CallOption) (*ResourceUpdateResponse, error) {
	out := new(ResourceUpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Delete(ctx context.Context, in *ResourceDeleteRequest, opts ...grpc.CallOption) (*ResourceDeleteResponse, error) {
	out := new(ResourceDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) List(ctx context.Context, in *ResourceListRequest, opts ...grpc.CallOption) (*ResourceListResponse, error) {
	out := new(ResourceListResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourcesClient) Healthcheck(ctx context.Context, in *ResourceHealthcheckRequest, opts ...grpc.CallOption) (*ResourceHealthcheckResponse, error) {
	out := new(ResourceHealthcheckResponse)
	err := c.cc.Invoke(ctx, "/v1.Resources/Healthcheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourcesServer is the server API for Resources service.
// All implementations must embed UnimplementedResourcesServer
// for forward compatibility
type ResourcesServer interface {
	// EnumerateTags gets a list of the filter matching tags.
	EnumerateTags(context.Context, *EnumerateTagsRequest) (*EnumerateTagsResponse, error)
	// Create registers a new Resource.
	Create(context.Context, *ResourceCreateRequest) (*ResourceCreateResponse, error)
	// Get reads one Resource by ID.
	Get(context.Context, *ResourceGetRequest) (*ResourceGetResponse, error)
	// Update replaces all the fields of a Resource by ID.
	Update(context.Context, *ResourceUpdateRequest) (*ResourceUpdateResponse, error)
	// Delete removes a Resource by ID.
	Delete(context.Context, *ResourceDeleteRequest) (*ResourceDeleteResponse, error)
	// List gets a list of Resources matching a given set of criteria.
	List(context.Context, *ResourceListRequest) (*ResourceListResponse, error)
	// Healthcheck triggers a remote healthcheck. It may take minutes to propagate across a
	// large network of Nodes. The call will return immediately, and the updated health of the
	// Resource can be retrieved via Get or List.
	Healthcheck(context.Context, *ResourceHealthcheckRequest) (*ResourceHealthcheckResponse, error)
	mustEmbedUnimplementedResourcesServer()
}

// UnimplementedResourcesServer must be embedded to have forward compatible implementations.
type UnimplementedResourcesServer struct {
}

func (UnimplementedResourcesServer) EnumerateTags(context.Context, *EnumerateTagsRequest) (*EnumerateTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateTags not implemented")
}
func (UnimplementedResourcesServer) Create(context.Context, *ResourceCreateRequest) (*ResourceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedResourcesServer) Get(context.Context, *ResourceGetRequest) (*ResourceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedResourcesServer) Update(context.Context, *ResourceUpdateRequest) (*ResourceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedResourcesServer) Delete(context.Context, *ResourceDeleteRequest) (*ResourceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedResourcesServer) List(context.Context, *ResourceListRequest) (*ResourceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedResourcesServer) Healthcheck(context.Context, *ResourceHealthcheckRequest) (*ResourceHealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedResourcesServer) mustEmbedUnimplementedResourcesServer() {}

// UnsafeResourcesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourcesServer will
// result in compilation errors.
type UnsafeResourcesServer interface {
	mustEmbedUnimplementedResourcesServer()
}

func RegisterResourcesServer(s grpc.ServiceRegistrar, srv ResourcesServer) {
	s.RegisterService(&_Resources_serviceDesc, srv)
}

func _Resources_EnumerateTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).EnumerateTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/EnumerateTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).EnumerateTags(ctx, req.(*EnumerateTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Create(ctx, req.(*ResourceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Get(ctx, req.(*ResourceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Update(ctx, req.(*ResourceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Delete(ctx, req.(*ResourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).List(ctx, req.(*ResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resources_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceHealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourcesServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Resources/Healthcheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourcesServer).Healthcheck(ctx, req.(*ResourceHealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resources_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Resources",
	HandlerType: (*ResourcesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnumerateTags",
			Handler:    _Resources_EnumerateTags_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Resources_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Resources_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Resources_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Resources_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Resources_List_Handler,
		},
		{
			MethodName: "Healthcheck",
			Handler:    _Resources_Healthcheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resources.proto",
}
