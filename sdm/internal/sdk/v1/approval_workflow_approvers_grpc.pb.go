// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ApprovalWorkflowApproversClient is the client API for ApprovalWorkflowApprovers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalWorkflowApproversClient interface {
	// Create creates a new approval workflow approver.
	Create(ctx context.Context, in *ApprovalWorkflowApproverCreateRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverCreateResponse, error)
	// Get reads one approval workflow approver by ID.
	Get(ctx context.Context, in *ApprovalWorkflowApproverGetRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverGetResponse, error)
	// Delete deletes an existing approval workflow approver.
	Delete(ctx context.Context, in *ApprovalWorkflowApproverDeleteRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverDeleteResponse, error)
	// Lists existing approval workflow approvers.
	List(ctx context.Context, in *ApprovalWorkflowApproverListRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverListResponse, error)
}

type approvalWorkflowApproversClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalWorkflowApproversClient(cc grpc.ClientConnInterface) ApprovalWorkflowApproversClient {
	return &approvalWorkflowApproversClient{cc}
}

func (c *approvalWorkflowApproversClient) Create(ctx context.Context, in *ApprovalWorkflowApproverCreateRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverCreateResponse, error) {
	out := new(ApprovalWorkflowApproverCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflowApprovers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowApproversClient) Get(ctx context.Context, in *ApprovalWorkflowApproverGetRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverGetResponse, error) {
	out := new(ApprovalWorkflowApproverGetResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflowApprovers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowApproversClient) Delete(ctx context.Context, in *ApprovalWorkflowApproverDeleteRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverDeleteResponse, error) {
	out := new(ApprovalWorkflowApproverDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflowApprovers/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalWorkflowApproversClient) List(ctx context.Context, in *ApprovalWorkflowApproverListRequest, opts ...grpc.CallOption) (*ApprovalWorkflowApproverListResponse, error) {
	out := new(ApprovalWorkflowApproverListResponse)
	err := c.cc.Invoke(ctx, "/v1.ApprovalWorkflowApprovers/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalWorkflowApproversServer is the server API for ApprovalWorkflowApprovers service.
// All implementations must embed UnimplementedApprovalWorkflowApproversServer
// for forward compatibility
type ApprovalWorkflowApproversServer interface {
	// Create creates a new approval workflow approver.
	Create(context.Context, *ApprovalWorkflowApproverCreateRequest) (*ApprovalWorkflowApproverCreateResponse, error)
	// Get reads one approval workflow approver by ID.
	Get(context.Context, *ApprovalWorkflowApproverGetRequest) (*ApprovalWorkflowApproverGetResponse, error)
	// Delete deletes an existing approval workflow approver.
	Delete(context.Context, *ApprovalWorkflowApproverDeleteRequest) (*ApprovalWorkflowApproverDeleteResponse, error)
	// Lists existing approval workflow approvers.
	List(context.Context, *ApprovalWorkflowApproverListRequest) (*ApprovalWorkflowApproverListResponse, error)
	mustEmbedUnimplementedApprovalWorkflowApproversServer()
}

// UnimplementedApprovalWorkflowApproversServer must be embedded to have forward compatible implementations.
type UnimplementedApprovalWorkflowApproversServer struct {
}

func (UnimplementedApprovalWorkflowApproversServer) Create(context.Context, *ApprovalWorkflowApproverCreateRequest) (*ApprovalWorkflowApproverCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApprovalWorkflowApproversServer) Get(context.Context, *ApprovalWorkflowApproverGetRequest) (*ApprovalWorkflowApproverGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApprovalWorkflowApproversServer) Delete(context.Context, *ApprovalWorkflowApproverDeleteRequest) (*ApprovalWorkflowApproverDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApprovalWorkflowApproversServer) List(context.Context, *ApprovalWorkflowApproverListRequest) (*ApprovalWorkflowApproverListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApprovalWorkflowApproversServer) mustEmbedUnimplementedApprovalWorkflowApproversServer() {
}

// UnsafeApprovalWorkflowApproversServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalWorkflowApproversServer will
// result in compilation errors.
type UnsafeApprovalWorkflowApproversServer interface {
	mustEmbedUnimplementedApprovalWorkflowApproversServer()
}

func RegisterApprovalWorkflowApproversServer(s grpc.ServiceRegistrar, srv ApprovalWorkflowApproversServer) {
	s.RegisterService(&_ApprovalWorkflowApprovers_serviceDesc, srv)
}

func _ApprovalWorkflowApprovers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowApproverCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowApproversServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflowApprovers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowApproversServer).Create(ctx, req.(*ApprovalWorkflowApproverCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflowApprovers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowApproverGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowApproversServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflowApprovers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowApproversServer).Get(ctx, req.(*ApprovalWorkflowApproverGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflowApprovers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowApproverDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowApproversServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflowApprovers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowApproversServer).Delete(ctx, req.(*ApprovalWorkflowApproverDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalWorkflowApprovers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalWorkflowApproverListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalWorkflowApproversServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ApprovalWorkflowApprovers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalWorkflowApproversServer).List(ctx, req.(*ApprovalWorkflowApproverListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApprovalWorkflowApprovers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ApprovalWorkflowApprovers",
	HandlerType: (*ApprovalWorkflowApproversServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApprovalWorkflowApprovers_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApprovalWorkflowApprovers_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApprovalWorkflowApprovers_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApprovalWorkflowApprovers_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "approval_workflow_approvers.proto",
}
