// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkflowApproversClient is the client API for WorkflowApprovers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowApproversClient interface {
	// Create creates a new workflow approver
	Create(ctx context.Context, in *WorkflowApproversCreateRequest, opts ...grpc.CallOption) (*WorkflowApproversCreateResponse, error)
	// Get reads one workflow approver by ID.
	Get(ctx context.Context, in *WorkflowApproverGetRequest, opts ...grpc.CallOption) (*WorkflowApproverGetResponse, error)
	// Delete deletes a workflow approver
	Delete(ctx context.Context, in *WorkflowApproversDeleteRequest, opts ...grpc.CallOption) (*WorkflowApproversDeleteResponse, error)
	// Lists existing workflow approvers.
	List(ctx context.Context, in *WorkflowApproversListRequest, opts ...grpc.CallOption) (*WorkflowApproversListResponse, error)
}

type workflowApproversClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowApproversClient(cc grpc.ClientConnInterface) WorkflowApproversClient {
	return &workflowApproversClient{cc}
}

func (c *workflowApproversClient) Create(ctx context.Context, in *WorkflowApproversCreateRequest, opts ...grpc.CallOption) (*WorkflowApproversCreateResponse, error) {
	out := new(WorkflowApproversCreateResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowApprovers/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowApproversClient) Get(ctx context.Context, in *WorkflowApproverGetRequest, opts ...grpc.CallOption) (*WorkflowApproverGetResponse, error) {
	out := new(WorkflowApproverGetResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowApprovers/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowApproversClient) Delete(ctx context.Context, in *WorkflowApproversDeleteRequest, opts ...grpc.CallOption) (*WorkflowApproversDeleteResponse, error) {
	out := new(WorkflowApproversDeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowApprovers/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowApproversClient) List(ctx context.Context, in *WorkflowApproversListRequest, opts ...grpc.CallOption) (*WorkflowApproversListResponse, error) {
	out := new(WorkflowApproversListResponse)
	err := c.cc.Invoke(ctx, "/v1.WorkflowApprovers/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowApproversServer is the server API for WorkflowApprovers service.
// All implementations must embed UnimplementedWorkflowApproversServer
// for forward compatibility
type WorkflowApproversServer interface {
	// Create creates a new workflow approver
	Create(context.Context, *WorkflowApproversCreateRequest) (*WorkflowApproversCreateResponse, error)
	// Get reads one workflow approver by ID.
	Get(context.Context, *WorkflowApproverGetRequest) (*WorkflowApproverGetResponse, error)
	// Delete deletes a workflow approver
	Delete(context.Context, *WorkflowApproversDeleteRequest) (*WorkflowApproversDeleteResponse, error)
	// Lists existing workflow approvers.
	List(context.Context, *WorkflowApproversListRequest) (*WorkflowApproversListResponse, error)
	mustEmbedUnimplementedWorkflowApproversServer()
}

// UnimplementedWorkflowApproversServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowApproversServer struct {
}

func (UnimplementedWorkflowApproversServer) Create(context.Context, *WorkflowApproversCreateRequest) (*WorkflowApproversCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkflowApproversServer) Get(context.Context, *WorkflowApproverGetRequest) (*WorkflowApproverGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkflowApproversServer) Delete(context.Context, *WorkflowApproversDeleteRequest) (*WorkflowApproversDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkflowApproversServer) List(context.Context, *WorkflowApproversListRequest) (*WorkflowApproversListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkflowApproversServer) mustEmbedUnimplementedWorkflowApproversServer() {}

// UnsafeWorkflowApproversServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowApproversServer will
// result in compilation errors.
type UnsafeWorkflowApproversServer interface {
	mustEmbedUnimplementedWorkflowApproversServer()
}

func RegisterWorkflowApproversServer(s grpc.ServiceRegistrar, srv WorkflowApproversServer) {
	s.RegisterService(&_WorkflowApprovers_serviceDesc, srv)
}

func _WorkflowApprovers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowApproversCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApproversServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowApprovers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApproversServer).Create(ctx, req.(*WorkflowApproversCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApprovers_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowApproverGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApproversServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowApprovers/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApproversServer).Get(ctx, req.(*WorkflowApproverGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApprovers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowApproversDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApproversServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowApprovers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApproversServer).Delete(ctx, req.(*WorkflowApproversDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowApprovers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowApproversListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowApproversServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.WorkflowApprovers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowApproversServer).List(ctx, req.(*WorkflowApproversListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkflowApprovers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.WorkflowApprovers",
	HandlerType: (*WorkflowApproversServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WorkflowApprovers_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WorkflowApprovers_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WorkflowApprovers_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WorkflowApprovers_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workflow_approvers.proto",
}
