// Copyright 2020 StrongDM Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: approval_workflow_approvers.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ApprovalWorkflowApproverCreateRequest specifies the approvalFlowID and approvalStepID of a new approval workflow
// approver to be created.
type ApprovalWorkflowApproverCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Parameters to define the new ApprovalWorkflowApprover.
	ApprovalWorkflowApprover *ApprovalWorkflowApprover `protobuf:"bytes,2,opt,name=approval_workflow_approver,json=approvalWorkflowApprover,proto3" json:"approval_workflow_approver,omitempty"`
}

func (x *ApprovalWorkflowApproverCreateRequest) Reset() {
	*x = ApprovalWorkflowApproverCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverCreateRequest) ProtoMessage() {}

func (x *ApprovalWorkflowApproverCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverCreateRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverCreateRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{0}
}

func (x *ApprovalWorkflowApproverCreateRequest) GetMeta() *CreateRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverCreateRequest) GetApprovalWorkflowApprover() *ApprovalWorkflowApprover {
	if x != nil {
		return x.ApprovalWorkflowApprover
	}
	return nil
}

// ApprovalWorkflowApproverCreateResponse reports how the ApprovalWorkflowApprover was created in the system.
type ApprovalWorkflowApproverCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *CreateResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The created approval workflow approver.
	ApprovalWorkflowApprover *ApprovalWorkflowApprover `protobuf:"bytes,2,opt,name=approval_workflow_approver,json=approvalWorkflowApprover,proto3" json:"approval_workflow_approver,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowApproverCreateResponse) Reset() {
	*x = ApprovalWorkflowApproverCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverCreateResponse) ProtoMessage() {}

func (x *ApprovalWorkflowApproverCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverCreateResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverCreateResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{1}
}

func (x *ApprovalWorkflowApproverCreateResponse) GetMeta() *CreateResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverCreateResponse) GetApprovalWorkflowApprover() *ApprovalWorkflowApprover {
	if x != nil {
		return x.ApprovalWorkflowApprover
	}
	return nil
}

func (x *ApprovalWorkflowApproverCreateResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowApproverGetRequest specifies which ApprovalWorkflowApprover to retrieve.
type ApprovalWorkflowApproverGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The unique identifier of the ApprovalWorkflowApprover to retrieve.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApprovalWorkflowApproverGetRequest) Reset() {
	*x = ApprovalWorkflowApproverGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverGetRequest) ProtoMessage() {}

func (x *ApprovalWorkflowApproverGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverGetRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverGetRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{2}
}

func (x *ApprovalWorkflowApproverGetRequest) GetMeta() *GetRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverGetRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ApprovalWorkflowApproverGetResponse returns a requested ApprovalWorkflowApprover.
type ApprovalWorkflowApproverGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *GetResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The requested ApprovalWorkflowApprover.
	ApprovalWorkflowApprover *ApprovalWorkflowApprover `protobuf:"bytes,2,opt,name=approval_workflow_approver,json=approvalWorkflowApprover,proto3" json:"approval_workflow_approver,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowApproverGetResponse) Reset() {
	*x = ApprovalWorkflowApproverGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverGetResponse) ProtoMessage() {}

func (x *ApprovalWorkflowApproverGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverGetResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverGetResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{3}
}

func (x *ApprovalWorkflowApproverGetResponse) GetMeta() *GetResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverGetResponse) GetApprovalWorkflowApprover() *ApprovalWorkflowApprover {
	if x != nil {
		return x.ApprovalWorkflowApprover
	}
	return nil
}

func (x *ApprovalWorkflowApproverGetResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowApproverDeleteRequest specifies the id of an approval workflow approver to be deleted.
type ApprovalWorkflowApproverDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// Id of the ApprovalWorkflowApprover to be deleted.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApprovalWorkflowApproverDeleteRequest) Reset() {
	*x = ApprovalWorkflowApproverDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverDeleteRequest) ProtoMessage() {}

func (x *ApprovalWorkflowApproverDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverDeleteRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{4}
}

func (x *ApprovalWorkflowApproverDeleteRequest) GetMeta() *DeleteRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverDeleteRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ApprovalWorkflowApproverDeleteResponse returns information about an ApprovalWorkflowApprover that was deleted.
type ApprovalWorkflowApproverDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *DeleteResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The deleted approval workflow approver id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowApproverDeleteResponse) Reset() {
	*x = ApprovalWorkflowApproverDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverDeleteResponse) ProtoMessage() {}

func (x *ApprovalWorkflowApproverDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverDeleteResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverDeleteResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{5}
}

func (x *ApprovalWorkflowApproverDeleteResponse) GetMeta() *DeleteResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverDeleteResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalWorkflowApproverDeleteResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowApproverListRequest specifies the criteria for retrieving a list of
// ApprovalWorkflowApprover records
type ApprovalWorkflowApproverListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListRequestMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// A human-readable filter query string.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ApprovalWorkflowApproverListRequest) Reset() {
	*x = ApprovalWorkflowApproverListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverListRequest) ProtoMessage() {}

func (x *ApprovalWorkflowApproverListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverListRequest.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverListRequest) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{6}
}

func (x *ApprovalWorkflowApproverListRequest) GetMeta() *ListRequestMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverListRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// ApprovalWorkflowApproverListResponse returns a list of ApprovalWorkflowApprover records that meet
// the criteria of an ApprovalWorkflowApproverListRequest.
type ApprovalWorkflowApproverListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reserved for future use.
	Meta *ListResponseMetadata `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	// The matching approval workflow approvers.
	ApprovalWorkflowApprovers []*ApprovalWorkflowApprover `protobuf:"bytes,2,rep,name=approval_workflow_approvers,json=approvalWorkflowApprovers,proto3" json:"approval_workflow_approvers,omitempty"`
	// Rate limit information.
	RateLimit *RateLimitMetadata `protobuf:"bytes,3,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ApprovalWorkflowApproverListResponse) Reset() {
	*x = ApprovalWorkflowApproverListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApproverListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApproverListResponse) ProtoMessage() {}

func (x *ApprovalWorkflowApproverListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApproverListResponse.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApproverListResponse) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{7}
}

func (x *ApprovalWorkflowApproverListResponse) GetMeta() *ListResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ApprovalWorkflowApproverListResponse) GetApprovalWorkflowApprovers() []*ApprovalWorkflowApprover {
	if x != nil {
		return x.ApprovalWorkflowApprovers
	}
	return nil
}

func (x *ApprovalWorkflowApproverListResponse) GetRateLimit() *RateLimitMetadata {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

// ApprovalWorkflowApprover links an approval workflow approver to an ApprovalWorkflowStep
type ApprovalWorkflowApprover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the ApprovalWorkflowApprover.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The approval flow id specified the approval workflow that this approver belongs to
	ApprovalFlowId string `protobuf:"bytes,2,opt,name=approval_flow_id,json=approvalFlowId,proto3" json:"approval_flow_id,omitempty"`
	// The approval step id specified the approval flow step that this approver belongs to
	ApprovalStepId string `protobuf:"bytes,3,opt,name=approval_step_id,json=approvalStepId,proto3" json:"approval_step_id,omitempty"`
	// The approver account id.
	AccountId string `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// The approver role id
	RoleId string `protobuf:"bytes,5,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// A reference to an approver. Will be one of ApproverReference constants.
	// This field is only populated when reading historical Approval Workflow Approvers data through the Approval Workflows History API.
	// For the deprecated Approval Workflow Approvers API no value is returned for this field and it is non-settable.
	Reference string `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *ApprovalWorkflowApprover) Reset() {
	*x = ApprovalWorkflowApprover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_workflow_approvers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalWorkflowApprover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalWorkflowApprover) ProtoMessage() {}

func (x *ApprovalWorkflowApprover) ProtoReflect() protoreflect.Message {
	mi := &file_approval_workflow_approvers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalWorkflowApprover.ProtoReflect.Descriptor instead.
func (*ApprovalWorkflowApprover) Descriptor() ([]byte, []int) {
	return file_approval_workflow_approvers_proto_rawDescGZIP(), []int{8}
}

func (x *ApprovalWorkflowApprover) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalWorkflowApprover) GetApprovalFlowId() string {
	if x != nil {
		return x.ApprovalFlowId
	}
	return ""
}

func (x *ApprovalWorkflowApprover) GetApprovalStepId() string {
	if x != nil {
		return x.ApprovalStepId
	}
	return ""
}

func (x *ApprovalWorkflowApprover) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ApprovalWorkflowApprover) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *ApprovalWorkflowApprover) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

var File_approval_workflow_approvers_proto protoreflect.FileDescriptor

var file_approval_workflow_approvers_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x25, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x1a, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2,
	0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x26, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x66,
	0x0a, 0x1a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x18, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3,
	0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3,
	0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07,
	0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x6c, 0x0a, 0x22, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb6, 0x02, 0x0a, 0x23, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x66, 0x0a, 0x1a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3,
	0xb3, 0x07, 0x01, 0x52, 0x18, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x62, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2,
	0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x72, 0x0a,
	0x25, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xe4, 0x01, 0x0a, 0x26, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0,
	0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2,
	0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2,
	0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8,
	0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07, 0x01, 0x22, 0x76, 0x0a, 0x23, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xae, 0x02, 0x0a, 0x24, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x68, 0x0a, 0x1b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb8, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x19, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x62, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x2c, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xf2, 0xf8, 0xb3, 0x07, 0x06, 0xb2, 0xf4, 0xb3,
	0x07, 0x01, 0x2a, 0xf2, 0xf8, 0xb3, 0x07, 0x12, 0xb2, 0xf4, 0xb3, 0x07, 0x0d, 0x21, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x3a, 0x0a, 0xfa, 0xf8, 0xb3, 0x07, 0x05, 0xa8, 0xf3, 0xb3, 0x07,
	0x01, 0x22, 0xf6, 0x03, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07,
	0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0xc0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xf2, 0xf8, 0xb3, 0x07, 0x0a, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0xc0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8, 0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x07, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xf2, 0xf8,
	0xb3, 0x07, 0x05, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xf2, 0xf8, 0xb3, 0x07, 0x31, 0xb0, 0xf3, 0xb3, 0x07, 0x01, 0x98,
	0xf4, 0xb3, 0x07, 0x01, 0xb2, 0xf4, 0xb3, 0x07, 0x01, 0x2a, 0xb2, 0xf4, 0xb3, 0x07, 0x13, 0x21,
	0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0xb2, 0xf4, 0xb3, 0x07, 0x04, 0x21, 0x63, 0x6c, 0x69, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0xa1, 0x01, 0xfa, 0xf8, 0xb3, 0x07, 0x9b, 0x01, 0xa8,
	0xf3, 0xb3, 0x07, 0x01, 0xc2, 0xf3, 0xb3, 0x07, 0x73, 0xa2, 0xf3, 0xb3, 0x07, 0x33, 0x74, 0x66,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x78,
	0x74, 0xaa, 0xf3, 0xb3, 0x07, 0x36, 0x74, 0x66, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x74, 0x78, 0x74, 0xd2, 0xf3, 0xb3, 0x07,
	0x01, 0x2a, 0xd2, 0xf3, 0xb3, 0x07, 0x13, 0x21, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0xe3, 0x05, 0x0a, 0x19, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xf9, 0xb3, 0x07,
	0x09, 0xa2, 0xf3, 0xb3, 0x07, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x24, 0xaa,
	0xf3, 0xb3, 0x07, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xf9,
	0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74, 0x82, 0xf9, 0xb3, 0x07, 0x28,
	0xaa, 0xf3, 0xb3, 0x07, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xf9, 0xb3, 0x07,
	0x0b, 0xa2, 0xf3, 0xb3, 0x07, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x82, 0xf9, 0xb3, 0x07,
	0x24, 0xaa, 0xf3, 0xb3, 0x07, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x36, 0x82, 0xf9, 0xb3, 0x07, 0x08, 0xa2, 0xf3, 0xb3, 0x07, 0x03, 0x67, 0x65, 0x74,
	0x82, 0xf9, 0xb3, 0x07, 0x24, 0xaa, 0xf3, 0xb3, 0x07, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2d,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x88, 0x02, 0x01, 0xca, 0xf9,
	0xb3, 0x07, 0x1d, 0xc2, 0xf9, 0xb3, 0x07, 0x18, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72,
	0xca, 0xf9, 0xb3, 0x07, 0x09, 0xd2, 0xf9, 0xb3, 0x07, 0x04, 0x61, 0x66, 0x61, 0x2d, 0xca, 0xf9,
	0xb3, 0x07, 0x05, 0xe8, 0xf9, 0xb3, 0x07, 0x01, 0xca, 0xf9, 0xb3, 0x07, 0x06, 0xca, 0xf9, 0xb3,
	0x07, 0x01, 0x2a, 0xca, 0xf9, 0xb3, 0x07, 0x18, 0xca, 0xf9, 0xb3, 0x07, 0x13, 0x21, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x42, 0x75, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67, 0x42, 0x21, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x50, 0x6c, 0x75, 0x6d, 0x62, 0x69, 0x6e, 0x67,
	0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x72,
	0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x64, 0x6d, 0x2d, 0x73,
	0x64, 0x6b, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_approval_workflow_approvers_proto_rawDescOnce sync.Once
	file_approval_workflow_approvers_proto_rawDescData = file_approval_workflow_approvers_proto_rawDesc
)

func file_approval_workflow_approvers_proto_rawDescGZIP() []byte {
	file_approval_workflow_approvers_proto_rawDescOnce.Do(func() {
		file_approval_workflow_approvers_proto_rawDescData = protoimpl.X.CompressGZIP(file_approval_workflow_approvers_proto_rawDescData)
	})
	return file_approval_workflow_approvers_proto_rawDescData
}

var file_approval_workflow_approvers_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_approval_workflow_approvers_proto_goTypes = []interface{}{
	(*ApprovalWorkflowApproverCreateRequest)(nil),  // 0: v1.ApprovalWorkflowApproverCreateRequest
	(*ApprovalWorkflowApproverCreateResponse)(nil), // 1: v1.ApprovalWorkflowApproverCreateResponse
	(*ApprovalWorkflowApproverGetRequest)(nil),     // 2: v1.ApprovalWorkflowApproverGetRequest
	(*ApprovalWorkflowApproverGetResponse)(nil),    // 3: v1.ApprovalWorkflowApproverGetResponse
	(*ApprovalWorkflowApproverDeleteRequest)(nil),  // 4: v1.ApprovalWorkflowApproverDeleteRequest
	(*ApprovalWorkflowApproverDeleteResponse)(nil), // 5: v1.ApprovalWorkflowApproverDeleteResponse
	(*ApprovalWorkflowApproverListRequest)(nil),    // 6: v1.ApprovalWorkflowApproverListRequest
	(*ApprovalWorkflowApproverListResponse)(nil),   // 7: v1.ApprovalWorkflowApproverListResponse
	(*ApprovalWorkflowApprover)(nil),               // 8: v1.ApprovalWorkflowApprover
	(*CreateRequestMetadata)(nil),                  // 9: v1.CreateRequestMetadata
	(*CreateResponseMetadata)(nil),                 // 10: v1.CreateResponseMetadata
	(*RateLimitMetadata)(nil),                      // 11: v1.RateLimitMetadata
	(*GetRequestMetadata)(nil),                     // 12: v1.GetRequestMetadata
	(*GetResponseMetadata)(nil),                    // 13: v1.GetResponseMetadata
	(*DeleteRequestMetadata)(nil),                  // 14: v1.DeleteRequestMetadata
	(*DeleteResponseMetadata)(nil),                 // 15: v1.DeleteResponseMetadata
	(*ListRequestMetadata)(nil),                    // 16: v1.ListRequestMetadata
	(*ListResponseMetadata)(nil),                   // 17: v1.ListResponseMetadata
}
var file_approval_workflow_approvers_proto_depIdxs = []int32{
	9,  // 0: v1.ApprovalWorkflowApproverCreateRequest.meta:type_name -> v1.CreateRequestMetadata
	8,  // 1: v1.ApprovalWorkflowApproverCreateRequest.approval_workflow_approver:type_name -> v1.ApprovalWorkflowApprover
	10, // 2: v1.ApprovalWorkflowApproverCreateResponse.meta:type_name -> v1.CreateResponseMetadata
	8,  // 3: v1.ApprovalWorkflowApproverCreateResponse.approval_workflow_approver:type_name -> v1.ApprovalWorkflowApprover
	11, // 4: v1.ApprovalWorkflowApproverCreateResponse.rate_limit:type_name -> v1.RateLimitMetadata
	12, // 5: v1.ApprovalWorkflowApproverGetRequest.meta:type_name -> v1.GetRequestMetadata
	13, // 6: v1.ApprovalWorkflowApproverGetResponse.meta:type_name -> v1.GetResponseMetadata
	8,  // 7: v1.ApprovalWorkflowApproverGetResponse.approval_workflow_approver:type_name -> v1.ApprovalWorkflowApprover
	11, // 8: v1.ApprovalWorkflowApproverGetResponse.rate_limit:type_name -> v1.RateLimitMetadata
	14, // 9: v1.ApprovalWorkflowApproverDeleteRequest.meta:type_name -> v1.DeleteRequestMetadata
	15, // 10: v1.ApprovalWorkflowApproverDeleteResponse.meta:type_name -> v1.DeleteResponseMetadata
	11, // 11: v1.ApprovalWorkflowApproverDeleteResponse.rate_limit:type_name -> v1.RateLimitMetadata
	16, // 12: v1.ApprovalWorkflowApproverListRequest.meta:type_name -> v1.ListRequestMetadata
	17, // 13: v1.ApprovalWorkflowApproverListResponse.meta:type_name -> v1.ListResponseMetadata
	8,  // 14: v1.ApprovalWorkflowApproverListResponse.approval_workflow_approvers:type_name -> v1.ApprovalWorkflowApprover
	11, // 15: v1.ApprovalWorkflowApproverListResponse.rate_limit:type_name -> v1.RateLimitMetadata
	0,  // 16: v1.ApprovalWorkflowApprovers.Create:input_type -> v1.ApprovalWorkflowApproverCreateRequest
	2,  // 17: v1.ApprovalWorkflowApprovers.Get:input_type -> v1.ApprovalWorkflowApproverGetRequest
	4,  // 18: v1.ApprovalWorkflowApprovers.Delete:input_type -> v1.ApprovalWorkflowApproverDeleteRequest
	6,  // 19: v1.ApprovalWorkflowApprovers.List:input_type -> v1.ApprovalWorkflowApproverListRequest
	1,  // 20: v1.ApprovalWorkflowApprovers.Create:output_type -> v1.ApprovalWorkflowApproverCreateResponse
	3,  // 21: v1.ApprovalWorkflowApprovers.Get:output_type -> v1.ApprovalWorkflowApproverGetResponse
	5,  // 22: v1.ApprovalWorkflowApprovers.Delete:output_type -> v1.ApprovalWorkflowApproverDeleteResponse
	7,  // 23: v1.ApprovalWorkflowApprovers.List:output_type -> v1.ApprovalWorkflowApproverListResponse
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_approval_workflow_approvers_proto_init() }
func file_approval_workflow_approvers_proto_init() {
	if File_approval_workflow_approvers_proto != nil {
		return
	}
	file_options_proto_init()
	file_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_approval_workflow_approvers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApproverListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_workflow_approvers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalWorkflowApprover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_approval_workflow_approvers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_approval_workflow_approvers_proto_goTypes,
		DependencyIndexes: file_approval_workflow_approvers_proto_depIdxs,
		MessageInfos:      file_approval_workflow_approvers_proto_msgTypes,
	}.Build()
	File_approval_workflow_approvers_proto = out.File
	file_approval_workflow_approvers_proto_rawDesc = nil
	file_approval_workflow_approvers_proto_goTypes = nil
	file_approval_workflow_approvers_proto_depIdxs = nil
}
