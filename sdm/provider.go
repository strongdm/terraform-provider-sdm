// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"fmt"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

const userAgent = "terraform-provider-sdm/14.18.1"

var resourcesMap = map[string]func() *schema.Resource{}

var dataSourcesMap = map[string]func() *schema.Resource{}

// Provider returns a terraform.ResourceProvider.
func Provider() *schema.Provider {
	provider := &schema.Provider{
		Schema: map[string]*schema.Schema{
			"api_access_key": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("SDM_API_ACCESS_KEY", nil),
				Description: "A GUID identifying the API key used to authenticate with the StrongDM API.",
			},

			"api_secret_key": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("SDM_API_SECRET_KEY", nil),
				Description: "A base64 encoded secret key used to authenticate with the StrongDM API.",
			},

			"host": {
				Type:        schema.TypeString,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("SDM_API_HOST", "app.strongdm.com:443"),
				Description: "The host and port of the StrongDM API endpoint.",
			},
			"retry_rate_limit_errors": {
				Type:        schema.TypeBool,
				Optional:    true,
				DefaultFunc: schema.EnvDefaultFunc("SDM_RETRY_RATE_LIMITS", "true"),
				Description: "Whether experienced rate limits should cause the client to sleep instead of erroring out",
			},
		},
		ResourcesMap:   map[string]*schema.Resource{},
		DataSourcesMap: map[string]*schema.Resource{},
		ConfigureFunc: func(d *schema.ResourceData) (interface{}, error) {
			host := d.Get("host").(string)
			opts := []sdm.ClientOption{
				sdm.WithUserAgentExtra(userAgent),
				sdm.WithHost(host),
			}
			if strings.HasPrefix(host, "localhost:") ||
				strings.HasPrefix(host, "127.0.0.1:") ||
				strings.HasPrefix(host, "host.docker.internal:") {
				opts = append(opts, sdm.WithInsecure())
			}
			if retry, ok := d.Get("retry_rate_limit_errors").(bool); ok {
				opts = append(opts, sdm.WithRateLimitRetries(retry))
			}
			client, err := sdm.New(d.Get("api_access_key").(string), d.Get("api_secret_key").(string), opts...)
			if err != nil {
				return nil, fmt.Errorf("cannot dial API server: %w", err)
			}
			return client, nil
		},
	}

	for name, constructor := range resourcesMap {
		provider.ResourcesMap[name] = constructor()
	}

	for name, constructor := range dataSourcesMap {
		provider.DataSourcesMap[name] = constructor()
	}

	return provider
}
