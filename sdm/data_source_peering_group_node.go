// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func dataSourcePeeringGroupNode() *schema.Resource {
	return &schema.Resource{
		ReadContext: wrapCrudOperation(dataSourcePeeringGroupNodeList),
		Schema: map[string]*schema.Schema{
			"ids": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Peering Group ID to which the node will be attached to.",
			},
			"id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Unique identifier of the Attachment.",
			},
			"node_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Node ID to be attached.",
			},
			"peering_group_nodes": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"group_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Peering Group ID to which the node will be attached to.",
						},
						"id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unique identifier of the Attachment.",
						},
						"node_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Node ID to be attached.",
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func init() {
	dataSourcesMap["sdm_peering_group_node"] = dataSourcePeeringGroupNode
}

func convertPeeringGroupNodeFilterToPlumbing(d *schema.ResourceData) (string, []interface{}) {
	filter := ""
	args := []interface{}{}
	if v, ok := d.GetOkExists("group_id"); ok {
		filter += "groupid:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("id"); ok {
		filter += "id:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("node_id"); ok {
		filter += "nodeid:? "
		args = append(args, v)
	}
	return filter, args
}

func dataSourcePeeringGroupNodeList(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	filter, args := convertPeeringGroupNodeFilterToPlumbing(d)
	resp, err := cc.PeeringGroupNodes().List(ctx, filter, args...)
	if err != nil {
		return fmt.Errorf("cannot list PeeringGroupNodes %s: %w", d.Id(), err)
	}
	ids := []string{}
	type entity = map[string]interface{}
	output := make([]entity, 0)
	for resp.Next() {
		v := resp.Value()
		ids = append(ids, v.ID)
		output = append(output,
			entity{
				"group_id": (v.GroupID),
				"id":       (v.ID),
				"node_id":  (v.NodeID),
			})
	}
	if resp.Err() != nil {
		return fmt.Errorf("failure during list: %w", resp.Err())
	}

	err = d.Set("ids", ids)
	if err != nil {
		return fmt.Errorf("cannot set ids: %w", err)
	}
	err = d.Set("peering_group_nodes", output)
	if err != nil {
		return fmt.Errorf("cannot set output: %w", err)
	}
	d.SetId("PeeringGroupNode" + filter + fmt.Sprint(args...))
	return nil
}
