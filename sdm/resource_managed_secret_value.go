// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/sha256"
	"crypto/x509"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"encoding/pem"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceManagedSecretValue() *schema.Resource {
	return &schema.Resource{
		ReadContext:   nilCrudFunc,
		CreateContext: managedSecretValueCreate,
		DeleteContext: nilCrudFunc,
		Schema: map[string]*schema.Schema{
			"value": {
				Description: "value object",
				Type:        schema.TypeMap,
				Required:    true,
				ForceNew:    true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"public_key": {
				Description: "secret engine's public key used for encryption in PEM format",
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
			},
			"encrypted": {
				Description: "encrypted value",
				Type:        schema.TypeString,
				Computed:    true,
			},
		},
	}
}

func nilCrudFunc(_ context.Context, _ *schema.ResourceData, _ any) diag.Diagnostics {
	return nil
}

func managedSecretValueCreate(ctx context.Context, d *schema.ResourceData, meta any) diag.Diagnostics {
	value := d.Get("value")
	publicKey := d.Get("public_key").(string)

	// try to decode first
	publicKeyData, err := base64.StdEncoding.DecodeString(publicKey)
	if err != nil {
		publicKeyData = []byte(publicKey)
	}

	block, _ := pem.Decode(publicKeyData)
	if block == nil {
		return diag.Errorf("failed to find PEM data block")
	}

	key, err := x509.ParsePKCS1PublicKey(block.Bytes)
	if err != nil {
		return diag.Errorf("failed to parse PKCS1 public key: %s", err)
	}

	payload, err := json.Marshal(value)
	if err != nil {
		return diag.Errorf("failed to marshal value to json: %s", err)
	}

	encrypted, err := rsa.EncryptOAEP(sha256.New(), rand.Reader, key, payload, nil)
	if err != nil {
		return diag.Errorf("failed to encrypt the value: %s", err)
	}

	encodedValue := base64.StdEncoding.EncodeToString(encrypted)
	d.Set("encrypted", encodedValue)
	d.SetId(hashForValue(encodedValue))
	return nil
}

func hashForValue(value string) string {
	if len(value) == 0 {
		return ""
	}
	hash := sha1.Sum([]byte(strings.TrimSpace(value)))
	return hex.EncodeToString(hash[:])
}

// register new resource type
func init() {
	resourcesMap["sdm_managed_secret_value"] = resourceManagedSecretValue
}
