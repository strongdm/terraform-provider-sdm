// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourcePolicy() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourcePolicyCreate),
		ReadContext:   wrapCrudOperation(resourcePolicyRead),
		UpdateContext: wrapCrudOperation(resourcePolicyUpdate),
		DeleteContext: wrapCrudOperation(resourcePolicyDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Optional description of the Policy.",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the Policy.",
			},
			"policy": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "The content of the Policy, in Cedar policy language.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Update:  schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func init() {
	resourcesMap["sdm_policy"] = resourcePolicy
}
func convertPolicyToPlumbing(d *schema.ResourceData) *sdm.Policy {
	return &sdm.Policy{
		ID:          d.Id(),
		Description: convertStringToPlumbing(d.Get("description")),
		Name:        convertStringToPlumbing(d.Get("name")),
		Policy:      convertStringToPlumbing(d.Get("policy")),
	}
}

func resourcePolicyCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertPolicyToPlumbing(d)
	resp, err := cc.Policies().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create Policy: %w", err)
	}
	d.SetId(resp.Policy.ID)
	v := resp.Policy
	d.Set("description", (v.Description))
	d.Set("name", (v.Name))
	d.Set("policy", (v.Policy))
	return nil
}

func resourcePolicyRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertPolicyToPlumbing(d)
	_ = localVersion
	resp, err := cc.Policies().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read Policy %s: %w", d.Id(), err)
	}
	v := resp.Policy
	d.Set("description", (v.Description))
	d.Set("name", (v.Name))
	d.Set("policy", (v.Policy))
	return nil
}
func resourcePolicyUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.Policies().Update(ctx, convertPolicyToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update Policy %s: %w", d.Id(), err)
	}
	d.SetId(resp.Policy.ID)
	return resourcePolicyRead(ctx, d, cc)
}
func resourcePolicyDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.Policies().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
