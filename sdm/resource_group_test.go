// Code generated by protogen. DO NOT EDIT.
// See pkg/api/v1/templates/terraform-provider-sdm/sdm/*_test.go.tpl

package sdm

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func init() {
	resource.AddTestSweepers("sdm_group", &resource.Sweeper{
		Name:         "sdm_group",
		Dependencies: []string{"sdm_account_group", "sdm_group_role"},
		F: func(region string) error {
			client, err := preTestClient()
			if err != nil {
				return fmt.Errorf("Error getting client: %s", err)
			}

			ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
			defer cancel()
			listResp, err := client.Groups().List(ctx, "name:*-test-acc")
			if err != nil {
				return fmt.Errorf("Error listing groups: %s", err)
			}
			for listResp.Next() {
				v := listResp.Value()
				_, err := client.Groups().Delete(ctx, v.ID)
				if err != nil {
					fmt.Printf("error deleting groups %s %s\n", v.ID, err)
				}
			}
			if listResp.Err() != nil {
				return fmt.Errorf("error after listing groups %s", listResp.Err())
			}
			return nil
		},
	})
}

func TestAccSDMGroup_Create(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-group-resource")
	groupName := randomWithPrefix("test-group")
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupConfig(rsName, groupName),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdm_group."+rsName, "name", groupName),
					func(s *terraform.State) error {
						id, err := testCreatedID(s, "sdm_group", rsName)
						if err != nil {
							return err
						}

						// check if it was actually created
						client := testClient()
						ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
						defer cancel()
						resp, err := client.Groups().Get(ctx, id)
						if err != nil {
							return fmt.Errorf("failed to get created resource: %w", err)
						}

						if resp.Group.Name != groupName {
							return fmt.Errorf("unexpected name '%s', expected '%s'", resp.Group.Name, groupName)
						}

						return nil
					},
				),
			},
			{
				ResourceName:      "sdm_group." + rsName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccSDMGroup_Update(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-group")
	groupName := randomWithPrefix("test-group")
	updatedGroupName := randomWithPrefix("test-group-updated")
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupConfig(rsName, groupName),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdm_group."+rsName, "name", groupName),
				),
			},
			{
				Config: testAccSDMGroupConfig(rsName, updatedGroupName),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdm_group."+rsName, "name", updatedGroupName),
					func(s *terraform.State) error {
						id, err := testCreatedID(s, "sdm_group", rsName)
						if err != nil {
							return err
						}

						// check if it was actually updated
						client := testClient()
						ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
						defer cancel()
						resp, err := client.Groups().Get(ctx, id)
						if err != nil {
							return fmt.Errorf("failed to get updated resource: %w", err)
						}

						if resp.Group.Name != updatedGroupName {
							return fmt.Errorf("unexpected name '%s', expected '%s'", resp.Group.Name, updatedGroupName)
						}

						return nil
					},
				),
			},
			{
				ResourceName:      "sdm_group." + rsName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccSDMGroup_Tags(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-group-tags")
	groupName := randomWithPrefix("test-group")
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupTagsConfig(rsName, groupName, "environment", "test"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdm_group."+rsName, "name", groupName),
					resource.TestCheckResourceAttr("sdm_group."+rsName, "tags.environment", "test"),
				),
			},
			{
				Config: testAccSDMGroupTagsConfig(rsName, groupName, "team", "engineering"),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sdm_group."+rsName, "name", groupName),
					resource.TestCheckResourceAttr("sdm_group."+rsName, "tags.team", "engineering"),
				),
			},
			{
				ResourceName:      "sdm_group." + rsName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccSDMGroupConfig(resourceName string, groupName string) string {
	return fmt.Sprintf(`
	resource "sdm_group" "%s" {
		name = "%s"
	}`, resourceName, groupName)
}

func testAccSDMGroupTagsConfig(resourceName string, groupName string, tagKey string, tagValue string) string {
	return fmt.Sprintf(`
	resource "sdm_group" "%s" {
		name = "%s"
		tags = {
			%s = "%s"
		}
	}`, resourceName, groupName, tagKey, tagValue)
}

func createGroupsWithPrefix(prefix string, count int) ([]*sdm.Group, error) {
	client, err := preTestClient()
	if err != nil {
		return nil, fmt.Errorf("failed to create test client: %w", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()
	groups := []*sdm.Group{}
	for i := 0; i < count; i++ {
		createResp, err := client.Groups().Create(ctx, &sdm.Group{
			Name: randomWithPrefix(prefix),
		})
		if err != nil {
			return nil, fmt.Errorf("failed to create role: %w", err)
		}
		groups = append(groups, createResp.Group)
	}
	return groups, nil
}
