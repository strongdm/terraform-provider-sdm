// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceManagedSecret() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceManagedSecretCreate),
		ReadContext:   wrapCrudOperation(resourceManagedSecretRead),
		UpdateContext: wrapCrudOperation(resourceManagedSecretUpdate),
		DeleteContext: wrapCrudOperation(resourceManagedSecretDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"config": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "public part of the secret value",
			},
			"expires_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Timestamp of when secret is going to be rotated",
			},
			"last_rotated_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Timestamp of when secret was last rotated",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the Managed Secret.",
			},
			"secret_engine_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "An ID of a Secret Engine linked with the Managed Secret.",
			},
			"secret_store_path": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Path in a secret store.",
			},
			"tags": {
				Type:        schema.TypeMap,
				Elem:        tagsElemType,
				Optional:    true,
				Description: "Tags is a map of key, value pairs.",
			},
			"value": {
				Type:        schema.TypeString,
				Optional:    true,
				Sensitive:   true,
				Description: "Sensitive value of the secret.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Update:  schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertManagedSecretToPlumbing(d *schema.ResourceData) *sdm.ManagedSecret {
	return &sdm.ManagedSecret{
		ID:              d.Id(),
		Config:          convertStringToPlumbing(d.Get("config")),
		ExpiresAt:       convertTimestampToPlumbing(d.Get("expires_at")),
		LastRotatedAt:   convertTimestampToPlumbing(d.Get("last_rotated_at")),
		Name:            convertStringToPlumbing(d.Get("name")),
		SecretEngineID:  convertStringToPlumbing(d.Get("secret_engine_id")),
		SecretStorePath: convertStringToPlumbing(d.Get("secret_store_path")),
		Tags:            convertTagsToPlumbing(d.Get("tags")),
		Value:           convertBytesToPlumbing(d.Get("value")),
	}
}

func resourceManagedSecretCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertManagedSecretToPlumbing(d)
	resp, err := cc.ManagedSecrets().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create ManagedSecret: %w", err)
	}
	d.SetId(resp.ManagedSecret.ID)
	v := resp.ManagedSecret
	d.Set("config", (v.Config))
	d.Set("expires_at", convertTimestampToPorcelain(v.ExpiresAt))
	d.Set("last_rotated_at", convertTimestampToPorcelain(v.LastRotatedAt))
	d.Set("name", (v.Name))
	d.Set("secret_engine_id", (v.SecretEngineID))
	d.Set("secret_store_path", (v.SecretStorePath))
	d.Set("tags", convertTagsToPorcelain(v.Tags))
	d.Set("value", convertBytesToPorcelain(v.Value))
	return nil
}

func resourceManagedSecretRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertManagedSecretToPlumbing(d)
	_ = localVersion
	resp, err := cc.ManagedSecrets().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read ManagedSecret %s: %w", d.Id(), err)
	}
	v := resp.ManagedSecret
	d.Set("config", (v.Config))
	d.Set("expires_at", convertTimestampToPorcelain(v.ExpiresAt))
	d.Set("last_rotated_at", convertTimestampToPorcelain(v.LastRotatedAt))
	d.Set("name", (v.Name))
	d.Set("secret_engine_id", (v.SecretEngineID))
	d.Set("secret_store_path", (v.SecretStorePath))
	d.Set("tags", convertTagsToPorcelain(v.Tags))
	d.Set("value", convertBytesToPorcelain(v.Value))
	return nil
}
func resourceManagedSecretUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.ManagedSecrets().Update(ctx, convertManagedSecretToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update ManagedSecret %s: %w", d.Id(), err)
	}
	d.SetId(resp.ManagedSecret.ID)
	return resourceManagedSecretRead(ctx, d, cc)
}
func resourceManagedSecretDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.ManagedSecrets().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
