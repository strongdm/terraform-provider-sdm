// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func dataSourceWorkflow() *schema.Resource {
	return &schema.Resource{
		ReadContext: wrapCrudOperation(dataSourceWorkflowList),
		Schema: map[string]*schema.Schema{
			"ids": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"access_request_fixed_duration": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.",
			},
			"access_request_max_duration": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.",
			},
			"approval_flow_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Optional approval flow ID identifies an approval flow that linked to the workflow",
			},
			"auto_grant": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Optional auto grant setting to automatically approve requests or not, defaults to false.",
				Deprecated:  "auto_grant is deprecated, see docs for more info",
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Optional description of the Workflow.",
			},
			"enabled": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.",
			},
			"id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Unique identifier of the Workflow.",
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Unique human-readable name of the Workflow.",
			},
			"weight": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: "Optional weight for workflow to specify it's priority in matching a request.",
			},
			"workflows": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"access_request_fixed_duration": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Fixed Duration of access requests bound to this workflow. If fixed duration is provided, max duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.",
						},
						"access_request_max_duration": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Maximum Duration of access requests bound to this workflow. If max duration is provided, fixed duration must be empty. If neither max nor fixed duration are provided, requests that bind to this workflow will use the organization-level settings.",
						},
						"access_rules": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "AccessRules is a list of access rules defining the resources this Workflow provides access to.",
						},
						"approval_flow_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Optional approval flow ID identifies an approval flow that linked to the workflow",
						},
						"auto_grant": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Optional auto grant setting to automatically approve requests or not, defaults to false.",
							Deprecated:  "auto_grant is deprecated, see docs for more info",
						},
						"description": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Optional description of the Workflow.",
						},
						"enabled": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "Optional enabled state for workflow. This setting may be overridden by the system if the workflow doesn't meet the requirements to be enabled or if other conditions prevent enabling the workflow. The requirements to enable a workflow are that the workflow must be either set up for with auto grant enabled or have one or more WorkflowApprovers created for the workflow.",
						},
						"id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unique identifier of the Workflow.",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unique human-readable name of the Workflow.",
						},
						"weight": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Optional weight for workflow to specify it's priority in matching a request.",
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func convertWorkflowFilterToPlumbing(d *schema.ResourceData) (string, []interface{}) {
	filter := ""
	args := []interface{}{}
	if v, ok := d.GetOkExists("access_request_fixed_duration"); ok {
		filter += "accessrequestfixedduration:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("access_request_max_duration"); ok {
		filter += "accessrequestmaxduration:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("access_rules"); ok {
		filter += "accessrules:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("approval_flow_id"); ok {
		filter += "approvalflowid:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("auto_grant"); ok {
		filter += "autogrant:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("description"); ok {
		filter += "description:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("enabled"); ok {
		filter += "enabled:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("id"); ok {
		filter += "id:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("name"); ok {
		filter += "name:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("weight"); ok {
		filter += "weight:? "
		args = append(args, v)
	}
	return filter, args
}

func dataSourceWorkflowList(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	filter, args := convertWorkflowFilterToPlumbing(d)
	resp, err := cc.Workflows().List(ctx, filter, args...)
	if err != nil {
		return fmt.Errorf("cannot list Workflows %s: %w", d.Id(), err)
	}
	ids := []string{}
	type entity = map[string]interface{}
	output := make([]entity, 0)
	for resp.Next() {
		v := resp.Value()
		ids = append(ids, v.ID)
		output = append(output,
			entity{
				"access_request_fixed_duration": convertDurationToPorcelain(v.AccessRequestFixedDuration),
				"access_request_max_duration":   convertDurationToPorcelain(v.AccessRequestMaxDuration),
				"access_rules":                  convertAccessRulesToPorcelain(v.AccessRules),
				"approval_flow_id":              (v.ApprovalFlowID),
				"auto_grant":                    (v.AutoGrant),
				"description":                   (v.Description),
				"enabled":                       (v.Enabled),
				"id":                            (v.ID),
				"name":                          (v.Name),
				"weight":                        (v.Weight),
			})
	}
	if resp.Err() != nil {
		return fmt.Errorf("failure during list: %w", resp.Err())
	}

	err = d.Set("ids", ids)
	if err != nil {
		return fmt.Errorf("cannot set ids: %w", err)
	}
	err = d.Set("workflows", output)
	if err != nil {
		return fmt.Errorf("cannot set output: %w", err)
	}
	d.SetId("Workflow" + filter + fmt.Sprint(args...))
	return nil
}
