// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceAccount() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceAccountCreate),
		ReadContext:   wrapCrudOperation(resourceAccountRead),
		UpdateContext: wrapCrudOperation(resourceAccountUpdate),
		DeleteContext: wrapCrudOperation(resourceAccountDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"service": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "A Service is a service account that can connect to resources they are granted directly, or granted via roles. Services are typically automated jobs.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Unique human-readable name of the Service.",
						},
						"suspended": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "The Service's suspended state.",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
						"token": {
							Type:      schema.TypeString,
							Computed:  true,
							Sensitive: true,
						},
					},
				},
			},

			"user": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "A User can connect to resources they are granted directly, or granted via roles.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"email": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The User's email address. Must be unique.",
						},
						"external_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "External ID is an alternative unique ID this user is represented by within an external service.",
						},
						"first_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The User's first name.",
						},
						"last_name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The User's last name.",
						},
						"managed_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Managed By is a read only field for what service manages this user, e.g. StrongDM, Okta, Azure.",
						},
						"permission_level": {
							Type:        schema.TypeString,
							Optional:    true,
							Computed:    true,
							Description: "PermissionLevel is the user's permission level e.g. admin, DBA, user.",
						},
						"suspended": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Suspended is a read only field for the User's suspended state.",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertAccountToPlumbing(d *schema.ResourceData) sdm.Account {
	if list := d.Get("service").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.Service{}
		}
		out := &sdm.Service{
			ID:        d.Id(),
			Name:      convertStringToPlumbing(raw["name"]),
			Suspended: convertBoolToPlumbing(raw["suspended"]),
			Tags:      convertTagsToPlumbing(raw["tags"]),
		}
		return out
	}

	if list := d.Get("user").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.User{}
		}
		out := &sdm.User{
			ID:              d.Id(),
			Email:           convertStringToPlumbing(raw["email"]),
			ExternalID:      convertStringToPlumbing(raw["external_id"]),
			FirstName:       convertStringToPlumbing(raw["first_name"]),
			LastName:        convertStringToPlumbing(raw["last_name"]),
			PermissionLevel: convertStringToPlumbing(raw["permission_level"]),
			Tags:            convertTagsToPlumbing(raw["tags"]),
		}
		return out
	}
	return nil
}

func resourceAccountCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertAccountToPlumbing(d)
	resp, err := cc.Accounts().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create Account: %w", err)
	}
	d.SetId(resp.Account.GetID())
	switch v := resp.Account.(type) {
	case *sdm.Service:
		localV, _ := localVersion.(*sdm.Service)
		_ = localV
		d.Set("service", []map[string]interface{}{
			{
				"name":      (v.Name),
				"suspended": (v.Suspended),
				"tags":      convertTagsToPorcelain(v.Tags),
				"token":     resp.Token,
			},
		})

	case *sdm.User:
		localV, _ := localVersion.(*sdm.User)
		_ = localV
		d.Set("user", []map[string]interface{}{
			{
				"email":            (v.Email),
				"external_id":      (v.ExternalID),
				"first_name":       (v.FirstName),
				"last_name":        (v.LastName),
				"managed_by":       (v.ManagedBy),
				"permission_level": (v.PermissionLevel),
				"suspended":        (v.Suspended),
				"tags":             convertTagsToPorcelain(v.Tags),
			},
		})
	}
	return nil
}

func resourceAccountRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertAccountToPlumbing(d)
	_ = localVersion
	resp, err := cc.Accounts().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read Account %s: %w", d.Id(), err)
	}
	switch v := resp.Account.(type) {
	case *sdm.Service:
		localV, ok := localVersion.(*sdm.Service)
		if !ok {
			localV = &sdm.Service{}
		}
		_ = localV
		d.Set("service", []map[string]interface{}{
			{
				"name":      (v.Name),
				"suspended": (v.Suspended),
				"tags":      convertTagsToPorcelain(v.Tags),
				"token":     d.Get("service.0.token"),
			},
		})

	case *sdm.User:
		localV, ok := localVersion.(*sdm.User)
		if !ok {
			localV = &sdm.User{}
		}
		_ = localV
		d.Set("user", []map[string]interface{}{
			{
				"email":            (v.Email),
				"external_id":      (v.ExternalID),
				"first_name":       (v.FirstName),
				"last_name":        (v.LastName),
				"managed_by":       (v.ManagedBy),
				"permission_level": (v.PermissionLevel),
				"suspended":        (v.Suspended),
				"tags":             convertTagsToPorcelain(v.Tags),
			},
		})
	}
	return nil
}
func resourceAccountUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	resp, err := cc.Accounts().Update(ctx, convertAccountToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update Account %s: %w", d.Id(), err)
	}
	d.SetId(resp.Account.GetID())
	return resourceAccountRead(ctx, d, cc)
}
func resourceAccountDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.Accounts().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
