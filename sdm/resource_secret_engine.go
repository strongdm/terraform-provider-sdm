// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceSecretEngine() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceSecretEngineCreate),
		ReadContext:   wrapCrudOperation(resourceSecretEngineRead),
		UpdateContext: wrapCrudOperation(resourceSecretEngineUpdate),
		DeleteContext: wrapCrudOperation(resourceSecretEngineDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"active_directory": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"after_read_ttl": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "0s",
							Description: "The default time-to-live duration of the password after it's read. Once the ttl has passed, a password will be rotated.",
						},
						"binddn": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Distinguished name of object to bind when performing user and group search. Example: cn=vault,ou=Users,dc=example,dc=com",
						},
						"bindpass": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Password to use along with binddn when performing user search.",
						},
						"certificate": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "CA certificate to use when verifying LDAP server certificate, must be x509 PEM encoded.",
						},
						"connection_timeout": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Timeout, in seconds, when attempting to connect to the LDAP server before trying the next URL in the configuration.",
						},
						"do_not_validate_timestamps": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If set to true this will prevent password change timestamp validation in Active Directory when validating credentials",
						},
						"insecure_tls": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If true, skips LDAP server SSL certificate verification - insecure, use with caution!",
						},
						"key_rotation_interval_days": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "An interval of public/private key rotation for secret engine in days",
						},
						"max_backoff_duration": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "0s",
							Description: "The maximum retry duration in case of automatic failure. On failed ttl rotation attempt it will be retried in an increasing intervals until it reaches max_backoff_duration",
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Unique human-readable name of the Secret Engine.",
						},
						"public_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Public key linked with a secret engine",
						},
						"request_timeout": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "Timeout, in seconds, for the connection when making requests against the server before returning back an error.",
						},
						"secret_store_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Backing secret store identifier",
						},
						"secret_store_root_path": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Backing Secret Store root path where managed secrets are going to be stored",
						},
						"start_tls": {
							Type:        schema.TypeBool,
							Optional:    true,
							Description: "If true, issues a StartTLS command after establishing an unencrypted connection.",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
						"ttl": {
							Type:        schema.TypeString,
							Optional:    true,
							Default:     "0s",
							Description: "The default password time-to-live duration. Once the ttl has passed, a password will be rotated the next time it's requested.",
						},
						"upndomain": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "The domain (userPrincipalDomain) used to construct a UPN string for authentication.",
						},
						"url": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "The LDAP server to connect to.",
						},
						"userdn": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Base DN under which to perform user search. Example: ou=Users,dc=example,dc=com",
						},
					},
				},
			},
			"key_value": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"key_rotation_interval_days": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "An interval of public/private key rotation for secret engine in days",
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Unique human-readable name of the Secret Engine.",
						},
						"public_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Public key linked with a secret engine",
						},
						"secret_store_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Backing secret store identifier",
						},
						"secret_store_root_path": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Backing Secret Store root path where managed secrets are going to be stored",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
					},
				},
			},
			"postgres_secret_engine": {
				Type:        schema.TypeList,
				MaxItems:    1,
				Optional:    true,
				Description: "PostgresEngine is currently unstable, and its API may change, or it may be removed, without a major version bump.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"hostname": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Hostname is the hostname or IP address of the Postgres server.",
						},
						"key_rotation_interval_days": {
							Type:        schema.TypeInt,
							Optional:    true,
							Description: "An interval of public/private key rotation for secret engine in days",
						},
						"name": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Unique human-readable name of the Secret Engine.",
						},
						"password": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Password is the password to connect to the Postgres server.",
						},
						"port": {
							Type:        schema.TypeInt,
							Required:    true,
							Description: "Port is the port number of the Postgres server.",
						},
						"public_key": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Public key linked with a secret engine",
						},
						"secret_store_id": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Backing secret store identifier",
						},
						"secret_store_root_path": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Backing Secret Store root path where managed secrets are going to be stored",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
						"username": {
							Type:        schema.TypeString,
							Required:    true,
							Description: "Username is the username to connect to the Postgres server.",
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Update:  schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func init() {
	resourcesMap["sdm_secret_engine"] = resourceSecretEngine
}
func convertSecretEngineToPlumbing(d *schema.ResourceData) sdm.SecretEngine {
	if list := d.Get("active_directory").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.ActiveDirectoryEngine{}
		}
		out := &sdm.ActiveDirectoryEngine{
			ID:                      d.Id(),
			AfterReadTtl:            convertDurationToPlumbing(raw["after_read_ttl"]),
			Binddn:                  convertStringToPlumbing(raw["binddn"]),
			Bindpass:                convertStringToPlumbing(raw["bindpass"]),
			Certificate:             convertStringToPlumbing(raw["certificate"]),
			ConnectionTimeout:       convertUint32ToPlumbing(raw["connection_timeout"]),
			DoNotValidateTimestamps: convertBoolToPlumbing(raw["do_not_validate_timestamps"]),
			InsecureTls:             convertBoolToPlumbing(raw["insecure_tls"]),
			KeyRotationIntervalDays: convertInt32ToPlumbing(raw["key_rotation_interval_days"]),
			MaxBackoffDuration:      convertDurationToPlumbing(raw["max_backoff_duration"]),
			Name:                    convertStringToPlumbing(raw["name"]),
			RequestTimeout:          convertUint32ToPlumbing(raw["request_timeout"]),
			SecretStoreID:           convertStringToPlumbing(raw["secret_store_id"]),
			SecretStoreRootPath:     convertStringToPlumbing(raw["secret_store_root_path"]),
			StartTls:                convertBoolToPlumbing(raw["start_tls"]),
			Tags:                    convertTagsToPlumbing(raw["tags"]),
			Ttl:                     convertDurationToPlumbing(raw["ttl"]),
			Upndomain:               convertStringToPlumbing(raw["upndomain"]),
			Url:                     convertStringToPlumbing(raw["url"]),
			Userdn:                  convertStringToPlumbing(raw["userdn"]),
		}
		return out
	}
	if list := d.Get("key_value").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.KeyValueEngine{}
		}
		out := &sdm.KeyValueEngine{
			ID:                      d.Id(),
			KeyRotationIntervalDays: convertInt32ToPlumbing(raw["key_rotation_interval_days"]),
			Name:                    convertStringToPlumbing(raw["name"]),
			SecretStoreID:           convertStringToPlumbing(raw["secret_store_id"]),
			SecretStoreRootPath:     convertStringToPlumbing(raw["secret_store_root_path"]),
			Tags:                    convertTagsToPlumbing(raw["tags"]),
		}
		return out
	}
	if list := d.Get("postgres_secret_engine").([]interface{}); len(list) > 0 {
		raw, ok := list[0].(map[string]interface{})
		if !ok {
			return &sdm.PostgresEngine{}
		}
		out := &sdm.PostgresEngine{
			ID:                      d.Id(),
			Hostname:                convertStringToPlumbing(raw["hostname"]),
			KeyRotationIntervalDays: convertInt32ToPlumbing(raw["key_rotation_interval_days"]),
			Name:                    convertStringToPlumbing(raw["name"]),
			Password:                convertStringToPlumbing(raw["password"]),
			Port:                    convertUint32ToPlumbing(raw["port"]),
			SecretStoreID:           convertStringToPlumbing(raw["secret_store_id"]),
			SecretStoreRootPath:     convertStringToPlumbing(raw["secret_store_root_path"]),
			Tags:                    convertTagsToPlumbing(raw["tags"]),
			Username:                convertStringToPlumbing(raw["username"]),
		}
		return out
	}
	return nil
}

func resourceSecretEngineCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertSecretEngineToPlumbing(d)
	resp, err := cc.SecretEngines().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create SecretEngine: %w", err)
	}
	d.SetId(resp.SecretEngine.GetID())
	switch v := resp.SecretEngine.(type) {
	case *sdm.ActiveDirectoryEngine:
		localV, _ := localVersion.(*sdm.ActiveDirectoryEngine)
		_ = localV
		d.Set("active_directory", []map[string]interface{}{
			{
				"after_read_ttl":             convertDurationToPorcelain(v.AfterReadTtl),
				"binddn":                     (v.Binddn),
				"bindpass":                   (v.Bindpass),
				"certificate":                (v.Certificate),
				"connection_timeout":         (v.ConnectionTimeout),
				"do_not_validate_timestamps": (v.DoNotValidateTimestamps),
				"insecure_tls":               (v.InsecureTls),
				"key_rotation_interval_days": (v.KeyRotationIntervalDays),
				"max_backoff_duration":       convertDurationToPorcelain(v.MaxBackoffDuration),
				"name":                       (v.Name),
				"public_key":                 convertBytesToPorcelain(v.PublicKey),
				"request_timeout":            (v.RequestTimeout),
				"secret_store_id":            (v.SecretStoreID),
				"secret_store_root_path":     (v.SecretStoreRootPath),
				"start_tls":                  (v.StartTls),
				"tags":                       convertTagsToPorcelain(v.Tags),
				"ttl":                        convertDurationToPorcelain(v.Ttl),
				"upndomain":                  (v.Upndomain),
				"url":                        (v.Url),
				"userdn":                     (v.Userdn),
			},
		})
	case *sdm.KeyValueEngine:
		localV, _ := localVersion.(*sdm.KeyValueEngine)
		_ = localV
		d.Set("key_value", []map[string]interface{}{
			{
				"key_rotation_interval_days": (v.KeyRotationIntervalDays),
				"name":                       (v.Name),
				"public_key":                 convertBytesToPorcelain(v.PublicKey),
				"secret_store_id":            (v.SecretStoreID),
				"secret_store_root_path":     (v.SecretStoreRootPath),
				"tags":                       convertTagsToPorcelain(v.Tags),
			},
		})
	case *sdm.PostgresEngine:
		localV, _ := localVersion.(*sdm.PostgresEngine)
		_ = localV
		d.Set("postgres_secret_engine", []map[string]interface{}{
			{
				"hostname":                   (v.Hostname),
				"key_rotation_interval_days": (v.KeyRotationIntervalDays),
				"name":                       (v.Name),
				"password":                   (v.Password),
				"port":                       (v.Port),
				"public_key":                 convertBytesToPorcelain(v.PublicKey),
				"secret_store_id":            (v.SecretStoreID),
				"secret_store_root_path":     (v.SecretStoreRootPath),
				"tags":                       convertTagsToPorcelain(v.Tags),
				"username":                   (v.Username),
			},
		})
	}
	return nil
}

func resourceSecretEngineRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertSecretEngineToPlumbing(d)
	_ = localVersion
	resp, err := cc.SecretEngines().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read SecretEngine %s: %w", d.Id(), err)
	}
	switch v := resp.SecretEngine.(type) {
	case *sdm.ActiveDirectoryEngine:
		localV, ok := localVersion.(*sdm.ActiveDirectoryEngine)
		if !ok {
			localV = &sdm.ActiveDirectoryEngine{}
		}
		_ = localV
		d.Set("active_directory", []map[string]interface{}{
			{
				"after_read_ttl":             convertDurationToPorcelain(v.AfterReadTtl),
				"binddn":                     (v.Binddn),
				"bindpass":                   (v.Bindpass),
				"certificate":                (v.Certificate),
				"connection_timeout":         (v.ConnectionTimeout),
				"do_not_validate_timestamps": (v.DoNotValidateTimestamps),
				"insecure_tls":               (v.InsecureTls),
				"key_rotation_interval_days": (v.KeyRotationIntervalDays),
				"max_backoff_duration":       convertDurationToPorcelain(v.MaxBackoffDuration),
				"name":                       (v.Name),
				"public_key":                 convertBytesToPorcelain(v.PublicKey),
				"request_timeout":            (v.RequestTimeout),
				"secret_store_id":            (v.SecretStoreID),
				"secret_store_root_path":     (v.SecretStoreRootPath),
				"start_tls":                  (v.StartTls),
				"tags":                       convertTagsToPorcelain(v.Tags),
				"ttl":                        convertDurationToPorcelain(v.Ttl),
				"upndomain":                  (v.Upndomain),
				"url":                        (v.Url),
				"userdn":                     (v.Userdn),
			},
		})
	case *sdm.KeyValueEngine:
		localV, ok := localVersion.(*sdm.KeyValueEngine)
		if !ok {
			localV = &sdm.KeyValueEngine{}
		}
		_ = localV
		d.Set("key_value", []map[string]interface{}{
			{
				"key_rotation_interval_days": (v.KeyRotationIntervalDays),
				"name":                       (v.Name),
				"public_key":                 convertBytesToPorcelain(v.PublicKey),
				"secret_store_id":            (v.SecretStoreID),
				"secret_store_root_path":     (v.SecretStoreRootPath),
				"tags":                       convertTagsToPorcelain(v.Tags),
			},
		})
	case *sdm.PostgresEngine:
		localV, ok := localVersion.(*sdm.PostgresEngine)
		if !ok {
			localV = &sdm.PostgresEngine{}
		}
		_ = localV
		d.Set("postgres_secret_engine", []map[string]interface{}{
			{
				"hostname":                   (v.Hostname),
				"key_rotation_interval_days": (v.KeyRotationIntervalDays),
				"name":                       (v.Name),
				"password":                   (v.Password),
				"port":                       (v.Port),
				"public_key":                 convertBytesToPorcelain(v.PublicKey),
				"secret_store_id":            (v.SecretStoreID),
				"secret_store_root_path":     (v.SecretStoreRootPath),
				"tags":                       convertTagsToPorcelain(v.Tags),
				"username":                   (v.Username),
			},
		})
	}
	return nil
}
func resourceSecretEngineUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.SecretEngines().Update(ctx, convertSecretEngineToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update SecretEngine %s: %w", d.Id(), err)
	}
	d.SetId(resp.SecretEngine.GetID())
	return resourceSecretEngineRead(ctx, d, cc)
}
func resourceSecretEngineDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.SecretEngines().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
