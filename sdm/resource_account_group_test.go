// Code generated by protogen. DO NOT EDIT.
// See pkg/api/v1/templates/terraform-provider-sdm/sdm/*_test.go.tpl

package sdm

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func init() {
	resource.AddTestSweepers("sdm_account_group", &resource.Sweeper{
		Name: "sdm_account_group",
		F: func(region string) error {
			client, err := preTestClient()
			if err != nil {
				return fmt.Errorf("Error getting client: %s", err)
			}

			ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
			defer cancel()

			groupResp, err := client.Groups().List(ctx, "name:*-test-acc")
			if err != nil {
				return fmt.Errorf("Error listing groups: %s", err)
			}

			for groupResp.Next() {
				g := groupResp.Value()
				agResp, err := client.AccountsGroups().List(ctx, "groupid:?", g.ID)
				if err != nil {
					return fmt.Errorf("Error listing account groups: %s", err)
				}
				for agResp.Next() {
					v := agResp.Value()
					_, err := client.AccountsGroups().Delete(ctx, v.ID)
					if err != nil {
						fmt.Printf("error deleting account group %s %s\n", v.ID, err)
					}
				}
				if agResp.Err() != nil {
					fmt.Printf("error listing account groups %s", agResp.Err())
				}
			}
			if groupResp.Err() != nil {
				return fmt.Errorf("error listing groups %s", groupResp.Err())
			}
			return nil
		},
	})
}

func TestAccSDMAccountGroup_Create(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-account-group-create")
	groupRsName := randomWithPrefix("test-group")
	accountRsName := randomWithPrefix("test-account")
	accountID := ""
	groupID := ""
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMAccountGroupConfig(rsName, groupRsName, accountRsName),
				Check: resource.ComposeTestCheckFunc(
					func(s *terraform.State) error {
						var err error
						accountID, err = testCreatedID(s, "sdm_account", accountRsName)
						if err != nil {
							return err
						}

						groupID, err = testCreatedID(s, "sdm_group", groupRsName)
						if err != nil {
							return err
						}
						return nil
					},
					func(s *terraform.State) error {
						if err := resource.TestCheckResourceAttr("sdm_account_group."+rsName, "account_id", accountID)(s); err != nil {
							return err
						}
						if err := resource.TestCheckResourceAttr("sdm_account_group."+rsName, "group_id", groupID)(s); err != nil {
							return err
						}
						return nil
					},
					func(s *terraform.State) error {

						id, err := testCreatedID(s, "sdm_account_group", rsName)
						if err != nil {
							return err
						}

						// check if it was actually created
						client := testClient()
						ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
						defer cancel()
						resp, err := client.AccountsGroups().Get(ctx, id)
						if err != nil {
							return fmt.Errorf("failed to get created resource: %w", err)
						}

						if resp.AccountGroup.AccountID != accountID {
							return fmt.Errorf("unexpected account_id '%s', expected '%s'", resp.AccountGroup.AccountID, accountID)
						}

						if resp.AccountGroup.GroupID != groupID {
							return fmt.Errorf("unexpected group_id '%s', expected '%s'", resp.AccountGroup.GroupID, groupID)
						}

						return nil
					},
				),
			},
			{
				ResourceName:      "sdm_account_group." + rsName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccSDMAccountGroup_Delete(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-account-group-delete")
	groupRsName := randomWithPrefix("test-group")
	accountRsName := randomWithPrefix("test-account")
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMAccountGroupConfig(rsName, groupRsName, accountRsName),
				Check: resource.ComposeTestCheckFunc(
					func(s *terraform.State) error {
						id, err := testCreatedID(s, "sdm_account_group", rsName)
						if err != nil {
							return err
						}

						// check if it was actually created
						client := testClient()
						ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
						defer cancel()
						_, err = client.AccountsGroups().Get(ctx, id)
						if err != nil {
							return fmt.Errorf("failed to get created resource: %w", err)
						}

						return nil
					},
				),
			},
		},
	})
}

func testAccSDMAccountGroupConfig(resourceName string, groupResourceName string, accountResourceName string) string {
	return fmt.Sprintf(`
	resource "sdm_account" "%s" {
		user {
			email = "%s"
			first_name = "test"
			last_name = "user"
		}
	}
	resource "sdm_group" "%s" {
		name = "%s"
	}
	resource "sdm_account_group" "%s" {
		account_id = sdm_account.%s.id
		group_id = sdm_group.%s.id
	}`, accountResourceName, randomWithPrefix("testsuites@strongdm.com"), groupResourceName, randomWithPrefix("test-group"), resourceName, accountResourceName, groupResourceName)
}
