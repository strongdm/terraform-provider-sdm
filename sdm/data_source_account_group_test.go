// Code generated by protogen. DO NOT EDIT.
// See pkg/api/v1/templates/terraform-provider-sdm/sdm/*_test.go.tpl

package sdm

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func TestAccSDMAccountGroupDataSource_Get(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Create account
	account := &sdm.User{
		FirstName: "test",
		LastName:  "user",
		Email:     randomWithPrefix("testsuites@strongdm.com"),
	}
	accountResp, err := client.Accounts().Create(ctx, account)
	if err != nil {
		t.Fatal("failed to create account: ", err)
	}

	// Create group
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
	}
	groupResp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}

	// Create account group
	accountGroup := &sdm.AccountGroup{
		AccountID: accountResp.Account.GetID(),
		GroupID:   groupResp.Group.ID,
	}
	agResp, err := client.AccountsGroups().Create(ctx, accountGroup)
	if err != nil {
		t.Fatal("failed to create account group: ", err)
	}

	rsName := randomWithPrefix("test-account-group-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMAccountGroupDataSourceGetFilterConfig(rsName, agResp.AccountGroup.ID),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_account_group."+rsName, "accounts_groups.0.account_id", accountResp.Account.GetID()),
					resource.TestCheckResourceAttr("data.sdm_account_group."+rsName, "accounts_groups.0.group_id", groupResp.Group.ID),
				),
			},
		},
	})
}

func TestAccSDMAccountGroupDataSource_GetByAccountID(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Create account
	account := &sdm.User{
		FirstName: "test",
		LastName:  "user",
		Email:     randomWithPrefix("testsuites@strongdm.com"),
	}
	accountResp, err := client.Accounts().Create(ctx, account)
	if err != nil {
		t.Fatal("failed to create account: ", err)
	}

	// Create group
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
	}
	groupResp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}

	// Create account group
	accountGroup := &sdm.AccountGroup{
		AccountID: accountResp.Account.GetID(),
		GroupID:   groupResp.Group.ID,
	}
	_, err = client.AccountsGroups().Create(ctx, accountGroup)
	if err != nil {
		t.Fatal("failed to create account group: ", err)
	}

	rsName := randomWithPrefix("test-account-group-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMAccountGroupDataSourceGetByAccountIDConfig(rsName, accountResp.Account.GetID()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_account_group."+rsName, "accounts_groups.0.account_id", accountResp.Account.GetID()),
					resource.TestCheckResourceAttr("data.sdm_account_group."+rsName, "accounts_groups.0.group_id", groupResp.Group.ID),
				),
			},
		},
	})
}

func TestAccSDMAccountGroupDataSource_GetByGroupID(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Create account
	account := &sdm.User{
		FirstName: "test",
		LastName:  "user",
		Email:     randomWithPrefix("testsuites@strongdm.com"),
	}
	accountResp, err := client.Accounts().Create(ctx, account)
	if err != nil {
		t.Fatal("failed to create account: ", err)
	}

	// Create group
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
	}
	groupResp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}

	// Create account group
	accountGroup := &sdm.AccountGroup{
		AccountID: accountResp.Account.GetID(),
		GroupID:   groupResp.Group.ID,
	}
	_, err = client.AccountsGroups().Create(ctx, accountGroup)
	if err != nil {
		t.Fatal("failed to create account group: ", err)
	}

	rsName := randomWithPrefix("test-account-group-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMAccountGroupDataSourceGetByGroupIDConfig(rsName, groupResp.Group.ID),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_account_group."+rsName, "accounts_groups.0.account_id", accountResp.Account.GetID()),
					resource.TestCheckResourceAttr("data.sdm_account_group."+rsName, "accounts_groups.0.group_id", groupResp.Group.ID),
				),
			},
		},
	})
}

func testAccSDMAccountGroupDataSourceGetFilterConfig(resourceDataSourceName string, accountGroupID string) string {
	return fmt.Sprintf(`
	data "sdm_account_group" "%s" {
		id = "%s"
	}`, resourceDataSourceName, accountGroupID)
}

func testAccSDMAccountGroupDataSourceGetByAccountIDConfig(resourceDataSourceName string, accountID string) string {
	return fmt.Sprintf(`
	data "sdm_account_group" "%s" {
		account_id = "%s"
	}`, resourceDataSourceName, accountID)
}

func testAccSDMAccountGroupDataSourceGetByGroupIDConfig(resourceDataSourceName string, groupID string) string {
	return fmt.Sprintf(`
	data "sdm_account_group" "%s" {
		group_id = "%s"
	}`, resourceDataSourceName, groupID)
}
