// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceRemoteIdentity() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceRemoteIdentityCreate),
		ReadContext:   wrapCrudOperation(resourceRemoteIdentityRead),
		UpdateContext: wrapCrudOperation(resourceRemoteIdentityUpdate),
		DeleteContext: wrapCrudOperation(resourceRemoteIdentityDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"account_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The account for this remote identity.",
			},
			"remote_identity_group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The remote identity group.",
			},
			"username": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "The username to be used as the remote identity for this account.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Update:  schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func init() {
	resourcesMap["sdm_remote_identity"] = resourceRemoteIdentity
}
func convertRemoteIdentityToPlumbing(d *schema.ResourceData) *sdm.RemoteIdentity {
	return &sdm.RemoteIdentity{
		ID:                    d.Id(),
		AccountID:             convertStringToPlumbing(d.Get("account_id")),
		RemoteIdentityGroupID: convertStringToPlumbing(d.Get("remote_identity_group_id")),
		Username:              convertStringToPlumbing(d.Get("username")),
	}
}

func resourceRemoteIdentityCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertRemoteIdentityToPlumbing(d)
	resp, err := cc.RemoteIdentities().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create RemoteIdentity: %w", err)
	}
	d.SetId(resp.RemoteIdentity.ID)
	v := resp.RemoteIdentity
	d.Set("account_id", (v.AccountID))
	d.Set("remote_identity_group_id", (v.RemoteIdentityGroupID))
	d.Set("username", (v.Username))
	return nil
}

func resourceRemoteIdentityRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertRemoteIdentityToPlumbing(d)
	_ = localVersion
	resp, err := cc.RemoteIdentities().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read RemoteIdentity %s: %w", d.Id(), err)
	}
	v := resp.RemoteIdentity
	d.Set("account_id", (v.AccountID))
	d.Set("remote_identity_group_id", (v.RemoteIdentityGroupID))
	d.Set("username", (v.Username))
	return nil
}
func resourceRemoteIdentityUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.RemoteIdentities().Update(ctx, convertRemoteIdentityToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update RemoteIdentity %s: %w", d.Id(), err)
	}
	d.SetId(resp.RemoteIdentity.ID)
	return resourceRemoteIdentityRead(ctx, d, cc)
}
func resourceRemoteIdentityDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.RemoteIdentities().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
