// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func dataSourceManagedSecret() *schema.Resource {
	return &schema.Resource{
		ReadContext: wrapCrudOperation(dataSourceManagedSecretList),
		Schema: map[string]*schema.Schema{
			"ids": {
				Type:     schema.TypeList,
				Computed: true,
				Elem:     &schema.Schema{Type: schema.TypeString},
			},

			"config": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "public part of the secret value",
			},
			"expires_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Timestamp of when secret is going to be rotated",
			},
			"id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Unique identifier of the Managed Secret.",
			},
			"last_rotated_at": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Timestamp of when secret was last rotated",
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Unique human-readable name of the Managed Secret.",
			},
			"secret_engine_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "An ID of a Secret Engine linked with the Managed Secret.",
			},
			"secret_store_path": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Path in a secret store.",
			},
			"tags": {
				Type:        schema.TypeMap,
				Elem:        tagsElemType,
				Optional:    true,
				Description: "Tags is a map of key, value pairs.",
			},
			"value": {
				Type:        schema.TypeString,
				Optional:    true,
				Sensitive:   true,
				Description: "Sensitive value of the secret.",
			},
			"managed_secrets": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{

						"config": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "public part of the secret value",
						},
						"expires_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Timestamp of when secret is going to be rotated",
						},
						"id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unique identifier of the Managed Secret.",
						},
						"last_rotated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Timestamp of when secret was last rotated",
						},
						"name": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "Unique human-readable name of the Managed Secret.",
						},
						"secret_engine_id": {
							Type:        schema.TypeString,
							Optional:    true,
							Description: "An ID of a Secret Engine linked with the Managed Secret.",
						},
						"secret_store_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Path in a secret store.",
						},
						"tags": {
							Type:        schema.TypeMap,
							Elem:        tagsElemType,
							Optional:    true,
							Description: "Tags is a map of key, value pairs.",
						},
						"value": {
							Type:        schema.TypeString,
							Optional:    true,
							Sensitive:   true,
							Description: "Sensitive value of the secret.",
						},
					},
				},
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func convertManagedSecretFilterToPlumbing(d *schema.ResourceData) (string, []interface{}) {
	filter := ""
	args := []interface{}{}
	if v, ok := d.GetOkExists("config"); ok {
		filter += "config:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("expires_at"); ok {
		filter += "expiresat:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("id"); ok {
		filter += "id:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("last_rotated_at"); ok {
		filter += "lastrotatedat:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("name"); ok {
		filter += "name:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("policy"); ok {
		filter += "policy:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("secret_engine_id"); ok {
		filter += "secretengineid:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("secret_store_path"); ok {
		filter += "secretstorepath:? "
		args = append(args, v)
	}
	if v, ok := d.GetOkExists("tags"); ok {
		tags := convertTagsToPlumbing(v)
		for kk, vv := range tags {
			filter += "tag:?=? "
			args = append(args, kk, vv)
		}
	}
	if v, ok := d.GetOkExists("value"); ok {
		filter += "value:? "
		args = append(args, v)
	}
	return filter, args
}

func dataSourceManagedSecretList(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	filter, args := convertManagedSecretFilterToPlumbing(d)
	resp, err := cc.ManagedSecrets().List(ctx, filter, args...)
	if err != nil {
		return fmt.Errorf("cannot list ManagedSecrets %s: %w", d.Id(), err)
	}
	ids := []string{}
	type entity = map[string]interface{}
	output := make([]entity, 0)
	for resp.Next() {
		v := resp.Value()
		ids = append(ids, v.ID)
		output = append(output,
			entity{
				"config":            (v.Config),
				"expires_at":        convertTimestampToPorcelain(v.ExpiresAt),
				"id":                (v.ID),
				"last_rotated_at":   convertTimestampToPorcelain(v.LastRotatedAt),
				"name":              (v.Name),
				"secret_engine_id":  (v.SecretEngineID),
				"secret_store_path": (v.SecretStorePath),
				"tags":              convertTagsToPorcelain(v.Tags),
				"value":             convertBytesToPorcelain(v.Value),
			})
	}
	if resp.Err() != nil {
		return fmt.Errorf("failure during list: %w", resp.Err())
	}

	err = d.Set("ids", ids)
	if err != nil {
		return fmt.Errorf("cannot set ids: %w", err)
	}
	err = d.Set("managed_secrets", output)
	if err != nil {
		return fmt.Errorf("cannot set output: %w", err)
	}
	d.SetId("ManagedSecret" + filter + fmt.Sprint(args...))
	return nil
}
