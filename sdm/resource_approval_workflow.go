// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceApprovalWorkflow() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceApprovalWorkflowCreate),
		ReadContext:   wrapCrudOperation(resourceApprovalWorkflowRead),
		UpdateContext: wrapCrudOperation(resourceApprovalWorkflowUpdate),
		DeleteContext: wrapCrudOperation(resourceApprovalWorkflowDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"approval_mode": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Approval mode of the ApprovalWorkflow",
			},
			"approval_step": {
				Type:        schema.TypeList,
				Elem:        approvalFlowStepElemType,
				Optional:    true,
				Description: "The approval steps of this approval workflow",
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Optional description of the ApprovalWorkflow.",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the ApprovalWorkflow.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Update:  schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}

func init() {
	resourcesMap["sdm_approval_workflow"] = resourceApprovalWorkflow
}
func convertApprovalWorkflowToPlumbing(d *schema.ResourceData) *sdm.ApprovalWorkflow {
	return &sdm.ApprovalWorkflow{
		ID:                    d.Id(),
		ApprovalMode:          convertStringToPlumbing(d.Get("approval_mode")),
		ApprovalWorkflowSteps: convertRepeatedApprovalFlowStepToPlumbing(d.Get("approval_step")),
		Description:           convertStringToPlumbing(d.Get("description")),
		Name:                  convertStringToPlumbing(d.Get("name")),
	}
}

func resourceApprovalWorkflowCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertApprovalWorkflowToPlumbing(d)
	resp, err := cc.ApprovalWorkflows().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create ApprovalWorkflow: %w", err)
	}
	d.SetId(resp.ApprovalWorkflow.ID)
	v := resp.ApprovalWorkflow
	d.Set("approval_mode", (v.ApprovalMode))
	d.Set("approval_step", convertRepeatedApprovalFlowStepToPorcelain(v.ApprovalWorkflowSteps))
	d.Set("description", (v.Description))
	d.Set("name", (v.Name))
	return nil
}

func resourceApprovalWorkflowRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertApprovalWorkflowToPlumbing(d)
	_ = localVersion
	resp, err := cc.ApprovalWorkflows().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read ApprovalWorkflow %s: %w", d.Id(), err)
	}
	v := resp.ApprovalWorkflow
	d.Set("approval_mode", (v.ApprovalMode))
	d.Set("approval_step", convertRepeatedApprovalFlowStepToPorcelain(v.ApprovalWorkflowSteps))
	d.Set("description", (v.Description))
	d.Set("name", (v.Name))
	return nil
}
func resourceApprovalWorkflowUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.ApprovalWorkflows().Update(ctx, convertApprovalWorkflowToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update ApprovalWorkflow %s: %w", d.Id(), err)
	}
	d.SetId(resp.ApprovalWorkflow.ID)
	return resourceApprovalWorkflowRead(ctx, d, cc)
}
func resourceApprovalWorkflowDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.ApprovalWorkflows().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
