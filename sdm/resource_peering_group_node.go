// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourcePeeringGroupNode() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourcePeeringGroupNodeCreate),
		ReadContext:   wrapCrudOperation(resourcePeeringGroupNodeRead),
		DeleteContext: wrapCrudOperation(resourcePeeringGroupNodeDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"group_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				ForceNew:    true,
				Description: "Peering Group ID to which the node will be attached to.",
			},
			"node_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				ForceNew:    true,
				Description: "Node ID to be attached.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertPeeringGroupNodeToPlumbing(d *schema.ResourceData) *sdm.PeeringGroupNode {
	return &sdm.PeeringGroupNode{
		ID:      d.Id(),
		GroupID: convertStringToPlumbing(d.Get("group_id")),
		NodeID:  convertStringToPlumbing(d.Get("node_id")),
	}
}

func resourcePeeringGroupNodeCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertPeeringGroupNodeToPlumbing(d)
	resp, err := cc.PeeringGroupNodes().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create PeeringGroupNode: %w", err)
	}
	d.SetId(resp.PeeringGroupNode.ID)
	v := resp.PeeringGroupNode
	d.Set("group_id", (v.GroupID))
	d.Set("node_id", (v.NodeID))
	return nil
}

func resourcePeeringGroupNodeRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertPeeringGroupNodeToPlumbing(d)
	_ = localVersion
	resp, err := cc.PeeringGroupNodes().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read PeeringGroupNode %s: %w", d.Id(), err)
	}
	v := resp.PeeringGroupNode
	d.Set("group_id", (v.GroupID))
	d.Set("node_id", (v.NodeID))
	return nil
}
func resourcePeeringGroupNodeDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.PeeringGroupNodes().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
