// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceIdentitySet() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceIdentitySetCreate),
		ReadContext:   wrapCrudOperation(resourceIdentitySetRead),
		UpdateContext: wrapCrudOperation(resourceIdentitySetUpdate),
		DeleteContext: wrapCrudOperation(resourceIdentitySetDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the IdentitySet.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertIdentitySetToPlumbing(d *schema.ResourceData) *sdm.IdentitySet {
	return &sdm.IdentitySet{
		ID:   d.Id(),
		Name: convertStringToPlumbing(d.Get("name")),
	}
}

func resourceIdentitySetCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertIdentitySetToPlumbing(d)
	resp, err := cc.IdentitySets().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create IdentitySet: %w", err)
	}
	d.SetId(resp.IdentitySet.ID)
	v := resp.IdentitySet
	d.Set("name", (v.Name))
	return nil
}

func resourceIdentitySetRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertIdentitySetToPlumbing(d)
	_ = localVersion
	resp, err := cc.IdentitySets().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read IdentitySet %s: %w", d.Id(), err)
	}
	v := resp.IdentitySet
	d.Set("name", (v.Name))
	return nil
}
func resourceIdentitySetUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	resp, err := cc.IdentitySets().Update(ctx, convertIdentitySetToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update IdentitySet %s: %w", d.Id(), err)
	}
	d.SetId(resp.IdentitySet.ID)
	return resourceIdentitySetRead(ctx, d, cc)
}
func resourceIdentitySetDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.IdentitySets().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
