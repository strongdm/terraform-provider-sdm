// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceProxyClusterKey() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceProxyClusterKeyCreate),
		ReadContext:   wrapCrudOperation(resourceProxyClusterKeyRead),
		DeleteContext: wrapCrudOperation(resourceProxyClusterKeyDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"proxy_cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: "The ID of the proxy cluster which this key authenticates to.",
			},
			"secret_key": {
				Type:      schema.TypeString,
				Computed:  true,
				Sensitive: true,
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertProxyClusterKeyToPlumbing(d *schema.ResourceData) *sdm.ProxyClusterKey {
	return &sdm.ProxyClusterKey{
		ID:             d.Id(),
		ProxyClusterID: convertStringToPlumbing(d.Get("proxy_cluster_id")),
	}
}

func resourceProxyClusterKeyCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertProxyClusterKeyToPlumbing(d)
	resp, err := cc.ProxyClusterKeys().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create ProxyClusterKey: %w", err)
	}
	d.SetId(resp.ProxyClusterKey.ID)
	v := resp.ProxyClusterKey
	d.Set("proxy_cluster_id", (v.ProxyClusterID))
	d.Set("secret_key", resp.SecretKey)
	return nil
}

func resourceProxyClusterKeyRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	localVersion := convertProxyClusterKeyToPlumbing(d)
	_ = localVersion
	resp, err := cc.ProxyClusterKeys().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read ProxyClusterKey %s: %w", d.Id(), err)
	}
	v := resp.ProxyClusterKey
	d.Set("proxy_cluster_id", (v.ProxyClusterID))
	return nil
}
func resourceProxyClusterKeyDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	var errNotFound *sdm.NotFoundError
	_, err := cc.ProxyClusterKeys().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
