// Code generated by protogen. DO NOT EDIT.

package sdm

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func resourceRole() *schema.Resource {
	return &schema.Resource{
		CreateContext: wrapCrudOperation(resourceRoleCreate),
		ReadContext:   wrapCrudOperation(resourceRoleRead),
		UpdateContext: wrapCrudOperation(resourceRoleUpdate),
		DeleteContext: wrapCrudOperation(resourceRoleDelete),
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"access_rules": {
				Type:             schema.TypeString,
				Optional:         true,
				Computed:         true,
				DiffSuppressFunc: accessRulesDiffSuppress,
				Description:      "AccessRules is a list of access rules defining the resources this Role has access to.",
			},
			"managed_by": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "Managed By is a read only field for what service manages this role, e.g. StrongDM, Okta, Azure.",
			},
			"name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "Unique human-readable name of the Role.",
			},
			"tags": {
				Type:        schema.TypeMap,
				Elem:        tagsElemType,
				Optional:    true,
				Description: "Tags is a map of key, value pairs.",
			},
		},
		Timeouts: &schema.ResourceTimeout{
			Default: schema.DefaultTimeout(60 * time.Second),
			Create:  schema.DefaultTimeout(60 * time.Second),
			Read:    schema.DefaultTimeout(60 * time.Second),
			Update:  schema.DefaultTimeout(60 * time.Second),
			Delete:  schema.DefaultTimeout(60 * time.Second),
		},
	}
}
func convertRoleToPlumbing(d *schema.ResourceData) *sdm.Role {
	return &sdm.Role{
		ID:          d.Id(),
		AccessRules: convertAccessRulesToPlumbing(d.Get("access_rules")),
		ManagedBy:   convertStringToPlumbing(d.Get("managed_by")),
		Name:        convertStringToPlumbing(d.Get("name")),
		Tags:        convertTagsToPlumbing(d.Get("tags")),
	}
}

func resourceRoleCreate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutCreate))
	defer cancel()
	localVersion := convertRoleToPlumbing(d)
	resp, err := cc.Roles().Create(ctx, localVersion)
	if err != nil {
		return fmt.Errorf("cannot create Role: %w", err)
	}
	d.SetId(resp.Role.ID)
	v := resp.Role
	d.Set("access_rules", convertAccessRulesToPorcelain(v.AccessRules))
	d.Set("managed_by", (v.ManagedBy))
	d.Set("name", (v.Name))
	d.Set("tags", convertTagsToPorcelain(v.Tags))
	return nil
}

func resourceRoleRead(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutRead))
	defer cancel()
	localVersion := convertRoleToPlumbing(d)
	_ = localVersion
	resp, err := cc.Roles().Get(ctx, d.Id())
	var errNotFound *sdm.NotFoundError
	if err != nil && errors.As(err, &errNotFound) {
		d.SetId("")
		return nil
	} else if err != nil {
		return fmt.Errorf("cannot read Role %s: %w", d.Id(), err)
	}
	v := resp.Role
	d.Set("access_rules", convertAccessRulesToPorcelain(v.AccessRules))
	d.Set("managed_by", (v.ManagedBy))
	d.Set("name", (v.Name))
	d.Set("tags", convertTagsToPorcelain(v.Tags))
	return nil
}
func resourceRoleUpdate(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutUpdate))
	defer cancel()
	resp, err := cc.Roles().Update(ctx, convertRoleToPlumbing(d))
	if err != nil {
		return fmt.Errorf("cannot update Role %s: %w", d.Id(), err)
	}
	d.SetId(resp.Role.ID)
	return resourceRoleRead(ctx, d, cc)
}
func resourceRoleDelete(ctx context.Context, d *schema.ResourceData, cc *sdm.Client) error {
	ctx, cancel := context.WithTimeout(ctx, d.Timeout(schema.TimeoutDelete))
	defer cancel()
	var errNotFound *sdm.NotFoundError
	_, err := cc.Roles().Delete(ctx, d.Id())
	if err != nil && errors.As(err, &errNotFound) {
		return nil
	}
	return err
}
