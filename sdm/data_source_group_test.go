// Code generated by protogen. DO NOT EDIT.
// See pkg/api/v1/templates/terraform-provider-sdm/sdm/*_test.go.tpl

package sdm

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func TestAccSDMGroupDataSource_Get(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
		Tags: map[string]string{
			"environment": "test",
		},
	}

	resp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}
	group = resp.Group

	rsName := randomWithPrefix("test-group-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupDataSourceGetFilterConfig(rsName, group.Name),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_group."+rsName, "groups.0.name", group.Name),
					resource.TestCheckResourceAttr("data.sdm_group."+rsName, "groups.0.tags.environment", "test"),
				),
			},
		},
	})
}

func TestAccSDMGroupDataSource_GetByTags(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	tagValue := randomWithPrefix("test-env")
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
		Tags: map[string]string{
			"environment": tagValue,
			"team":        "engineering",
		},
	}

	resp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}
	group = resp.Group

	rsName := randomWithPrefix("test-group-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupDataSourceGetByTagsConfig(rsName, tagValue),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_group."+rsName, "groups.0.name", group.Name),
					resource.TestCheckResourceAttr("data.sdm_group."+rsName, "groups.0.tags.environment", tagValue),
					resource.TestCheckResourceAttr("data.sdm_group."+rsName, "groups.0.tags.team", "engineering"),
				),
			},
		},
	})
}

func testAccSDMGroupDataSourceGetFilterConfig(resourceDataSourceName string, groupName string) string {
	return fmt.Sprintf(`
	data "sdm_group" "%s" {
		name = "%s"
	}`, resourceDataSourceName, groupName)
}

func testAccSDMGroupDataSourceGetByTagsConfig(resourceDataSourceName string, tagValue string) string {
	return fmt.Sprintf(`
	data "sdm_group" "%s" {
		tags = {
			"environment" = "%s"
		}
	}`, resourceDataSourceName, tagValue)
}
