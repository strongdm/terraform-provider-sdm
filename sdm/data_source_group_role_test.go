// Code generated by protogen. DO NOT EDIT.
// See pkg/api/v1/templates/terraform-provider-sdm/sdm/*_test.go.tpl

package sdm

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	sdm "github.com/strongdm/terraform-provider-sdm/sdm/internal/sdk"
)

func TestAccSDMGroupRoleDataSource_Get(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Create group
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
	}
	groupResp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}

	// Create role
	role := &sdm.Role{
		Name: randomWithPrefix("test-role"),
	}
	roleResp, err := client.Roles().Create(ctx, role)
	if err != nil {
		t.Fatal("failed to create role: ", err)
	}

	// Create group role
	groupRole := &sdm.GroupRole{
		GroupID: groupResp.Group.ID,
		RoleID:  roleResp.Role.ID,
	}
	grResp, err := client.GroupsRoles().Create(ctx, groupRole)
	if err != nil {
		t.Fatal("failed to create group role: ", err)
	}

	rsName := randomWithPrefix("test-group-role-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupRoleDataSourceGetFilterConfig(rsName, grResp.GroupRole.ID),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_group_role."+rsName, "groups_roles.0.group_id", groupResp.Group.ID),
					resource.TestCheckResourceAttr("data.sdm_group_role."+rsName, "groups_roles.0.role_id", roleResp.Role.ID),
				),
			},
		},
	})
}

func TestAccSDMGroupRoleDataSource_GetByGroupID(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Create group
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
	}
	groupResp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}

	// Create role
	role := &sdm.Role{
		Name: randomWithPrefix("test-role"),
	}
	roleResp, err := client.Roles().Create(ctx, role)
	if err != nil {
		t.Fatal("failed to create role: ", err)
	}

	// Create group role
	groupRole := &sdm.GroupRole{
		GroupID: groupResp.Group.ID,
		RoleID:  roleResp.Role.ID,
	}
	_, err = client.GroupsRoles().Create(ctx, groupRole)
	if err != nil {
		t.Fatal("failed to create group role: ", err)
	}

	rsName := randomWithPrefix("test-group-role-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupRoleDataSourceGetByGroupIDConfig(rsName, groupResp.Group.ID),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_group_role."+rsName, "groups_roles.0.group_id", groupResp.Group.ID),
					resource.TestCheckResourceAttr("data.sdm_group_role."+rsName, "groups_roles.0.role_id", roleResp.Role.ID),
				),
			},
		},
	})
}

func TestAccSDMGroupRoleDataSource_GetByRoleID(t *testing.T) {
	initAcceptanceTest(t)

	client, err := preTestClient()
	if err != nil {
		t.Fatal("failed to create test client", err)
	}
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Create group
	group := &sdm.Group{
		Name: randomWithPrefix("test-group"),
	}
	groupResp, err := client.Groups().Create(ctx, group)
	if err != nil {
		t.Fatal("failed to create group: ", err)
	}

	// Create role
	role := &sdm.Role{
		Name: randomWithPrefix("test-role"),
	}
	roleResp, err := client.Roles().Create(ctx, role)
	if err != nil {
		t.Fatal("failed to create role: ", err)
	}

	// Create group role
	groupRole := &sdm.GroupRole{
		GroupID: groupResp.Group.ID,
		RoleID:  roleResp.Role.ID,
	}
	_, err = client.GroupsRoles().Create(ctx, groupRole)
	if err != nil {
		t.Fatal("failed to create group role: ", err)
	}

	rsName := randomWithPrefix("test-group-role-ds")

	resource.ParallelTest(t, resource.TestCase{
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupRoleDataSourceGetByRoleIDConfig(rsName, roleResp.Role.ID),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("data.sdm_group_role."+rsName, "groups_roles.0.group_id", groupResp.Group.ID),
					resource.TestCheckResourceAttr("data.sdm_group_role."+rsName, "groups_roles.0.role_id", roleResp.Role.ID),
				),
			},
		},
	})
}

func testAccSDMGroupRoleDataSourceGetFilterConfig(resourceDataSourceName string, groupRoleID string) string {
	return fmt.Sprintf(`
	data "sdm_group_role" "%s" {
		id = "%s"
	}`, resourceDataSourceName, groupRoleID)
}

func testAccSDMGroupRoleDataSourceGetByGroupIDConfig(resourceDataSourceName string, groupID string) string {
	return fmt.Sprintf(`
	data "sdm_group_role" "%s" {
		group_id = "%s"
	}`, resourceDataSourceName, groupID)
}

func testAccSDMGroupRoleDataSourceGetByRoleIDConfig(resourceDataSourceName string, roleID string) string {
	return fmt.Sprintf(`
	data "sdm_group_role" "%s" {
		role_id = "%s"
	}`, resourceDataSourceName, roleID)
}
