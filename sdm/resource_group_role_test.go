// Code generated by protogen. DO NOT EDIT.
// See pkg/api/v1/templates/terraform-provider-sdm/sdm/*_test.go.tpl

package sdm

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

func init() {
	resource.AddTestSweepers("sdm_group_role", &resource.Sweeper{
		Name: "sdm_group_role",
		F: func(region string) error {
			client, err := preTestClient()
			if err != nil {
				return fmt.Errorf("Error getting client: %s", err)
			}

			ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
			defer cancel()

			roleResp, err := client.Roles().List(ctx, "name:*-test-acc")
			if err != nil {
				return fmt.Errorf("Error listing roles: %s", err)
			}

			for roleResp.Next() {
				r := roleResp.Value()
				grResp, err := client.GroupsRoles().List(ctx, "roleid:?", r.ID)
				if err != nil {
					return fmt.Errorf("Error listing group roles: %s", err)
				}
				for grResp.Next() {
					v := grResp.Value()
					_, err := client.GroupsRoles().Delete(ctx, v.ID)
					if err != nil {
						fmt.Printf("error deleting group role %s %s\n", v.ID, err)
					}
				}
				if grResp.Err() != nil {
					fmt.Printf("error listing group roles %s", grResp.Err())
				}
			}
			if roleResp.Err() != nil {
				return fmt.Errorf("error listing roles %s", roleResp.Err())
			}
			return nil
		},
	})
}

func TestAccSDMGroupRole_Create(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-group-role-create")
	groupRsName := randomWithPrefix("test-group")
	roleRsName := randomWithPrefix("test-role")
	groupID := ""
	roleID := ""
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupRoleConfig(rsName, groupRsName, roleRsName),
				Check: resource.ComposeTestCheckFunc(
					func(s *terraform.State) error {
						var err error
						groupID, err = testCreatedID(s, "sdm_group", groupRsName)
						if err != nil {
							return err
						}

						roleID, err = testCreatedID(s, "sdm_role", roleRsName)
						if err != nil {
							return err
						}
						return nil
					},
					func(s *terraform.State) error {
						if err := resource.TestCheckResourceAttr("sdm_group_role."+rsName, "group_id", groupID)(s); err != nil {
							return err
						}
						if err := resource.TestCheckResourceAttr("sdm_group_role."+rsName, "role_id", roleID)(s); err != nil {
							return err
						}
						return nil
					},
					func(s *terraform.State) error {

						id, err := testCreatedID(s, "sdm_group_role", rsName)
						if err != nil {
							return err
						}

						// check if it was actually created
						client := testClient()
						ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
						defer cancel()
						resp, err := client.GroupsRoles().Get(ctx, id)
						if err != nil {
							return fmt.Errorf("failed to get created resource: %w", err)
						}

						if resp.GroupRole.GroupID != groupID {
							return fmt.Errorf("unexpected group_id '%s', expected '%s'", resp.GroupRole.GroupID, groupID)
						}

						if resp.GroupRole.RoleID != roleID {
							return fmt.Errorf("unexpected role_id '%s', expected '%s'", resp.GroupRole.RoleID, roleID)
						}

						return nil
					},
				),
			},
			{
				ResourceName:      "sdm_group_role." + rsName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func TestAccSDMGroupRole_Delete(t *testing.T) {
	initAcceptanceTest(t)
	rsName := randomWithPrefix("test-group-role-delete")
	groupRsName := randomWithPrefix("test-group")
	roleRsName := randomWithPrefix("test-role")
	resource.ParallelTest(t, resource.TestCase{
		Providers:    testAccProviders,
		CheckDestroy: testCheckDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccSDMGroupRoleConfig(rsName, groupRsName, roleRsName),
				Check: resource.ComposeTestCheckFunc(
					func(s *terraform.State) error {
						id, err := testCreatedID(s, "sdm_group_role", rsName)
						if err != nil {
							return err
						}

						// check if it was actually created
						client := testClient()
						ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
						defer cancel()
						_, err = client.GroupsRoles().Get(ctx, id)
						if err != nil {
							return fmt.Errorf("failed to get created resource: %w", err)
						}

						return nil
					},
				),
			},
		},
	})
}

func testAccSDMGroupRoleConfig(resourceName string, groupResourceName string, roleResourceName string) string {
	return fmt.Sprintf(`
	resource "sdm_group" "%s" {
		name = "%s"
	}
	resource "sdm_role" "%s" {
		name = "%s"
	}
	resource "sdm_group_role" "%s" {
		group_id = sdm_group.%s.id
		role_id = sdm_role.%s.id
	}`, groupResourceName, randomWithPrefix("test-group"), roleResourceName, randomWithPrefix("test-role"), resourceName, groupResourceName, roleResourceName)
}
